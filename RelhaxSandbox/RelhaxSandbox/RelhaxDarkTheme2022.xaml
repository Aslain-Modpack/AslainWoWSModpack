<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:RelhaxSandbox"
    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
    xmlns:sys="clr-namespace:System;assembly=mscorlib">
    <!-- Testing re-implementation of dark theme -->
    <!-- add some static colors -->
    <SolidColorBrush x:Key="DarkThemeTextColor" Color="White"/>
    <SolidColorBrush x:Key="DarkThemeBackground" Color="#1A1A1A"/>
    <SolidColorBrush x:Key="DarkThemeButton" Color="#2A2A2A"/>
    <SolidColorBrush x:Key="DarkThemeActiveTab" Color="#646464"/>
    <SolidColorBrush x:Key="DarkThemeImageButtonBackground" Color="#AFAFAF"/>
    <LinearGradientBrush x:Key="DarkThemeProgressBarForeground" StartPoint="0.25, 0" EndPoint="0.75, 1">
        <GradientStop Color="#5F5F5F5F" Offset="0"/>
        <GradientStop Color="#0000FF" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="DarkThemeCheckboxRadioButtonHighlight" Color="#868686"/>
    <SolidColorBrush x:Key="DarkThemeTabItemHighlightColorBrush" Color="{StaticResource DarkThemeCheckboxRadioButtonHighlight}"/>
    <SolidColorBrush x:Key="DarkThemeTabItemSelectedColorBrush" Color="#969696"/>

    <!-- This was just a test. don't use it.-->
    <Style x:Key="DarkThemeStyle">
        <Setter Property="Control.Background" Value="Blue"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding DarkTheme, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True">
                <Setter Property="Control.Background" Value="Black" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- I don't do anything fancy with the progressBar so just modifying the properties will do -->
    <Style x:Key="DarkThemeStyleProgressBar">
        <Style.Triggers>
            <DataTrigger Binding="{Binding DarkTheme, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True">
                <Setter Property="ProgressBar.Background" Value="{StaticResource DarkThemeButton}"/>
                <Setter Property="ProgressBar.Foreground" Value="{StaticResource DarkThemeProgressBarForeground}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <!-- Checkbox theme -->
    <Style x:Key="DarkThemeStyleCheckbox">
        <Style.Triggers>
            <DataTrigger Binding="{Binding DarkTheme, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True">
                <Setter Property="Control.Background" Value="{StaticResource DarkThemeBackground}"/>
                <Setter Property="Control.Foreground" Value="{StaticResource DarkThemeTextColor}"/>
                <!-- highlight -->
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <!-- RadioButton theme -->
    <Style x:Key="DarkThemeStyleRadioButton">
        <Style.Triggers>
            <DataTrigger Binding="{Binding DarkTheme, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True">
                <Setter Property="Control.Background" Value="{StaticResource DarkThemeBackground}"/>
                <Setter Property="Control.Foreground" Value="{StaticResource DarkThemeTextColor}"/>
                <!-- highlight -->
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <!-- TabItem theme -->
    <Style x:Key="DarkThemeStyleTabItem">
        <Style.Triggers>
            <DataTrigger Binding="{Binding DarkTheme, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True">
                <Setter Property="Control.Background" Value="{StaticResource DarkThemeBackground}"/>
                <Setter Property="Control.Foreground" Value="{StaticResource DarkThemeTextColor}"/>
                <!-- highlight -->
                <!-- <Setter Property="UIElement.IsMouseOver" Value="{StaticResource DarkThemeTabItemHighlightColorBrush}"/> -->
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Button theme -->
    <Style x:Key="DarkThemeStyleButton" BasedOn="{StaticResource {x:Type Button}}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                            <Setter Property="Foreground" Value="#FF838383"/>
                        </Trigger>
                        <!-- NOTE: triggers are processed and applied in the order that they are listed. In this example, because the custom triggers
                             are set *after* the original ones above, these will be processed and applied *after* the above ones -->
                        <DataTrigger Binding="{Binding DarkTheme, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource DarkThemeBackground}"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding DarkTheme, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Button.Background" TargetName="border" Value="{StaticResource DarkThemeCheckboxRadioButtonHighlight}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding DarkTheme, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True">
                <Setter Property="Button.Foreground" Value="{StaticResource DarkThemeTextColor}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>