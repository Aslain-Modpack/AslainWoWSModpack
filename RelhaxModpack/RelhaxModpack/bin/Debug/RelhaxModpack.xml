<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RelhaxModpack</name>
    </assembly>
    <members>
        <member name="T:RelhaxModpack.Atlases.AtlasProgressDelegate">
            <summary>
            The delegate to invoke when calling back to the sender for the AtlasProgres event.
            </summary>
            <param name="sender">The sending Atlas Creator.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:RelhaxModpack.Atlases.AtlasCreator">
            <summary>
            Represents the entire process of building an atlas image.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Atlases.AtlasCreator.MAX_ATLAS_SIZE_32BIT">
            <summary>
            The (arbitrary, estimated) limit of an atlas size that the DDS compressor can process without exceeding 2GB.
            </summary>
            <remarks>
            In 32bit windows OSs, the maximum amount of memory that a process can have is 2GB.
            Exceeding that in the compressor will trigger an AccessViolationException.
            </remarks>
        </member>
        <member name="F:RelhaxModpack.Atlases.AtlasCreator.Atlas">
            <summary>
            The Atlas instructions object for building the image and map.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Atlases.AtlasCreator.Token">
            <summary>
            The token for handling a cancellation call from the user.
            </summary>
        </member>
        <member name="E:RelhaxModpack.Atlases.AtlasCreator.OnAtlasProgres">
            <summary>
            The event when atlas creation progress occurs.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Atlases.AtlasCreator.CreateAtlas(RelhaxModpack.Atlases.Atlas)">
            <summary>
            Create the Atlas image and map xml.
            </summary>
            <param name="atlas">The atlas arguments object.</param>
            <returns>Success code if complete, any other FailCode otherwise.</returns>
            <seealso cref="T:RelhaxModpack.Utilities.Enums.FailCode"/>
        </member>
        <member name="M:RelhaxModpack.Atlases.AtlasCreator.CreateAtlas">
            <summary>
            Create the atlas image and map xml.
            </summary>
            <returns>Success code if complete, any other FailCode otherwise.</returns>
            <seealso cref="T:RelhaxModpack.Utilities.Enums.FailCode"/>
        </member>
        <member name="P:RelhaxModpack.Atlases.AtlasCreator.ParseCustomTexturesTask">
            <summary>
            The task object of parsing all custom images from multiple folders into a list of bitmaps.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Atlases.AtlasCreator.CustomContourIconImages">
            <summary>
            The list of parsed custom images from folders into textures.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Atlases.AtlasCreator.LoadCustomContourIconsAsync(System.Collections.Generic.List{System.String},System.Threading.CancellationToken)">
            <summary>
            Loads all custom textures from disk into texture objects. This is done on a separate thread so it is not done redundantly multiple times on each atlas thread.
            </summary>
            <param name="CustomFolderPaths">The list of absolute paths containing custom contour icon images to be loaded.</param>
            <param name="token">The cancellation token.</param>
            <returns>The list of textures.</returns>
        </member>
        <member name="M:RelhaxModpack.Atlases.AtlasCreator.DisposeParsedCustomTextures">
            <summary>
            Dispose of all textures in the shared custom texture list.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Atlases.AtlasCreator.Dispose(System.Boolean)">
            <summary>
            Dispose of the Atlas Creator (mostly disposing image data).
            </summary>
            <param name="disposing">Set to true to dispose managed objects as well as unmanaged.</param>
        </member>
        <member name="M:RelhaxModpack.Atlases.AtlasCreator.Finalize">
            <summary>
            Destruct the instance of the AtlasCreator by the garbage collector.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Atlases.AtlasCreator.Dispose">
            <summary>
            Dispose of the Atlas Creator (mostly disposing image data)
            </summary>
        </member>
        <member name="T:RelhaxModpack.Atlases.AtlasUtils">
            <summary>
            A utility class for Atlas file processing.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Atlases.AtlasUtils.MSVCPLink">
            <summary>
            The link to the Microsoft Visual C++ dll package required by the atlas processing libraries.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Atlases.AtlasUtils.FreeImageLibrary">
            <summary>
            The manager instance of the FreeImage Library.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Atlases.AtlasUtils.NvTexLibrary">
            <summary>
            The manager instance of the Nvidia Texture Tools Library.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Atlases.AtlasUtils.TestLibrary(RelhaxModpack.Atlases.IRelhaxUnmanagedLibrary,System.String,System.Boolean)">
            <summary>
            Test the ability to load an unmanaged library.
            </summary>
            <returns>True if library loaded, false otherwise.</returns>
        </member>
        <member name="M:RelhaxModpack.Atlases.AtlasUtils.TestLoadAtlasLibraries(System.Boolean)">
            <summary>
            Test the ability to load and unload all the atlas image processing libraries.
            </summary>
            <returns>True if both libraries loaded, false otherwise.</returns>
        </member>
        <member name="P:RelhaxModpack.Atlases.AtlasUtils.AtlasLoaderLockObject">
            <summary>
            Lock object used in AtlasCreator for critical sections that can't be done at the same time.
            </summary>
            <remarks>Each atlas file is created by its own thread. However, the DDS loading and saving API used can't be used more then once at a time.</remarks>
        </member>
        <member name="F:RelhaxModpack.Atlases.AtlasUtils.AtlasBuilders">
            <summary>
            A list of Atlas creating thread engines.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Atlases.AtlasUtils.VerifyImageLibsLoaded">
            <summary>
            Verifies the Atlas processing libraries are loaded. If not, they are loaded.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Atlases.AtlasUtils.DisposeOfAllAtlasResources">
            <summary>
            Disposes of all statically used AtlasUtils resources, including releasing the custom texture list.
            </summary>
        </member>
        <member name="T:RelhaxModpack.Atlases.ImageHandler">
            <summary>
            Class for handling loading and saving of DDS atlas files.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Atlases.ImageHandler.LoadDDS(System.String)">
            <summary>
            Loads a DDS image into a Bitmap object.
            </summary>
            <param name="filename">The relative or absolute location of the DDS file.</param>
            <returns>The Bitmap of the DDS file, or null if it failed.</returns>
        </member>
        <member name="M:RelhaxModpack.Atlases.ImageHandler.SaveDDS(System.String,System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Saves a Bitmap image into a DDS file of DXT5 compression.
            </summary>
            <param name="savePath">The path to save the file.</param>
            <param name="image">The bitmap to save.</param>
            <param name="disposeImage">Set to true to dispose of the inputted bitmap after it's saved.</param>
            <returns>True if image creation was successful, false otherwise.</returns>
        </member>
        <member name="T:RelhaxModpack.Atlases.MapHandler">
            <summary>
            A class for handling WG xml atlas map files.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Atlases.MapHandler.LoadMapFile(System.String)">
            <summary>
            Loads a WG atlas map file into a texture list.
            </summary>
            <param name="mapFile">The map file to load.</param>
            <returns>The texture list if success, null otherwise.</returns>
        </member>
        <member name="M:RelhaxModpack.Atlases.MapHandler.SaveMapfile(System.String,System.Collections.Generic.Dictionary{System.String,System.Drawing.Rectangle})">
            <summary>
            Saves a map dictionary to the WG map xml file.
            </summary>
            <param name="filename">The location to save the file.</param>
            <param name="map">The Dictionary of each image name (key) and location (value) on the atlas file.</param>
        </member>
        <member name="T:RelhaxModpack.Atlases.Packing.ArevaloRectanglePacker">
            <summary>Rectangle packer using an algorithm by Javier Arevalo</summary>
            <remarks>
              <para>
                Original code by Javier Arevalo (jare at iguanademos dot com). Rewritten
                to C# / .NET by Markus Ewald (cygon at nuclex dot org). The following comments
                were written by the original author when he published his algorithm.
              </para>
              <para>
                You have a bunch of rectangular pieces. You need to arrange them in a
                rectangular surface so that they don't overlap, keeping the total area of the
                rectangle as small as possible. This is fairly common when arranging characters
                in a bitmapped font, lightmaps for a 3D engine, and I guess other situations as
                well.
              </para>
              <para>
                The idea of this algorithm is that, as we add rectangles, we can pre-select
                "interesting" places where we can try to add the next rectangles. For optimal
                results, the rectangles should be added in order. I initially tried using area
                as a sorting criteria, but it didn't work well with very tall or very flat
                rectangles. I then tried using the longest dimension as a selector, and it
                worked much better. So much for intuition...
              </para>
              <para>
                These "interesting" places are just to the right and just below the currently
                added rectangle. The first rectangle, obviously, goes at the top left, the next
                one would go either to the right or below this one, and so on. It is a weird way
                to do it, but it seems to work very nicely.
              </para>
              <para>
                The way we search here is fairly brute-force, the fact being that for most
                off-line purposes the performance seems more than adequate. I have generated a
                Japanese font with around 8500 characters and all the time was spent generating
                the bitmaps.
              </para>
              <para>
                Also, for all we care, we could grow the parent rectangle in a different way
                than power of two. It just happens that power of 2 is very convenient for
                graphics hardware textures.
              </para>
              <para>
                I'd be interested in hearing of other approaches to this problem. Make sure
                to post them on http://www.flipcode.com
              </para>
            </remarks>
        </member>
        <member name="T:RelhaxModpack.Atlases.Packing.ArevaloRectanglePacker.AnchorRankComparer">
            <summary>Compares the 'rank' of anchoring points</summary>
            <remarks>
              Anchoring points are potential locations for the placement of new rectangles.
              Each time a rectangle is inserted, an anchor point is generated on its upper
              right end and another one at its lower left end. The anchor points are kept
              in a list that is ordered by their closeness to the upper left corner of the
              packing area (their 'rank') so the packer favors positions that are closer to
              the upper left for new rectangles.
            </remarks>
        </member>
        <member name="F:RelhaxModpack.Atlases.Packing.ArevaloRectanglePacker.AnchorRankComparer.Default">
            <summary>Provides a default instance for the anchor rank comparer</summary>
        </member>
        <member name="M:RelhaxModpack.Atlases.Packing.ArevaloRectanglePacker.AnchorRankComparer.Compare(System.Drawing.Point,System.Drawing.Point)">
            <summary>Compares the rank of two anchors against each other</summary>
            <param name="left">Left anchor point that will be compared</param>
            <param name="right">Right anchor point that will be compared</param>
            <returns>The relation of the two anchor point's ranks to each other</returns>
        </member>
        <member name="F:RelhaxModpack.Atlases.Packing.ArevaloRectanglePacker.actualPackingAreaHeight">
            <summary>Current height of the packing area</summary>
        </member>
        <member name="F:RelhaxModpack.Atlases.Packing.ArevaloRectanglePacker.actualPackingAreaWidth">
            <summary>Current width of the packing area</summary>
        </member>
        <member name="F:RelhaxModpack.Atlases.Packing.ArevaloRectanglePacker.anchors">
            <summary>Anchoring points where new rectangles can potentially be placed</summary>
        </member>
        <member name="F:RelhaxModpack.Atlases.Packing.ArevaloRectanglePacker.packedRectangles">
            <summary>Rectangles contained in the packing area</summary>
        </member>
        <member name="M:RelhaxModpack.Atlases.Packing.ArevaloRectanglePacker.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new rectangle packer</summary>
            <param name="packingAreaWidth">Maximum width of the packing area</param>
            <param name="packingAreaHeight">Maximum height of the packing area</param>
        </member>
        <member name="M:RelhaxModpack.Atlases.Packing.ArevaloRectanglePacker.TryPack(System.Int32,System.Int32,System.Drawing.Point@)">
            <summary>Tries to allocate space for a rectangle in the packing area</summary>
            <param name="rectangleWidth">Width of the rectangle to allocate</param>
            <param name="rectangleHeight">Height of the rectangle to allocate</param>
            <param name="placement">Output parameter receiving the rectangle's placement</param>
            <returns>True if space for the rectangle could be allocated</returns>
        </member>
        <member name="M:RelhaxModpack.Atlases.Packing.ArevaloRectanglePacker.OptimizePlacement(System.Drawing.Point@,System.Int32,System.Int32)">
            <summary>
              Optimizes the rectangle's placement by moving it either left or up to fill
              any gaps resulting from rectangles blocking the anchors of the most optimal
              placements.
            </summary>
            <param name="placement">Placement to be optimized</param>
            <param name="rectangleWidth">Width of the rectangle to be optimized</param>
            <param name="rectangleHeight">Height of the rectangle to be optimized</param>
        </member>
        <member name="M:RelhaxModpack.Atlases.Packing.ArevaloRectanglePacker.SelectAnchorRecursive(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Searches for a free anchor and recursively enlarges the packing area
              if none can be found.
            </summary>
            <param name="rectangleWidth">Width of the rectangle to be placed</param>
            <param name="rectangleHeight">Height of the rectangle to be placed</param>
            <param name="testedPackingAreaWidth">Width of the tested packing area</param>
            <param name="testedPackingAreaHeight">Height of the tested packing area</param>
            <returns>
              Index of the anchor the rectangle is to be placed at or -1 if the rectangle
              does not fit in the packing area anymore.
            </returns>
        </member>
        <member name="M:RelhaxModpack.Atlases.Packing.ArevaloRectanglePacker.FindFirstFreeAnchor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Locates the first free anchor at which the rectangle fits</summary>
            <param name="rectangleWidth">Width of the rectangle to be placed</param>
            <param name="rectangleHeight">Height of the rectangle to be placed</param>
            <param name="testedPackingAreaWidth">Total width of the packing area</param>
            <param name="testedPackingAreaHeight">Total height of the packing area</param>
            <returns>The index of the first free anchor or -1 if none is found</returns>
        </member>
        <member name="M:RelhaxModpack.Atlases.Packing.ArevaloRectanglePacker.IsFree(System.Drawing.Rectangle@,System.Int32,System.Int32)">
            <summary>
              Determines whether the rectangle can be placed in the packing area
              at its current location.
            </summary>
            <param name="rectangle">Rectangle whose position to check</param>
            <param name="testedPackingAreaWidth">Total width of the packing area</param>
            <param name="testedPackingAreaHeight">Total height of the packing area</param>
            <returns>True if the rectangle can be placed at its current position</returns>
        </member>
        <member name="M:RelhaxModpack.Atlases.Packing.ArevaloRectanglePacker.InsertAnchor(System.Drawing.Point)">
            <summary>Inserts a new anchor point into the anchor list</summary>
            <param name="anchor">Anchor point that will be inserted</param>
            <remarks>
              This method tries to keep the anchor list ordered by ranking the anchors
              depending on the distance from the top left corner in the packing area.
            </remarks>
        </member>
        <member name="T:RelhaxModpack.Atlases.Packing.ImagePacker">
            <summary>
            Handles packing a list of small bitmap objects into one large bitmap object 
            </summary>
        </member>
        <member name="M:RelhaxModpack.Atlases.Packing.ImagePacker.PackImage(System.Collections.Generic.IEnumerable{RelhaxModpack.Texture},System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.String,System.Drawing.Bitmap@,System.Collections.Generic.Dictionary{System.String,System.Drawing.Rectangle}@)">
            <summary>
            Packs a collection of images into a single image.
            </summary>
            <param name="imageFiles">The list of Textures of the images to be combined.</param>
            <param name="requirePowerOfTwo">Whether or not the output image must have a power of two size.</param>
            <param name="requireSquareImage">Whether or not the output image must be a square.</param>
            <param name="fastImagePacker">Accept the first successful image packing.</param>
            <param name="maximumWidth">The maximum width of the output image.</param>
            <param name="maximumHeight">The maximum height of the output image.</param>
            <param name="imagePadding">The amount of blank space to insert in between individual images.</param>
            <param name="atlasImageName">The name of the Atlas image. Used for logging and can be null.</param>
            <param name="outputImage">The resulting output image.</param>
            <param name="outputMap">The resulting output map of placement rectangles for the images.</param>
            <returns>0 if the packing was successful, error code otherwise.</returns>
        </member>
        <member name="T:RelhaxModpack.Atlases.Packing.OutOfSpaceException">
            <summary>Insufficient space left in packing area to contain a given object</summary>
            <remarks>
              An exception being sent to you from deep space. Erm, no, wait, it's an exception
              that occurs when a packing algorithm runs out of space and is unable to fit
              the object you tried to pack into the remaining packing area.
            </remarks>
        </member>
        <member name="M:RelhaxModpack.Atlases.Packing.OutOfSpaceException.#ctor(System.String)">
            <summary>Initializes the exception with an error message</summary>
            <param name="message">Error message describing the cause of the exception</param>
        </member>
        <member name="T:RelhaxModpack.Atlases.Packing.RectanglePacker">
            <summary>Base class for rectangle packing algorithms</summary>
            <remarks>
              <para>
                By uniting all rectangle packers under this common base class, you can
                easily switch between different algorithms to find the most efficient or
                performant one for a given job.
              </para>
              <para>
                An almost exhaustive list of packing algorithms can be found here:
                http://www.csc.liv.ac.uk/~epa/surveyhtml.html
              </para>
            </remarks>
        </member>
        <member name="P:RelhaxModpack.Atlases.Packing.RectanglePacker.PackingAreaWidth">
            <summary>Maximum width the packing area is allowed to have</summary>
        </member>
        <member name="P:RelhaxModpack.Atlases.Packing.RectanglePacker.PackingAreaHeight">
            <summary>Maximum height the packing area is allowed to have</summary>
        </member>
        <member name="M:RelhaxModpack.Atlases.Packing.RectanglePacker.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new rectangle packer</summary>
            <param name="packingAreaWidth">Width of the packing area</param>
            <param name="packingAreaHeight">Height of the packing area</param>
        </member>
        <member name="M:RelhaxModpack.Atlases.Packing.RectanglePacker.Pack(System.Int32,System.Int32)">
            <summary>Allocates space for a rectangle in the packing area</summary>
            <param name="rectangleWidth">Width of the rectangle to allocate</param>
            <param name="rectangleHeight">Height of the rectangle to allocate</param>
            <returns>The location at which the rectangle has been placed</returns>
        </member>
        <member name="M:RelhaxModpack.Atlases.Packing.RectanglePacker.TryPack(System.Int32,System.Int32,System.Drawing.Point@)">
            <summary>Tries to allocate space for a rectangle in the packing area</summary>
            <param name="rectangleWidth">Width of the rectangle to allocate</param>
            <param name="rectangleHeight">Height of the rectangle to allocate</param>
            <param name="placement">Output parameter receiving the rectangle's placement</param>
            <returns>True if space for the rectangle could be allocated</returns>
        </member>
        <member name="T:RelhaxModpack.Atlases.IRelhaxUnmanagedLibrary">
            <summary>
            Represents an interface that all unmanaged libraries in the Modpack use. Allows for one method of testing.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Atlases.IRelhaxUnmanagedLibrary.EmbeddedFilename">
            <summary>
            Gets the name of the embedded zip file containing the dll, 32 or 64 bit version.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Atlases.IRelhaxUnmanagedLibrary.ExtractedFilename">
            <summary>
            Gets the name of the dll file inside the embedded zip file, 32 or 64 bit version.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Atlases.IRelhaxUnmanagedLibrary.Filepath">
            <summary>
            Gets the absolute path to the dll file.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Atlases.IRelhaxUnmanagedLibrary.IsExtracted">
            <summary>
            Determines if the file is extracted to the Filepath property location.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Atlases.IRelhaxUnmanagedLibrary.IsLoaded">
            <summary>
            Determines if the library is loaded into memory.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Atlases.IRelhaxUnmanagedLibrary.Load">
            <summary>
            Attempts to load the library using the Filepath property.
            </summary>
            <returns>True if the library load was successful.</returns>
        </member>
        <member name="M:RelhaxModpack.Atlases.IRelhaxUnmanagedLibrary.Unload">
            <summary>
            Attempts to unload the library.
            </summary>
            <returns>True if the library was unloaded, false otherwise.</returns>
        </member>
        <member name="M:RelhaxModpack.Atlases.IRelhaxUnmanagedLibrary.Extract">
            <summary>
            Extracts the embedded compressed library to the location in the Filepath property.
            </summary>
        </member>
        <member name="T:RelhaxModpack.Atlases.Atlas">
            <summary>
            A class that serves as a xml representation of atlas creation instructions.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Atlases.Atlas.AtlasXmlSearchPath">
            <summary>
            For atlas instruction files, the xpath to return a list of all atlas instruction xml elements.
            </summary>
            <remarks>As of the time of this writing, all instructions are now stored inside the database and are no longer separate xml files in the package zip files.</remarks>
        </member>
        <member name="M:RelhaxModpack.Atlases.Atlas.#ctor">
            <summary>
            Create an instance of the Atlas class.
            </summary>
            <seealso cref="T:RelhaxModpack.Database.PackageExtractInstruction"/>
        </member>
        <member name="M:RelhaxModpack.Atlases.Atlas.#ctor(RelhaxModpack.Atlases.Atlas)">
            <summary>
            Create an instance of the Atlas class, copying values from the given atlas instruction.
            </summary>
            <param name="atlasToCopy">The atlas instruction object to copy.</param>
            <seealso cref="M:RelhaxModpack.Atlases.Atlas.Copy(RelhaxModpack.Atlases.Atlas)"/>
        </member>
        <member name="M:RelhaxModpack.Atlases.Atlas.Copy(RelhaxModpack.Atlases.Atlas)">
            <summary>
            Create an instance of the Atlas class, copying values from the given atlas instruction.
            </summary>
            <param name="atlasToCopy">The atlas instruction object to copy.</param>
            <returns>A new atlas file with all copied values.</returns>
            <seealso cref="M:RelhaxModpack.Atlases.Atlas.#ctor(RelhaxModpack.Atlases.Atlas)"/>
        </member>
        <member name="P:RelhaxModpack.Atlases.Atlas.RootObjectPath">
            <summary>
            The xpath to use to get a list of xml element objects that represent each instruction to serialize.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Atlases.Atlas.PropertiesToSerialize">
            <summary>
            Defines a list of properties in the class to be serialized into xml elements.
            </summary>
            <returns>A list of string property names.</returns>
            <remarks>Xml elements may always exist, but they may have empty inner text values.</remarks>
        </member>
        <member name="M:RelhaxModpack.Atlases.Atlas.GetXmlDatabasePropertiesV1Dot0">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.0 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Atlases.Atlas.GetXmlDatabasePropertiesV1Dot1">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.1 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Atlases.Atlas.GetXmlDatabasePropertiesV1Dot2">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.2 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="P:RelhaxModpack.Atlases.Atlas.AtlasFile">
            <summary>
            File name of the atlas image file to extract from inside the game's install directory.
            </summary>
            <remarks>
            If loading from an xml instructions file, this is loaded from the xml file.
            If the Pkg value is given, this is a location in a package zip file, else it is a file location in the game's install directory.
            </remarks>
        </member>
        <member name="P:RelhaxModpack.Atlases.Atlas.MapFile">
            <summary>
            File name of the atlas map file to extract from the game's install directory.
            </summary>
            <remarks>
            If loading from an xml instructions file, this is loaded from the xml file.
            If the Pkg value is given, this is a location in a package zip file, else it is a file location in the game's install directory.
            </remarks>
        </member>
        <member name="P:RelhaxModpack.Atlases.Atlas.AtlasSaveDirectory">
            <summary>
            Path to place the generated atlas image file and xml map, relative to the game's install directory.
            </summary>
            <remarks>If loading from an xml instructions file, this is loaded from the xml file.</remarks>
        </member>
        <member name="P:RelhaxModpack.Atlases.Atlas.AtlasWidth">
            <summary>
            Width of the new atlases file. 0 = get from original atlas file.
            </summary>
            <remarks>If loading from an xml instructions file, this is loaded from the xml file.</remarks>
        </member>
        <member name="P:RelhaxModpack.Atlases.Atlas.AtlasHeight">
            <summary>
            Height of the new atlases file. 0 = get from original atlas file.
            </summary>
            <remarks>If loading from an xml instructions file, this is loaded from the xml file.</remarks>
        </member>
        <member name="P:RelhaxModpack.Atlases.Atlas.Padding">
            <summary>
            Padding of the new atlases file (amount of pixels as a border between each image)
            </summary>
            <remarks>If loading from an xml instructions file, this is loaded from the xml file.</remarks>
        </member>
        <member name="P:RelhaxModpack.Atlases.Atlas.PowOf2">
            <summary>
            Creating an atlas file only with log base 2 numbers (16, 32, 64, etc).
            </summary>
            <remarks>If loading from an xml instructions file, this is loaded from the xml file.</remarks>
        </member>
        <member name="P:RelhaxModpack.Atlases.Atlas.Square">
            <summary>
            Creating an atlas file only in a square (same width and height of atlas).
            </summary>
            <remarks>If loading from an xml instructions file, this is loaded from the xml file.</remarks>
        </member>
        <member name="P:RelhaxModpack.Atlases.Atlas.FastImagePacker">
            <summary>
            Allow the packer to accept first successful image optimization layout (placement).
            </summary>
            <remarks>If loading from an xml instructions file, this is loaded from the xml file.</remarks>
        </member>
        <member name="P:RelhaxModpack.Atlases.Atlas.ImageFolders">
            <summary>
            List of folders that could contain images to replace original images found in the game's atlas file.
            </summary>
            <remarks>If loading from an xml instructions file, this is loaded from the xml file.</remarks>
        </member>
        <member name="P:RelhaxModpack.Atlases.Atlas.TextureList">
            <summary>
            The list of texture objects in each atlas.
            </summary>
            <remarks>This is *not* loaded from the xml file and is used internally</remarks>
        </member>
        <member name="P:RelhaxModpack.Atlases.Atlas.TempAtlasImageFilePath">
            <summary>
            The file path where the original atlas image file will be extracted/copied to, relative to the application's temporary directory.
            </summary>
            <remarks>This is *not* loaded from the xml file and is used internally</remarks>
            <seealso cref="F:RelhaxModpack.Common.ApplicationConstants.RelhaxTempFolderPath"/>
        </member>
        <member name="P:RelhaxModpack.Atlases.Atlas.TempAtlasMapFilePath">
            <summary>
            The file path where the original atlas map file will be extracted/copied to, relative to the application's temporary directory.
            </summary>
            <remarks>This is *not* loaded from the xml file and is used internally</remarks>
            <seealso cref="F:RelhaxModpack.Common.ApplicationConstants.RelhaxTempFolderPath"/>
        </member>
        <member name="P:RelhaxModpack.Atlases.Atlas.AtlasImageFilePath">
            <summary>
            The file path where the created atlas image file will be placed.
            </summary>
            <remarks>
            This is *not* loaded from the xml file and is used internally.
            This is created by combining the AtlasSaveDirectory and AtlasFile properties.
            </remarks>
            <seealso cref="P:RelhaxModpack.Atlases.Atlas.AtlasSaveDirectory"/>
            <seealso cref="P:RelhaxModpack.Atlases.Atlas.AtlasFile"/>
        </member>
        <member name="P:RelhaxModpack.Atlases.Atlas.AtlasMapFilePath">
            <summary>
            The file path where the created map file will be placed.
            </summary>
            <remarks>
            This is *not* loaded from the xml file and is used internally.
            This is created by combining the AtlasSaveDirectory and AtlasFile properties.
            </remarks>
        </member>
        <member name="M:RelhaxModpack.Atlases.Atlas.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>The atlas file name, or "(empty)", if no atlas name is given.</returns>
        </member>
        <member name="P:RelhaxModpack.Atlases.Atlas.DumpInfoToLog">
            <summary>
            Gets a log formatted string for debugging containing key object name and values.
            </summary>
            <remarks>If debug output is enabled for the log file during an installation, then each instruction will have it's DumpInfoToLog property called.</remarks>
        </member>
        <member name="M:RelhaxModpack.Atlases.Atlas.InstructionsEqual(RelhaxModpack.Installer.Instruction)">
            <summary>
            Compares two instructions to determine if their values are equal.
            </summary>
            <param name="instructionToCompare">The instruction to compare against.</param>
            <returns>True if the compared values are equal, false otherwise.</returns>
        </member>
        <member name="F:RelhaxModpack.Automation.AutomationMacro.MacroReplaceRegex">
            <summary>
            The regex string used for macro analysis and replacement
            </summary>
        </member>
        <member name="T:RelhaxModpack.Automation.AutomationSequence">
            <summary>
            An AutomationSequence class is a container to store a list of Automation tasks that pertain to a package.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Automation.AutomationSequencer.BranchesURL">
            <summary>
            The API URL to return a json format document of the current branches in the automation repository
            </summary>
        </member>
        <member name="M:RelhaxModpack.Automation.AutomationSequencer.LoadBranchesListAsync">
            <summary>
            Load the list of branches from github
            </summary>
            <returns>A task of the asynchronous operation</returns>
        </member>
        <member name="M:RelhaxModpack.Automation.Tasks.AutomationTask.ValidateCommandTrue(System.Boolean,System.String)">
            <summary>
            "true" version means that the test being true is "bad"
            </summary>
            <param name="test"></param>
            <param name="formattedString"></param>
            <returns></returns>
        </member>
        <member name="M:RelhaxModpack.Automation.Tasks.AutomationTask.ValidateCommandFalse(System.Boolean,System.String)">
            <summary>
            "false" version means that the test being false is "bad"
            </summary>
            <param name="test"></param>
            <param name="formattedString"></param>
            <returns></returns>
        </member>
        <member name="M:RelhaxModpack.Automation.Tasks.AutomationTask.ProcessTaskResultTrue(System.Boolean,System.String)">
            <summary>
            "true" version means that the test being true is "bad"
            </summary>
            <param name="test"></param>
            <param name="formattedString"></param>
            <returns></returns>
        </member>
        <member name="M:RelhaxModpack.Automation.Tasks.AutomationTask.ProcessTaskResultFalse(System.Boolean,System.String)">
            <summary>
            "false" version means that the test being false is "bad"
            </summary>
            <param name="test"></param>
            <param name="formattedString"></param>
            <returns></returns>
        </member>
        <member name="T:RelhaxModpack.Automation.Tasks.IDownloadTask">
            <summary>
            A task that implements this interface implies that it will always have a destination location for the resultant file
            </summary>
        </member>
        <member name="T:RelhaxModpack.Common.ApplicationConstants">
            <summary>
            Contains common fields and properties used throughout the entire application.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.LastSavedConfigFilename">
            <summary>
            The name of the selection file when used in the setting "save last installed selection".
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.EditorLaunchFromMainWindowFilename">
            <summary>
            The file in the application root directory used to unlock the "launch editor" button.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.BetaDatabaseV2RootFilename">
            <summary>
            The filename of the V2 root database document. All category names and filenames, and version info is in this document.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.ApplicationUpdateFileNameZip">
            <summary>
            The filename to download the latest stable or beta application zip file as for the update system.
            </summary>
            <remarks>
            The update system works by downloading the zip file, extracting the executable, and launching it with the same
            command-line arguments that were supplied to this instance.
            </remarks>
            <seealso cref="F:RelhaxModpack.Common.ApplicationConstants.ApplicationUpdateFilenameExe"/>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.ApplicationUpdateFilenameExe">
            <summary>
            The filename to extract the application as when being updated via the update system.
            </summary>
            <seealso cref="F:RelhaxModpack.Common.ApplicationConstants.ApplicationUpdateFileNameZip"/>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.RelicBatchUpdateScript">
            <summary>
            The filename to save the self updater script as.
            </summary>
            <remarks>
            Something something downloading batch files is scary to anti-virus.
            </remarks>
            <seealso cref="F:RelhaxModpack.Common.ApplicationConstants.RelicBatchUpdateScriptServer"/>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.RelicBatchUpdateScriptServer">
            <summary>
            The filename of the self updater script inside the manager zip file.
            </summary>
            <seealso cref="F:RelhaxModpack.Common.ApplicationConstants.RelicBatchUpdateScript"/>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.ApplicationFilenameStable">
            <summary>
            The name of the application executable when compiled with stable distribution.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.ApplicationFilenameBeta">
            <summary>
            The name of the application executable when compiled with beta distribution.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.RelicBatchUpdateScriptOld">
            <summary>
            The old V1 filename to save the self updater script as.
            </summary>
            <remarks>
            This should only be used to check for and delete a possible old file instance from a legacy version of the application.
            </remarks>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.SelectionsXml">
            <summary>
            The root filename of the list of selection files.
            </summary>
            <remarks>
            This file contains the display names and file names of developer selections shown in the "Developer Selections" window.
            </remarks>
            <seealso cref="T:RelhaxModpack.Windows.DeveloperSelectionsViewer"/>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.ModInfoZip">
            <summary>
            The file downloaded upon startup to check for application updates, database versions, supported clients, update scripts, and the default_checked.xml selection file.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.WoT64bitFolder">
            <summary>
            The name of the 64bit folder in the 'World_of_Tanks' directory.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.WoT32bitFolder">
            <summary>
            The name of the 32bit folder in the 'World_of_Tanks' directory.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.ModsDir">
            <summary>
            The name of the 'mods' directory, stored in the root World_of_Tanks folder.
            </summary>
            <remarks>
            The 'new' method for installing mods into the client. It mostly contains configuration data and mod packages, which are zip files with no compression.
            </remarks>
            <seealso cref="F:RelhaxModpack.Common.ApplicationConstants.ResModsDir"/>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.ResModsDir">
            <summary>
            The name of the 'res_mods' directory, stored in the root World_of_Tanks folder.
            </summary>
            <remarks>
            The 'old' method for installing mods into the client. It's for legacy mods that haven't been updated to the package structure. All files are dumped into the folder and loaded as they are, to replace stock files.
            </remarks>
            <seealso cref="F:RelhaxModpack.Common.ApplicationConstants.ModsDir"/>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.WoTVersionXml">
            <summary>
            The name of the xml file in the World_of_Tanks folder used for getting the current client version information.
            </summary>
            <remarks>
            At the time of this writing, the version is stored as something like "". Using string splitting and trimming, the number combination before the # is the same number used for the version dirs in the mods and res_mods folders.
            The xpath to get the version is /version.xml/version.
            </remarks>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.PatchFolderName">
            <summary>
            The name of the installer folder that used to hold all patch instruction files in for processing.
            </summary>
            <remarks>
            The installer used to create this folder to write, order and process patches that would be inside the package zip files. Now, the information is stored in the database.
            </remarks>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.ShortcutFolderName">
            <summary>
            The name of the installer folder that used to hold all shortcut instruction files in for processing.
            </summary>
            <remarks>
            The installer used to create this folder to write and process shortcut creation instructions for processing. Now, the information is stored in the database.
            </remarks>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.XmlUnpackFolderName">
            <summary>
            The name of the installer folder that used to hold xml unpack instruction files in for processing.
            </summary>
            <remarks>
            The installer used to create this folder to write and process xml unpack instructions for processing. Now, the information is stored in the database.
            </remarks>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.AtlasCreationFoldername">
            <summary>
            The name of the installer folder that used to hold atlas creation instruction files in for processing.
            </summary>
            <remarks>
            The installer used to create this folder to write and process atlas creation instructions for processing. Now, the information is stored in the database.
            </remarks>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.FontsToInstallFoldername">
            <summary>
            The name of the installer folder that is used to temporarily extract font files to for installation.
            </summary>
            <remarks>
            The installer uses this folder to list all fonts to install via the application fontReg.exe
            </remarks>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.ReadmeFromZipfileFolderName">
            <summary>
            The name of the temporary install folder that used to hold database manager readme files. The end user does not need this folder
            and will be deleted at the end of the installation.
            </summary>
            <remarks>
            The purpose of this folder has been superseded by the "InternalNotes" field in a package's xml entry.
            </remarks>
            <seealso cref="P:RelhaxModpack.Database.DatabasePackage.InternalNotes"/>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.AutoUpdateZipFolderName">
            <summary>
            The name of the temporary install folder that holds the auto update information of the database editor.
            </summary>
            <remarks>This is legacy and not used. It should be only used to check for and delete from legacy installations.</remarks>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.DefaultCheckedSelectionfile">
            <summary>
            The filename of the selection file used to select default packages upon loading of the package selection list.
            </summary>
            <remarks>When loading from a stable or beta database distrobution (so not test mode), it will auto-check these when loading the package selection list window.</remarks>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.SupportedClients">
            <summary>
            The filename of the xml document inside the manager info archive file containing the list of supported WoT clients and their respective 'online folder' that holds all the zip packages.
            </summary>
            <remarks>
            If the user attempts to install to a version of WoT that isn't supported, it will use the last one listed in the document, assuming that it is the most recent.
            This is also used for export mode to select what version of the WoT client to export an installation for.
            </remarks>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.ManagerVersion">
            <summary>
            The filename of the xml document inside the manager info archive file containing manager version information and the latest supported database tag.
            </summary>
            <remarks>This file is used to determine if the application is out of date.</remarks>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.PmodLog">
            <summary>
            The name of the pmod log file.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.XvmLog">
            <summary>
            The name of the xvm log file.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.PythonLog">
            <summary>
            The name of the WoT python debug log file.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.LogsFolder">
            <summary>
            The name of the logs folder used for WG CEF browser and for storing installer log files.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.DotNetFrameworkLatestDownloadURL">
            <summary>
            URL to get the latest version of the .NET Framework.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.ApplicationStartupPath">
            <summary>
            The Startup root path of the application. Does not include the application name.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.RelhaxDownloadsFolderPath">
            <summary>
            The absolute path of the application zip file and zip database file folder.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.RelhaxDownloadsFolderPathOld">
            <summary>
            The old absolute path of the application zip file and zip database file folder.
            </summary>
            [Obsolete]
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.RelhaxModBackupFolderPath">
            <summary>
            The absolute path of the application mod backup folder.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.RelhaxModBackupFolderPathOld">
            <summary>
            The old absolute path of the application mod backup folder.
            </summary>
            [Obsolete]
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.RelhaxUserSelectionsFolderPath">
            <summary>
            The absolute path of the application user selections folder. Default location.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.RelhaxUserSelectionsFolderPathOld">
            <summary>
            The old absolute path of the application user selections folder. Old Default location.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.RelhaxUserModsFolderPath">
            <summary>
            The absolute path of the application folder where users can place custom mod zip files.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.RelhaxUserModsFolderPathOld">
            <summary>
            The old absolute path of the application folder where users can place custom mod zip files.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.RelhaxTempFolderPath">
            <summary>
            The absolute path of the application temporary folder.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.RelhaxTempFolderPathOld">
            <summary>
            The old absolute path of the application temporary folder.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.RelhaxLibrariesFolderPath">
            <summary>
            The absolute path of the application 3rd party dll references folder. Currently used to hold atlas file libraries.
            </summary>
            <remarks>The atlas creation libraries are extracted to this location to be used to create the map files.</remarks>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.RelhaxLibrariesFolderPathOld">
            <summary>
            The old absolute path of the application 3rd party dll references folder.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.ManagerInfoDatFile">
            <summary>
            The location of the manager info zip file. Contains several xml files with database and client definitions.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.LastInstalledConfigFilepath">
            <summary>
            The absolute path of the selection file used for saving last saved selection (when the setting is enabled and the user presses install).
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.WoT64bitFolderWithSlash">
            <summary>
            The WoT 64bit folder name with the folder separator before it.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.WoT32bitFolderWithSlash">
            <summary>
            The WoT 32bit folder name with the folder separator before it.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.AppDataFolder">
            <summary>
            The location of the WoT app data folder parsed.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.RelhaxSettingsFilepath">
            <summary>
            The absolute path of the V2 settings file used for saving ModpackSettings.
            </summary>
            <seealso cref="T:RelhaxModpack.Settings.ModpackSettings"/>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.RelhaxLogFilepath">
            <summary>
            The absolute path of the Relhax main log file.
            </summary>
            <remarks>A custom feature window (for example, the editor) will have its own log file to use, which enables multiple feature window instances open from the same exe at the same time.</remarks>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.FoldersToCleanup">
            <summary>
            The list of installer folders in the root {WoT} directory to cleanup after an installation.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.MD5HashDatabaseXmlFile">
            <summary>
            The absolute path to the md5 hash zip file download database file.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.FoldersToCheck">
            <summary>
            Array of all Modpack created folders in the application directory.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.BigmodsDatabaseRootEscaped">
            <summary>
            The escaped constant URL of the stable database on the server, escaped with the 'dbVersion' macro.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.StartAddressMirrorUsaDefault">
            <summary>
            The default download mirror located in Texas USA, escaped with the 'onlineFolder' macro.
            </summary>
            <remarks>'onlineFolder' is a 3 digit number representing the major release version of WoT e.g. 1.7.0.</remarks>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.StartAddressMirrorDe">
            <summary>
            The download mirror located in Germany.
            </summary>
            <remarks>'onlineFolder' is a 3 digit number representing the major release version of WoT e.g. 1.7.0.</remarks>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.DownloadMirrors">
            <summary>
            A read-only list of all download mirrors in this application.
            </summary>
            <remarks>The order of this list matters as the index is used to store the user choice.</remarks>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.BetaDatabaseV2FolderURLEscaped">
            <summary>
            The URL of the V2 beta database root folder, escaped with the 'branch' macro.
            </summary>
            <remarks>'branch' is a name of a github branch on the RelhaxModpackDatabase repo.</remarks>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.BetaDatabaseBranchesURL">
            <summary>
            The API URL to return a json format document of the current branches in the repository.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.ManagerInfoURLBigmods">
            <summary>
            The URL of the V2 manager info zip file.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.ApplicationUpdateURL">
            <summary>
            The URL to the location of the latest stable version of the application as a zip file.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.ApplicationBetaUpdateURL">
            <summary>
            The URL to the location of the latest beta version of the application as a zip file.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.SelectionsRoot">
            <summary>
            The root URL of the V2 selection files location.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.ApplicationNotesStableUrl">
            <summary>
            The URL path of the latest application stable release notes.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.ApplicationNotesBetaUrl">
            <summary>
            The URL path of the latest application beta release notes.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.DatabaseNotesUrl">
            <summary>
            The URL path of the latest V2 database release notes.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.DatabaseMetadataXpath">
            <summary>
            The root of the xpath string used to get metadata information from the database.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.DatabaseOnlineFolderXpath">
            <summary>
            The xpath string to get the onlineFolder attribute from the document root.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.DatabaseClientVersionXpath">
            <summary>
            The xpath string to get the database version info attribute from the document root.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.DatabaseDocumentVersionXpath">
            <summary>
            The xpath string used in the database xml for specifying the version of the document.
            </summary>
            <remarks>
            Document versioning allows for structural changes not just for the document (how to load it), but also for how to load it in software.
            It enables the specification of code for loading and saving of specific versions of the document.
            </remarks>
            <seealso cref="F:RelhaxModpack.Common.ApplicationConstants.DatabaseSchemaVersionXpath"/>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.DatabaseSchemaVersionXpath">
            <summary>
            The xpath string used in the database xml for specifying the serialization format of components.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.ConfigFileVersion2V0">
            <summary>
            The old V2 selection file format for saving the user's selection preferences.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.ConfigFileVersion3V0">
            <summary>
            The latest selection file format for saving the user's selection preferences.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.WoTProcessName">
            <summary>
            The name of the WoT process used for detecting if an instance of the client running.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.WoTVersionXmlXpath">
            <summary>
            The xpath to the version information used by the modpack to determine the WoT client version.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.ApplicationVersion">
            <summary>
            The current distribution version of the application.
            Alpha should NEVER be built for public distribution unless direct testing!
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.LogSpacingLineup">
            <summary>
            The amount so space characters to line up a continued log entry without the date/time.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.MaximumDisplayScale">
            <summary>
            The maximum amount that the application will be allowed to scale. 300%.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.MinimumDisplayScale">
            <summary>
            The default amount that the application will be scaled to. 100%.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.NumberUIDCharacters">
            <summary>
            The number of characters that make up a package UID entry.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.UIDCharacters">
            <summary>
            The array of character options that are used for generating a package UID entry.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.NumLogicalProcesors">
            <summary>
            The number of logical processors (threads) detected on the system. Used to make "n" installation threads for faster extraction.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.ApplicationConstants.MinimumDotNetFrameworkVersionRequired">
            <summary>
            The minimum release value of the user's installed .NET framework to use the modpack.
            </summary>
            <remarks>It varies for OS. For example:
            On Windows 10 May 2019 Update and Windows 10 November 2019 Update: 528040.
            On Windows 10 May 2020 Update: 528372.
            On all other Windows operating systems(including other Windows 10 operating systems): 528049.
            See: https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/how-to-determine-which-versions-are-installed </remarks>
        </member>
        <member name="T:RelhaxModpack.Common.DownloadManager">
            <summary>
            The DownloadManager class provides an implementation to calculate a file's md5 hash as it downloads and compare it at the end to ensure a complete download.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.DownloadManager.BYTE_CHUNKS">
            <summary>
            The maximum size of data to receive for each read/write operation.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Common.DownloadManager.Hash">
            <summary>
            The Md5 hash output result.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Common.DownloadManager.RetryCount">
            <summary>
            The number of times that a failed download should be retried.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Common.DownloadManager.UrlBase">
            <summary>
            The url path to the download location. Typically, this is the folder path on the server up to the file itself to download.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Common.DownloadManager.DownloadLocationBase">
            <summary>
            The location to download the file to. Typically, this is a folder path on a disk up to the file itself.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Common.DownloadManager.Progress">
            <summary>
            A progress implementation for reporting progress operations back to a waiting thread.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Common.DownloadManager.CancellationToken">
            <summary>
            A cancellation token to allow for user cancellation of the async operation.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Common.DownloadManager.IsDisposed">
            <summary>
            Gets if the instance has been disposed.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.DownloadManager.ManualResetEvent">
            <summary>
            A synchronization mechanism that can allow a thread to wait until a download operation is completed.
            </summary>
            <remarks>This is used in the install engine, where a thread needs to wait until a download is completed before it can be extracted.</remarks>
        </member>
        <member name="M:RelhaxModpack.Common.DownloadManager.#ctor">
            <summary>
            Create an instance of the DownloadManager class.
            </summary>
            <remarks>A WebClient and Md5DatabaseManager are automatically created when this class is instanced.</remarks>
        </member>
        <member name="M:RelhaxModpack.Common.DownloadManager.DownloadPackagesAsync(System.Collections.Generic.List{RelhaxModpack.Database.DatabasePackage})">
            <summary>
            Start a download operation for a list of packages.
            </summary>
            <param name="packagesToDownload">The list of packages to download.</param>
            <returns>The task object that holds the return data and context.</returns>
        </member>
        <member name="M:RelhaxModpack.Common.DownloadManager.Dispose">
            <summary>
            Releases all unmanaged resources used by the instance.
            </summary>
        </member>
        <member name="T:RelhaxModpack.Common.FileCopier">
            <summary>
            The FileCopier class provides an implementation to, as you may have guessed, copy files. Provides progress and cancellation to a user thread.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.FileCopier.BYTE_CHUNKS">
            <summary>
            The maximum size of data to receive for each read/write operation.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Common.FileCopier.Reporter">
            <summary>
            A progress implementation for reporting progress operations back to a waiting thread.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Common.FileCopier.CancellationToken">
            <summary>
            A cancellation token to allow for user cancellation of the async operation.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Common.FileCopier.SourceFile">
            <summary>
            The complete path to the file to copy.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Common.FileCopier.DestinationFile">
            <summary>
            The complete path of the destination file to copy to.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.FileCopier.progress">
            <summary>
            The object to use to report progress with to the user thread.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Common.FileCopier.#ctor">
            <summary>
            Create an instance of the FileCopier class.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Common.FileCopier.#ctor(RelhaxModpack.UI.RelhaxProgress)">
            <summary>
            Create an instance of the FileCopier class.
            </summary>
            <param name="progress">The object to use to report progress to the user thread.</param>
        </member>
        <member name="M:RelhaxModpack.Common.FileCopier.#ctor(System.String,System.String)">
            <summary>
            Create an instance of the FilelCopier class.
            </summary>
            <param name="sourceFile">The path to file to copy from.</param>
            <param name="destinationFile">The path to the file to write to.</param>
        </member>
        <member name="M:RelhaxModpack.Common.FileCopier.CopyFileAsync(System.String,System.String)">
            <summary>
            Start a copy operation.
            </summary>
            <param name="sourceFile">The path to file to copy from.</param>
            <param name="destinationFile">The path to the file to write to.</param>
            <returns>True if the file copy succeeded, false otherwise.</returns>
        </member>
        <member name="M:RelhaxModpack.Common.FileCopier.CopyFileAsync">
            <summary>
            Start a copy operation.
            </summary>
            <returns>True if the file copy succeeded, false otherwise.</returns>
        </member>
        <member name="T:RelhaxModpack.Common.IComponentWithID">
            <summary>
            An interface to allow a unique identifier for the given component. Used mostly for identifying a broken or incorrectly parsed component from a log statement
            </summary>
        </member>
        <member name="P:RelhaxModpack.Common.IComponentWithID.ComponentInternalName">
            <summary>
            The internal ID of the component. Can be anything used to identify it.
            </summary>
            <remarks>When a databasePackage, the internal packageName. When category, the category name.</remarks>
        </member>
        <member name="T:RelhaxModpack.Common.Md5DatabaseManager">
            <summary>
            Provides a method to write and read file hash values for files in a folder, and determining if a local copy of a file is up to date based on what the server hash and/or file time is.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.Md5DatabaseManager.DatabaseRootNodeName">
            <summary>
            The root node in the xml database file.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.Md5DatabaseManager.DatabaseFileNodeName">
            <summary>
            The name of the xml element for each file entry in the database file.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.Md5DatabaseManager.DatabaseFilenameAttributeName">
            <summary>
            The attribute of each file entry xml element to store the name of the file.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.Md5DatabaseManager.DatabaseFiletimeAttributeName">
            <summary>
            The attribute of each file entry xml element to store the time of the file.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Common.Md5DatabaseManager.DatabaseFiletimeMd5Name">
            <summary>
            The attribute of each file entry xml element to store the md5 hash of the file.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Common.Md5DatabaseManager.DatabaseLoaded">
            <summary>
            Gets if the xml document has been loaded into the database manager.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Common.Md5DatabaseManager.LoadMd5Database(System.String)">
            <summary>
            Loads the xml document into the database manager.
            </summary>
            <param name="fileLocation">The location of the xml database file to load.</param>
        </member>
        <member name="M:RelhaxModpack.Common.Md5DatabaseManager.SaveMd5Database(System.String)">
            <summary>
            Saves the xml document to a path on disk.
            </summary>
            <param name="fileLocation">The location to save the xml database to.</param>
        </member>
        <member name="M:RelhaxModpack.Common.Md5DatabaseManager.FileEntryUpToDate(System.String,System.DateTime)">
            <summary>
            Determines if a file entry in the database is up to date by checking the md5 hash and given file time.
            </summary>
            <param name="packageFilename">The name of the file to look up.</param>
            <param name="fileTime">The last modified time of the file entry to look up.</param>
            <returns>True if the file entry's name, time and md5 match, false otherwise.</returns>
        </member>
        <member name="M:RelhaxModpack.Common.Md5DatabaseManager.FileEntryUpToDate(System.String,System.String)">
            <summary>
            Determines if a file entry in the database is up to date by checking the md5 hash and given file time.
            </summary>
            <param name="packageFilename">The name of the file to look up.</param>
            <param name="fileTimeString">The last modified time of the file entry to look up.</param>
            <returns>True if the file entry's name, time and md5 match, false otherwise.</returns>
        </member>
        <member name="M:RelhaxModpack.Common.Md5DatabaseManager.GetMd5HashFileEntry(System.String,System.DateTime)">
            <summary>
            Gets an md5 hash entry of a file based on a given file name and time.
            </summary>
            <param name="packageFilename">The name of the file to look up.</param>
            <param name="fileTime">The last modified time of the file entry to look up.</param>
            <returns>The hash of the file if it is found, or null if the entry isn't found.</returns>
        </member>
        <member name="M:RelhaxModpack.Common.Md5DatabaseManager.GetMd5HashFileEntry(System.String,System.String)">
            <summary>
            Gets an md5 hash entry of a file based on a given file name and time.
            </summary>
            <param name="packageFilename">The name of the file to look up.</param>
            <param name="fileTimeString">The last modified time of the file entry to look up.</param>
            <returns>The hash of the file if it is found, or null if the entry isn't found.</returns>
        </member>
        <member name="M:RelhaxModpack.Common.Md5DatabaseManager.UpdateFileEntry(System.String,System.DateTime,System.String)">
            <summary>
            Updates a file entry in the database with the given filename, time and md5 value. If the entry is not found, then it is added.
            </summary>
            <param name="packageFilename">The name of the file to enter.</param>
            <param name="fileTime">The time of the file to enter.</param>
            <param name="md5Value">The md5 hash of the file to enter.</param>
        </member>
        <member name="M:RelhaxModpack.Common.Md5DatabaseManager.UpdateFileEntry(System.String,System.String,System.String)">
            <summary>
            Updates a file entry in the database with the given filename, time and md5 value. If the entry is not found, then it is added.
            </summary>
            <param name="packageFilename">The name of the file to enter.</param>
            <param name="fileTimeString">The time of the file to enter.</param>
            <param name="md5Value">The md5 hash of the file to enter.</param>
        </member>
        <member name="M:RelhaxModpack.Common.Md5DatabaseManager.DeleteFileEntry(System.String)">
            <summary>
            Deletes a file entry for the database by file name, if the entry exists.
            </summary>
            <param name="packageFilename">The name of the file to lookup.</param>
        </member>
        <member name="M:RelhaxModpack.Common.Md5DatabaseManager.FileEntryWithoutTimeExists(System.String)">
            <summary>
            Checks if a file entry exists for a given file name.
            </summary>
            <param name="packageFilename">The name of the file to lookup.</param>
            <returns>true if the file entry exists in the database, false if it does not.</returns>
        </member>
        <member name="T:RelhaxModpack.Database.Category">
            <summary>
            a category is what makes up each tab in the mod selection display window. It holds the first level of list of SelectablePackages.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.Category.#ctor">
            <summary>
            Create an instance of the Category class.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.Category.#ctor(RelhaxModpack.Database.Category)">
            <summary>
            Create an instance of the Category class, copying the name and OffsetInstallGroups properties.
            </summary>
            <param name="categoryToCopy">The category to copy from.</param>
        </member>
        <member name="M:RelhaxModpack.Database.Category.PropertiesForSerializationAttributes">
            <summary>
            Defines a list of properties in the class to be serialized into xml attributes.
            </summary>
            <returns>A list of string property names.</returns>
            <remarks>Xml attributes will always be written, xml elements are optional.</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.Category.PropertiesForSerializationElements">
            <summary>
            Defines a list of properties in the class to be serialized into xml elements.
            </summary>
            <returns>A list of string property names.</returns>
            <remarks>Xml attributes will always be written, xml elements are optional.</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.Category.GetXmlDatabasePropertiesV1Dot0">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.0 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Database.Category.GetXmlDatabasePropertiesV1Dot1">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.1 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Database.Category.GetXmlDatabasePropertiesV1Dot2">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.2 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Database.Category.OnParsingPropertyToXmlElement(RelhaxModpack.Database.XmlDatabaseProperty,System.Xml.Linq.XElement,System.String,System.Reflection.PropertyInfo,System.Object,System.Xml.Linq.XElement,System.Boolean@)">
            <summary>
            A hook from XmlComponent for when an xml entry is being loaded. This can be used to handle custom or one-off conversions to manage any legacy serialization issues (for example, old database formats never had a wrapping "Packages" element).
            </summary>
            <param name="thisPropertyXml">The xml database property entry being loaded. For example, the "Packages" list entry.</param>
            <param name="propertyXmlElement">The xml element entry of the current object being loaded. For example, the "Category" element.</param>
            <param name="schemaVersion">The version of the schema currently being loaded.</param>
            <param name="propertyInfo">The info meta-data about the property in the class object to be written to. For example, the "Packages" list property.</param>
            <param name="valueOfProperty">The current value of the property in the object. For example, this would be the list object of the "Packages" list property.</param>
            <param name="elementOfProperty">The xml element entry of the property being loaded. For example, the "Packages" xml entry.</param>
            <param name="continueProcessingProperty">A flag used back in XmlComponent if the current xml element to load (like "Packages") should continue to be loaded by XmlComponent.</param>
            <seealso cref="M:RelhaxModpack.Database.XmlComponent.OnParsingPropertyToXmlElement(RelhaxModpack.Database.XmlDatabaseProperty,System.Xml.Linq.XElement,System.String,System.Reflection.PropertyInfo,System.Object,System.Xml.Linq.XElement,System.Boolean@)"/>
        </member>
        <member name="M:RelhaxModpack.Database.Category.OnParsingPropertyFromXmlElement(RelhaxModpack.Database.XmlDatabaseProperty,System.Xml.Linq.XElement,System.String,System.Reflection.PropertyInfo,System.Object,System.Xml.Linq.XElement,System.Boolean@)">
            <summary>
            A hook from XmlComponent for when an xml entry is being saved. This can be used to handle custom or one-off conversions to manage any legacy serialization issues (for example, old database formats never had a wrapping "Packages" element).
            </summary>
            <param name="thisPropertyXml">The xml database property entry being saved. For example, the "Packages" list entry.</param>
            <param name="propertyXmlElement">The xml element entry of the current object being saved. For example, the "Category" element.</param>
            <param name="schemaVersion">The version of the schema currently being saved.</param>
            <param name="propertyInfo">The info meta-data about the property in the class object to be read from. For example, the "Packages" list property.</param>
            <param name="valueOfProperty">The current value of the property in the object. For example, this would be the list object of the "Packages" list property.</param>
            <param name="elementOfProperty">The xml element entry of the property being saved. For example, the "Packages" xml entry.</param>
            <param name="continueProcessingProperty">A flag used back in XmlComponent if the current xml element to save (like "Packages") should continue to be saved by XmlComponent.</param>
            <seealso cref="M:RelhaxModpack.Database.XmlComponent.OnParsingPropertyFromXmlElement(RelhaxModpack.Database.XmlDatabaseProperty,System.Xml.Linq.XElement,System.String,System.Reflection.PropertyInfo,System.Object,System.Xml.Linq.XElement,System.Boolean@)"/>
        </member>
        <member name="M:RelhaxModpack.Database.Category.OnFinishedLoadingFromXml(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            A hook from XmlComponent for when an xml entry is finished being loaded into an object.
            </summary>
            <param name="propertyElement">The xml element of the entry being loaded. For example, the "Category" xml element.</param>
            <param name="loadStatus">The status of the loading of this object, if all properties of it were previously loaded correctly.</param>
        </member>
        <member name="P:RelhaxModpack.Database.Category.Name">
            <summary>
            The category name displayed to the user in the selection list.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.Category.XmlFilename">
            <summary>
            The xml filename of this category. Used in database structure V2.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.Category.OffsetInstallGroups">
            <summary>
            Get or set if the installGroup property of all packages in this category will be offset by each package's level in the package tree.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.Category.Packages">
            <summary>
            The list of packages contained in this category.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.Category.ComponentInternalName">
            <summary>
            When a databasePackage, the internal packageName. When category, the category name.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.Category.Dependencies">
            <summary>
            List of dependencies of this category (Any package selected in this category needs these dependencies).
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.Category.TabPage">
            <summary>
            The TabItem object reference.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.Category.CategoryHeader">
            <summary>
            The package created at selection list building that represents the header of this category.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.Category.DatabaseManager">
            <summary>
            The DatabaseManager object being used to load and save the category entry.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.Category.CompareCatagories(RelhaxModpack.Database.Category,RelhaxModpack.Database.Category)">
            <summary>
            Sorts the Categories by their name property. Currently not implemented.
            </summary>
            <param name="x">The first Category to compare.</param>
            <param name="y">The second Category to compare.</param>
            <returns>1 if y is later in the alphabet, 0 if equal, -1 else.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.Category.ToString">
            <summary>
            Output the object to a string representation.
            </summary>
            <returns>The name of the category.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.Category.GetFlatPackageList">
            <summary>
            Returns a single depth (flat) list of packages in the category. Leveling is preserved (a sub-package will be directly below the parent in the list).
            </summary>
            <returns>The list of packages.</returns>
            <remarks>Does not include getting the Category's SelectablePackage header.</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.Category.AnyPackagesChecked">
            <summary>
            Check if any packages in this category are selected for install.
            </summary>
            <returns>Try if any package is selected, false otherwise.</returns>
            <remarks>Does not include checking the Category's SelectablePackage header.</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.Category.IsAnyPackageCheckedEnabled">
            <summary>
            Returns true if at least one package is enabled and checked from the first level of packages in the category.
            </summary>
            <returns>True if any packages in this category are checked and enabled, false otherwise.</returns>
            <remarks>Does not include checking the Category's SelectablePackage header.</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.Category.IsAnyPackageCheckedEnabledVisible">
            <summary>
            Returns true if at least one package is enabled and checked and visible from the first level of packages in the category.
            </summary>
            <returns>True if at least one package is checked, enabled and visible, false otherwise.</returns>
            <remarks>Does not include checking the Category's SelectablePackage header.</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.Category.ProcessPackages">
            <summary>
            Performs reference linking code for each entry in the database, so that using Parent properties (for example) can allow traversal around the package tree of this category.
            </summary>
            <remarks>As of this writing, it links the Parent, TopParent, ParentCategory and sets the level of the package in the tree.</remarks>
        </member>
        <member name="T:RelhaxModpack.Database.ConflictingPackage">
            <summary>
            Represents an entry for a package that conflicts with another package in the database where both options cannot be selected at the same time.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.ConflictingPackage.#ctor">
            <summary>
            Create an instance of the ConflictingPackage class.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.ConflictingPackage.#ctor(RelhaxModpack.Database.ConflictingPackage)">
            <summary>
            Create an instance of the ConflictingPackage class based on values from a given entry to copy.
            </summary>
            <param name="conflictingPackageToCopy">The entry to copy.</param>
        </member>
        <member name="M:RelhaxModpack.Database.ConflictingPackage.GetXmlDatabasePropertiesV1Dot0">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.0 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Database.ConflictingPackage.GetXmlDatabasePropertiesV1Dot1">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.1 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Database.ConflictingPackage.GetXmlDatabasePropertiesV1Dot2">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.2 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="P:RelhaxModpack.Database.ConflictingPackage.ConflictingPackageName">
            <summary>
            The name of the package that conflicts with this package.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.ConflictingPackage.ConflictingPackageUID">
            <summary>
            The UID of the package that conflicts with this package.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.ConflictingPackage.ConflictingSelectablePackage">
            <summary>
            The reference to the package that conflicts with this package.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.ConflictingPackage.ParentSelectablePackage">
            <summary>
            The reference package that this conflicting package entry belongs to.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.ConflictingPackage.IsEqual(RelhaxModpack.Database.ConflictingPackage)">
            <summary>
            Determines if two entries are equal by comparing the package name and UID values.
            </summary>
            <param name="packageToCompare">The package to compare.</param>
            <returns>True if the entires contain the same values, false otherwise.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.ConflictingPackage.ToString">
            <summary>
            Provide a string representation of the entry.
            </summary>
            <returns>The string representation of the entry, containing the entry's conflicting package name and UID</returns>
        </member>
        <member name="T:RelhaxModpack.Database.CoreDatabaseComponent">
            <summary>
            A CoreDatabaseComponent class is an XmlComponent to be saved/loaded to/from xml, but contains a list of maintainers of that component.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.CoreDatabaseComponent.#ctor">
            <summary>
            Create an instance of the CoreDatabaseComponent class.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.CoreDatabaseComponent.#ctor(RelhaxModpack.Database.CoreDatabaseComponent)">
            <summary>
            Create an instance of the CoreDatabaseComponent class with copying a list of maintainers from a component to copy.
            </summary>
            <param name="componentToCopy">The component to copy.</param>
        </member>
        <member name="P:RelhaxModpack.Database.CoreDatabaseComponent.EditorTreeViewItem">
            <summary>
            Reference for the UI element of this package in the database editor.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.CoreDatabaseComponent.Maintainers">
            <summary>
            A list of database managers who are known to maintain this component.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.CoreDatabaseComponent.ComponentInternalName">
            <summary>
            The internal ID of the component. Can be anything used to identify it.
            </summary>
            <remarks>When a databasePackage, the internal packageName. When category, the category name.</remarks>
        </member>
        <member name="P:RelhaxModpack.Database.CoreDatabaseComponent.MaintainersList">
            <summary>
            Returns a list database managers who are known to maintain this component.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.CoreDatabaseComponent.GetXmlDatabasePropertiesV1Dot0">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.0 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Database.CoreDatabaseComponent.GetXmlDatabasePropertiesV1Dot1">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.1 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="T:RelhaxModpack.Database.DatabaseManager">
            <summary>
            Provides methods for loading and saving xml component objects to and from xml database files.
            </summary>
        </member>
        <member name="T:RelhaxModpack.Database.DatabaseManager.LogicTracking">
            <summary>
            A structure used to keep a reference of a component and a dependency that it calls.
            </summary>
            <remarks>This is used to determine if any packages call any dependencies who's packageName does not exist in the database.</remarks>
        </member>
        <member name="F:RelhaxModpack.Database.DatabaseManager.LogicTracking.ComponentWithDependencies">
            <summary>
            The database component what has dependencies.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.DatabaseManager.LogicTracking.DatabaseLogic">
            <summary>
            The called dependency from the component.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.DatabaseManager.DocumentVersion1V1">
            <summary>
            The document version 1.1 string.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.DatabaseManager.DocumentVersion1V2">
            <summary>
            The document version 1.2 string.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.DatabaseManager.LatestSchema">
            <summary>
            The current latest used schema.
            </summary>
            <seealso cref="F:RelhaxModpack.Database.XmlComponent.SchemaV1Dot2"/>
        </member>
        <member name="F:RelhaxModpack.Database.DatabaseManager.WoTClientVersionXmlString">
            <summary>
            The xml attribute used in the root database xml file to determine which version of WoT this database is compatible with.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.DatabaseManager.WoTOnlineFolderVersionXmlString">
            <summary>
            The xml attribute used in the root database xml file to determine which online FTP folder this database should use.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.DatabaseManager.DocumentVersionXmlString">
            <summary>
            The xml attribute used in the root database xml file to determine what version format the database is in.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.DatabaseManager.SchemaVersionXmlString">
            <summary>
            The xml attribute used in the root database xml file to determine what schema version the database is using for each xml component.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseManager.ParsedCategoryList">
            <summary>
            The list of categories.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseManager.GlobalDependencies">
            <summary>
            The list of global dependencies.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseManager.Dependencies">
            <summary>
            The list of dependencies.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseManager.DatabaseRootXmlDocument">
            <summary>
            The reference to the loaded root document object of the database.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseManager.WoTClientVersion">
            <summary>
            The parsed version of the WoT client that this database is compatible with.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseManager.WoTOnlineFolderVersion">
            <summary>
            The parsed name of the online folder that this database should use for downloading packages.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseManager.DocumentVersion">
            <summary>
            The parsed version format of the database xml.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseManager.SchemaVersion">
            <summary>
            The parsed schema version format of the database xml.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseManager.ModpackSettings">
            <summary>
            A reference to the modpack settings window configuration class.
            </summary>
            <remarks>This is used for determining the version of the database to load (stable or beta), and if beta, the branch to use for loading it.</remarks>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseManager.CommandLineSettings">
            <summary>
            A reference to the command line settings configuration class.
            </summary>
            <remarks>This is used for determining if the database to be loaded is in 'test mode'.</remarks>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseManager.ManagerInfoZipfile">
            <summary>
            The manager info data file downloaded on application startup.
            </summary>
            <seealso cref="F:RelhaxModpack.Common.ApplicationConstants.ManagerVersion"/>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseManager.DatabaseDistroToLoad">
            <summary>
            The version of the database to load, or has been loaded.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseManager.DependenciesToInstall">
            <summary>
            The list of dependencies calculated to install.
            </summary>
            <remarks>This is done by running the method to calculate what packages need to be installed.</remarks>
            <seealso cref="M:RelhaxModpack.Database.DatabaseManager.CalculateInstallLists(System.Boolean,System.Boolean)"/>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseManager.PackagesToInstall">
            <summary>
            The list of packages to install, including dependencies and user selected packages, and excluding packages if a minimal install is set from ModpackSettings.
            </summary>
            <remarks>This is done by running the method to calculate what packages need to be installed.</remarks>
            <seealso cref="M:RelhaxModpack.Database.DatabaseManager.CalculateInstallLists(System.Boolean,System.Boolean)"/>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseManager.SelectablePackagesToInstall">
            <summary>
            The list of user selected packages to install, including dependencies and user selected packages, and excluding packages if a minimal install is set from ModpackSettings.
            </summary>
            <remarks>This is done by running the method to calculate what packages need to be installed.</remarks>
            <seealso cref="M:RelhaxModpack.Database.DatabaseManager.CalculateInstallLists(System.Boolean,System.Boolean)"/>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseManager.PackagesToInstallWithZipFile">
            <summary>
            The list of packages to install that have a zip file.
            </summary>
            <remarks>This is done by running the method to calculate what packages need to be installed.</remarks>
            <seealso cref="M:RelhaxModpack.Database.DatabaseManager.CalculateInstallLists(System.Boolean,System.Boolean)"/>
            <seealso cref="P:RelhaxModpack.Database.DatabaseManager.PackagesToInstall"/>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseManager.SelectablePackagesToInstallWithZipFiles">
            <summary>
            The list of user selected packages to install that have a zip file.
            </summary>
            <remarks>This is done by running the method to calculate what packages need to be installed.</remarks>
            <seealso cref="M:RelhaxModpack.Database.DatabaseManager.CalculateInstallLists(System.Boolean,System.Boolean)"/>
            <seealso cref="P:RelhaxModpack.Database.DatabaseManager.SelectablePackagesToInstall"/>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseManager.PackagesToDownload">
            <summary>
            The list of packages to install that have zip files, that need to be downloaded.
            </summary>
            <remarks>This is done by running the method to calculate what packages need to be installed.</remarks>
            <seealso cref="M:RelhaxModpack.Database.DatabaseManager.CalculateInstallLists(System.Boolean,System.Boolean)"/>
            <seealso cref="P:RelhaxModpack.Database.DatabaseManager.PackagesToInstallWithZipFile"/>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseManager.PackagesToInstallByInstallGroup">
            <summary>
            The list of packages to install (that is, those with zip files), sorted into their install groups.
            </summary>
            <remarks>This is done by running the method to calculate what packages need to be installed.</remarks>
            <seealso cref="M:RelhaxModpack.Database.DatabaseManager.CalculateInstallLists(System.Boolean,System.Boolean)"/>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseManager.PackagesToInstallWithTriggers">
            <summary>
            The list of packages to install that have triggers.
            </summary>
            <remarks>This is done by running the method to calculate what packages need to be installed.</remarks>
            <seealso cref="M:RelhaxModpack.Database.DatabaseManager.CalculateInstallLists(System.Boolean,System.Boolean)"/>
            <seealso cref="P:RelhaxModpack.Database.DatabaseManager.PackagesToInstall"/>
            <seealso cref="T:RelhaxModpack.Database.Trigger"/>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseManager.PatchesToInstall">
            <summary>
            The list of patch operations to perform after package extraction and xml unpack operations.
            </summary>
            <remarks>This is done by running the method to calculate what packages need to be installed.</remarks>
            <seealso cref="M:RelhaxModpack.Database.DatabaseManager.CalculateInstallLists(System.Boolean,System.Boolean)"/>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseManager.XmlUnpacksToInstall">
            <summary>
            The list of xml unpack operations to perform after package extraction.
            </summary>
            <remarks>This is done by running the method to calculate what packages need to be installed.</remarks>
            <seealso cref="M:RelhaxModpack.Database.DatabaseManager.CalculateInstallLists(System.Boolean,System.Boolean)"/>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseManager.ShortcutsToInstall">
            <summary>
            The list of shortcuts creation operations to perform after package extraction.
            </summary>
            <remarks>This is done by running the method to calculate what packages need to be installed.</remarks>
            <seealso cref="M:RelhaxModpack.Database.DatabaseManager.CalculateInstallLists(System.Boolean,System.Boolean)"/>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseManager.AtlasesToInstall">
            <summary>
            The list of atlas creation operations to perform after package extraction.
            </summary>
            <remarks>This is done by running the method to calculate what packages need to be installed.</remarks>
            <seealso cref="M:RelhaxModpack.Database.DatabaseManager.CalculateInstallLists(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Creates an instance of the DatabaseManager class.
            </summary>
            <param name="modpackSettings">The reference to the modpack settings class.</param>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.#ctor(RelhaxModpack.Settings.ModpackSettings,RelhaxModpack.Settings.CommandLineSettings)">
            <summary>
            Creates an instance of the DatabaseManager class.
            </summary>
            <param name="modpackSettings">The reference to the modpack settings class.</param>
            <param name="commandLineSettings">The reference to the command line settings class.</param>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.#ctor">
            <summary>
            Creates an instance of the DatabaseManager class.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.LoadDatabaseAsync(RelhaxModpack.Utilities.Enums.DatabaseVersions,System.String,System.String)">
            <summary>
            Loads and parses a database into the DatabaseManager.
            </summary>
            <param name="databaseDistroToLoad">The distribution (stable, beta or test) of the database to load.</param>
            <param name="locationToLoadFrom">The path (url or folder) to load the database files from.</param>
            <param name="betaDatabaseBranch">If loading the beta database, the github branch to use for loading the database.</param>
            <returns>The status enumeration code of the operation.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.LoadDatabaseTestAsync(System.String)">
            <summary>
            Load a test database from the specified location, including the root filename.
            </summary>
            <param name="locationToLoadFrom">The path to the root xml file.</param>
            <returns>The status enumeration code of the operation.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.LoadDatabaseDistroAsync(RelhaxModpack.Utilities.Enums.DatabaseVersions)">
            <summary>
            Loads and parses a database into the DatabaseManager.
            </summary>
            <param name="databaseDistroToLoad">The distribution (stable, beta or test) of the database to load.</param>
            <returns>The status enumeration code of the operation.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.LoadDatabaseAsync">
            <summary>
            Loads and parses a database into the DatabaseManager
            </summary>
            <returns>The status enumeration code of the operation.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.LoadDatabaseStableSpecificClientAsync(System.String)">
            <summary>
            Loads and parses the stable database of a specific client version to the DatabaseManager.
            </summary>
            <param name="clientVersion">The version of the client to try to load. This should correspond to the value of what is in the desired database's version.</param>
            <returns>Returns DatabaseLoadFailCode.None</returns>
            <remarks>This is used in the ModpackToolbox for getting a list of all packages that correspond to a WoT version. It shouldn't be used for any generic purpose.</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.LoadDatabaseCustomFromStringsAsync(System.Xml.XmlDocument,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Loads and parses a database from xml strings into the DatabaseManager.
            </summary>
            <param name="rootDocument">The xml document object of the root document.</param>
            <param name="globalDependenciesXml">The xml string of the global dependencies document.</param>
            <param name="dependneciesXml">The xml string of the dependencies document.</param>
            <param name="categoriesXml">The list of xml strings of each category document</param>
            <returns>Returns DatabaseLoadFailCode.None</returns>
            <remarks>This is used in the ModpackToolbox for a developer purpose. It shouldn't be used for any generic purpose.</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.LoadWoTVersionInfoFromXmlDocumentAsync(RelhaxModpack.Utilities.Enums.DatabaseVersions,System.String)">
            <summary>
            Loads the database root document into the DatabaseManager
            </summary>
            <param name="databaseDistroToLoad">The distribution of the database to load.</param>
            <param name="locationToLoadFrom">If loading a test distribution, the location to the xml file.</param>
            <returns></returns>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.GetBetaDatabase1V1FilesListAsync">
            <summary>
            Gets the direct download links to each beta database xml file from a given branch specified in the ModpackSettings instance.
            </summary>
            <returns>A list of direct download links for each xml document of the beta database.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.ParseDatabase1V1FromFiles">
            <summary>
            Parse a database into the version 1.1 format from files on the disk.
            </summary>
            <returns>True if the parsing was successful, false otherwise.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.ParseDatabase1V1FromStrings(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{RelhaxModpack.Database.DatabasePackage},System.Collections.Generic.List{RelhaxModpack.Database.Dependency},System.Collections.Generic.List{RelhaxModpack.Database.Category})">
            <summary>
            Parse a database into version 1.1 from string representations of the Xml files.
            </summary>
            <param name="globalDependenciesXml">The Xml string of the global dependencies document.</param>
            <param name="dependneciesXml">The Xml string of the dependencies document.</param>
            <param name="categoriesXml">The list of Xml strings of the categories document.</param>
            <param name="globalDependencies">The list of global dependencies.</param>
            <param name="dependencies">The list of dependencies.</param>
            <param name="parsedCategoryList">The list of categories.</param>
            <returns>True if the parsing was successful, false otherwise.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.ParseDatabase(System.Xml.Linq.XDocument,System.Collections.Generic.List{RelhaxModpack.Database.DatabasePackage},System.Xml.Linq.XDocument,System.Collections.Generic.List{RelhaxModpack.Database.Dependency},System.Collections.Generic.List{System.Xml.Linq.XDocument},System.Collections.Generic.List{RelhaxModpack.Database.Category})">
            <summary>
            Parse a database into the DatabaseManager from the xml object files.
            </summary>
            <param name="globalDependenciesDoc">The xml object of global dependencies.</param>
            <param name="globalDependenciesList">The list of global dependencies to populate.</param>
            <param name="dependenciesDoc">The xml object of dependencies.</param>
            <param name="dependenciesList">The list of dependencies to populate.</param>
            <param name="categoryDocuments">The list of xml objects of each category.</param>
            <param name="parsedCategoryList">The list of categories to populate.</param>
            <returns>True if the parsing was successful, false otherwise.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.ParseDatabase1V2(System.Xml.Linq.XDocument,System.Collections.Generic.List{RelhaxModpack.Database.DatabasePackage},System.Xml.Linq.XDocument,System.Collections.Generic.List{RelhaxModpack.Database.Dependency},System.Collections.Generic.List{System.Xml.Linq.XDocument},System.Collections.Generic.List{RelhaxModpack.Database.Category})">
            <summary>
            Parse a database of format v1.2 into the DatabaseManager from the xml object files.
            </summary>
            <param name="globalDependenciesDoc">The xml object of global dependencies.</param>
            <param name="globalDependenciesList">The list of global dependencies to populate.</param>
            <param name="dependenciesDoc">The xml object of dependencies.</param>
            <param name="dependenciesList">The list of dependencies to populate.</param>
            <param name="categoryDocuments">The list of xml objects of each category.</param>
            <param name="parsedCategoryList">The list of categories to populate.</param>
            <returns>True if the parsing was successful, false otherwise.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.ParseDatabase1V1(System.Xml.Linq.XDocument,System.Collections.Generic.List{RelhaxModpack.Database.DatabasePackage},System.Xml.Linq.XDocument,System.Collections.Generic.List{RelhaxModpack.Database.Dependency},System.Collections.Generic.List{System.Xml.Linq.XDocument},System.Collections.Generic.List{RelhaxModpack.Database.Category})">
            <summary>
            Parse a database of format 1.1 into the DatabaseManager from the xml object files.
            </summary>
            <param name="globalDependenciesDoc">The xml object of global dependencies.</param>
            <param name="globalDependenciesList">The list of global dependencies to populate.</param>
            <param name="dependenciesDoc">The xml object of dependencies.</param>
            <param name="dependenciesList">The list of dependencies to populate.</param>
            <param name="categoryDocuments">The list of xml objects of each category.</param>
            <param name="parsedCategoryList">The list of categories to populate.</param>
            <returns>True if the parsing was successful, false otherwise.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.SaveDatabase(System.String,System.String,System.String)">
            <summary>
            Save the database to a given location on disk.
            </summary>
            <param name="saveLocation">The folder path to save the xml documents to.</param>
            <param name="documentVersion">The version format of the xml documents to save.</param>
            <param name="schemaVersion">The schema version format (if the document version supports it) of the properties of xml documents to save.</param>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.SaveDatabase(System.String,System.String)">
            <summary>
            Save the database to an Xml version format.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.SaveDatabase1V1(System.String)">
            <summary>
            Save the database to the Xml version 1.1 standard.
            </summary>
            <param name="savePath">The path to save all the xml files to.</param>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.SaveDatabaseList1V1(System.Collections.IList,System.Xml.XmlElement,System.Xml.XmlDocument,System.String)">
            <summary>
            Saves a list of packages to a document using the document format version 1.1
            </summary>
            <param name="packagesToSave">The generic list of packages to save</param>
            <param name="documentRootElement">The element that will be holding this list</param>
            <param name="docToMakeElementsFrom">The document needed to create xml elements and attributes</param>
            <param name="nameToSaveElementsBy">The string name to save the xml element name by</param>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.ProcessDatabase">
            <summary>
            Perform any database post-load processing (such as performing reference linking of packages, conflicts, etc).
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.ProcessDependencyPackageRefrences">
            <summary>
            Links the databasePackage objects with dependencies objects to have those objects link references to the parent and the dependency object
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.CalculateInstallLists(System.Boolean,System.Boolean)">
            <summary>
            Run calculations on package list components to determine what packages, features, etc get included for an installation operation.
            </summary>
            <param name="suppressFrequentDependencyCalculationMessages">If true, will suppress some dependency calculation messages.</param>
            <param name="showDependencyCalculationErrorMessages">If true, will show some dependency error calculation messages (some are always shown).</param>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.CalculateDependencies(System.Boolean,System.Boolean)">
            <summary>
            Calculates what dependencies should be installed given a user's selection (and other recursive dependency calculations).
            </summary>
            <param name="suppressSomeLogging">If true, will suppress some dependency calculation messages.</param>
            <param name="showDependencyCalculationErrorMessages">If true, will show some dependency error calculation messages (some are always shown).</param>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.CreateOrderedInstallList(System.Collections.Generic.List{RelhaxModpack.Database.DatabasePackage})">
            <summary>
            Creates an array of DatabasePackage lists sorted by Installation groups i.e. list in array index 0 is packages of install group 0
            </summary>
            <param name="packagesToInstallWithZipfile"></param>
            <returns>The array of DatabasePackage lists</returns>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.GetSelectablePackageByUid(System.String)">
            <summary>
            Find a SelectablePackage in the list of loaded packages by searching for its UID.
            </summary>
            <param name="targetUid">The UID of the package to find.</param>
            <returns>The package if found, otherwise null.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.GetSelectablePackageByPackageName(System.String)">
            <summary>
            Find a SelectablePackage in the list of loaded packages by searching for its package name (PackageName, not user display name).
            </summary>
            <param name="targetPackageName">The package name of the package to find.</param>
            <returns>The package if found, otherwise null.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.GetMaxInstallGroupNumber">
            <summary>
            Gets the maximum InstallGroup number from a list of Packages
            </summary>
            <returns>The maximum InstallGroup number</returns>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.GetMaxInstallGroupNumberWithOffset">
            <summary>
            Gets the maximum InstallGroup number from a list of Packages factoring in the offset that a category may apply to it
            </summary>
            <returns>The maximum InstallGroup number</returns>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.GetMaxPatchGroupNumber">
            <summary>
            Gets the maximum PatchGroup number from a list of Packages
            </summary>
            <returns>The maximum PatchGroup number</returns>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.GetFlatList">
            <summary>
            Returns a flat list of the given recursive lists, in the order that the parameters are stated
            </summary>
            <returns>The flat list</returns>
            <remarks>In the case of Categories, the flat list has the sub-level packages added at the level of the parent</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.GetFlatSelectablePackageList">
            <summary>
            Returns a flat list of the given recursive lists, in the order that the parameters are stated
            </summary>
            <returns>The flat list</returns>
            <remarks>In the case of Categories, the flat list has the sub-level packages added at the level of the parent</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.CheckForDuplicateUIDsPackageList">
            <summary>
            Checks for any duplicate UID entries inside the provided lists
            </summary>
            <returns>A list of packages with duplicate UIDs, or an empty list if no duplicates</returns>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.CheckForDuplicateUIDsStringsList">
            <summary>
            Checks for any duplicate UID entries inside the provided lists
            </summary>
            <returns>A list of duplicate UIDs, or an empty list if no duplicates</returns>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.CheckForDuplicatePackageNamesStringsList">
            <summary>
            Checks for any duplicate PackageName entries inside the provided lists
            </summary>
            <returns>A list of duplicate packages, or an empty list if no duplicates</returns>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.IsDuplicatePackageName(System.String)">
            <summary>
            Checks if a packageName exists within a list of packages
            </summary>
            <param name="nameToCheck">The PackageName parameter to check</param>
            <returns>True if the nameToCheck exists in the list, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.SortDatabase">
            <summary>
            Sorts the packages inside each Category object
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseManager.SortDatabase(System.Collections.Generic.List{RelhaxModpack.Database.SelectablePackage},System.Boolean)">
            <summary>
            Sorts a list of packages
            </summary>
            <param name="packages">The list of packages to sort</param>
            <param name="recursive">If the list should recursively sort</param>
        </member>
        <member name="T:RelhaxModpack.Database.IDatabaseComponent">
            <summary>
            An interface for all components in the database.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.IDatabaseComponent.EditorTreeViewItem">
            <summary>
            Reference for the UI element of this package in the database editor.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.IDatabaseComponent.Maintainers">
            <summary>
            A list of database managers who are known to maintain this component.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.IDatabaseComponent.MaintainersList">
            <summary>
            Returns a list of database managers who are known to maintain this component.
            </summary>
        </member>
        <member name="T:RelhaxModpack.Database.Logic">
            <summary>
            An enumerated representation of "and" and "or" logic
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.Logic.AND">
            <summary>
            A logical AND
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.Logic.OR">
            <summary>
            A logical OR
            </summary>
        </member>
        <member name="T:RelhaxModpack.Database.DatabaseLogic">
            <summary>
            Used for database dependency calculation. Determines what dependent packages use the package that this object is attached to
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseLogic.#ctor">
            <summary>
            Create an instance of the DatabaseLogic class.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseLogic.#ctor(RelhaxModpack.Database.DatabaseLogic)">
            <summary>
            Create an instance of the DatabaseLogic class, copying values from a given DatabaseLogic object.
            </summary>
            <param name="databaseLogicToCopy">The DatabaseLogic object to copy values from</param>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseLogic.PropertiesForSerializationAttributes">
            <summary>
            Defines a list of properties in the class to be serialized into xml attributes.
            </summary>
            <returns>A list of string property names.</returns>
            <remarks>Xml attributes will always be written, xml elements are optional.</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseLogic.PropertiesForSerializationElements">
            <summary>
            Defines a list of properties in the class to be serialized into xml elements.
            </summary>
            <returns>A list of string property names.</returns>
            <remarks>Xml attributes will always be written, xml elements are optional.</remarks>
        </member>
        <member name="F:RelhaxModpack.Database.DatabaseLogic.XmlElementName">
            <summary>
            For some xml schema versions, the actual name of the xml entry used for this property.
            </summary>
            <remarks>A DatabaseLogic is used for dependency calculation to determine based on what the user selected for packages to install, what dependent packages also need to be installed.</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseLogic.GetXmlDatabasePropertiesV1Dot0">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.0 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseLogic.GetXmlDatabasePropertiesV1Dot1">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.1 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseLogic.GetXmlDatabasePropertiesV1Dot2">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.2 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseLogic.GetXmlElementName(System.String)">
            <summary>
            Gets the xml element name that should be used for saving and loading this component, based on the schema to load/save.
            </summary>
            <param name="schemaVersion">The schema version to load/save.</param>
            <returns>The name of the xml element to use for saving/loading this component.</returns>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseLogic.PackageName">
            <summary>
            The name of the package that *this* package is dependent on.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseLogic.PackageUID">
            <summary>
            The UID of the package that *this* package is dependent on.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseLogic.WillBeInstalled">
            <summary>
            Flag to determine if this package will be installed.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseLogic.NotFlag">
            <summary>
            Flag for negating the "AND" and "OR" logic (Creates "NAND" and "NOR") of how to install the attach object.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseLogic.Logic">
            <summary>
            The logic type to use for this package definition.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseLogic.RefrenceLinked">
            <summary>
            A flag for dependency calculation for when the application has linked the dependency reference
            </summary>
            <remarks>During dependency calculation, the application will 'link' the referenced dependencies in a package
            to the referenced dependency. This allows for the application to process dependency calculation logic in a dynamic
            AND and OR system. Having the flag can help to determine if a reference does not exist</remarks>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseLogic.ParentPackageRefrence">
            <summary>
            Gets or sets a reference to the parent package this dependency came from.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabaseLogic.DependencyPackageRefrence">
            <summary>
            Gets or sets a reference to the dependency object that this databaseLogic object links to.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseLogic.ToString">
            <summary>
            String representation of the object.
            </summary>
            <returns>The name of the package this object attaches to.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.DatabaseLogic.Copy(RelhaxModpack.Database.DatabaseLogic)">
            <summary>
            Create a copy of the given DatabaseLogic object.
            </summary>
            <param name="databaseLogicToCopy">The object to copy.</param>
            <returns>A new DatabaseLogic object with the same values.</returns>
        </member>
        <member name="T:RelhaxModpack.Database.DatabasePackage">
            <summary>
            A database component is the base class (that can be instanced) for all other packages. It represents an object in the database..
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.DatabasePackage.#ctor">
            <summary>
            Creates an instance of the DatabasePackage class
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.DatabasePackage.#ctor(RelhaxModpack.Database.DatabasePackage)">
            <summary>
            Creates an instance of the DatabasePackage class based on the provided DatabasePackage.
            </summary>
            <param name="packageToCopy">The package to copy the information from.</param>
        </member>
        <member name="M:RelhaxModpack.Database.DatabasePackage.InitComponent">
            <summary>
            Called from the constructor, handles any object initialization that should be done.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.DatabasePackage.PropertiesForSerializationAttributes">
            <summary>
            Defines a list of properties in the class to be serialized into xml attributes.
            </summary>
            <returns>A list of string property names.</returns>
            <remarks>Xml attributes will always be written, xml elements are optional.</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.DatabasePackage.PropertiesForSerializationElements">
            <summary>
            Defines a list of properties in the class to be serialized into xml elements.
            </summary>
            <returns>A list of string property names.</returns>
            <remarks>Xml attributes will always be written, xml elements are optional.</remarks>
        </member>
        <member name="F:RelhaxModpack.Database.DatabasePackage.XmlElementName">
            <summary>
            For some xml schema versions, the actual name of the xml entry used for this property.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.DatabasePackage.GetXmlDatabasePropertiesV1Dot0">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.0 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Database.DatabasePackage.GetXmlDatabasePropertiesV1Dot1">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.1 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Database.DatabasePackage.GetXmlDatabasePropertiesV1Dot2">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.2 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Database.DatabasePackage.GetXmlElementName(System.String)">
            <summary>
            Gets the xml element name that should be used for saving and loading this component, based on the schema to load/save.
            </summary>
            <param name="schemaVersion">The schema version to load/save.</param>
            <returns>The name of the xml element to use for saving/loading this component.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.DatabasePackage.OnFinishedLoadingFromXml(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            A hook from XmlComponent for when an xml entry is finished being loaded into an object.
            </summary>
            <param name="propertyElement">The xml element of the entry being loaded. For example, the "DatabasePackage" xml element.</param>
            <param name="loadStatus">The status of the loading of this object, if all properties of it were previously loaded correctly.</param>
        </member>
        <member name="M:RelhaxModpack.Database.DatabasePackage.AttributesToXmlParseSelectionFiles">
            <summary>
            Gets a list of property names that are used for saving/loading the selection V3 file format.
            </summary>
            <returns>The string array of property attributes to save for a v3 selection file.</returns>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.PackageName">
            <summary>
            A unique identifier for each component in the database. No two components will have the same PackageName.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.UID">
            <summary>
            Another non-changing, randomly generated unique 16 character identifier for each component in the database.
            </summary>
            <remarks>These fulfill the originally intended purpose of the PackageName defined back in OMC.
            Once generated, the value should not be modified, and will only be removed when the package is removed.</remarks>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.Version">
            <summary>
            A method to keep track of the version of the package.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.Timestamp">
            <summary>
            Used to determine when the package entry was last modified.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.LastUpdateCheck">
            <summary>
            Used to determine when the last automation or human check for an update was completed.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.Size">
            <summary>
            Size of the zip file.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.ZipFile">
            <summary>
            The zip file to extract (can be empty string).
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.DatabasePackage._Enabled">
            <summary>
            Internal field for Enabled property.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.Enabled">
            <summary>
            Determines if the component is enabled or disabled.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.CRC">
            <summary>
            The crc checksum of the zipfile.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.DownloadFlag">
            <summary>
            Determine at install time if the package needs to be downloaded.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.ReadyForInstall">
            <summary>
            Determine if the mod has been downloaded and is ready for installation.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.LogAtInstall">
            <summary>
            Determine if the files from the package should be logged for un-installation.
            </summary>
            <remarks>Only set this to false if absolutely necessary!</remarks>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.Triggers">
            <summary>
            The list of triggers that this package can start (list of triggers that apply to this package).
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.TriggersList">
            <summary>
            Returns a list of triggers that this component can start.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.DevURL">
            <summary>
            The URL link of where you can view the web page of the package.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.DevURLList">
            <summary>
            Gets an array of dev URLs, separated by the newline character.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.InstallGroup">
            <summary>
            The level at which this package can be installed. It will be installed with other packages of the same install group at the same time.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.InstallGroupWithOffset">
            <summary>
            The level at which this package will be installed, factoring if the category (if SelectablePackage) is set to offset the install group with the package level.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.PatchGroup">
            <summary>
            The level at which the patches for this package can be installed. Patches will be executed with other patches of the same patch group.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.InternalNotes">
            <summary>
            Internal instructions for updating the mod for database managers.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.InternalNotesEscaped">
            <summary>
            An escaped version of the internal notes. Replaces '\n' literal with '\n' special.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.Author">
            <summary>
            The name of the author of the mod/configuration/etc.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.Tags">
            <summary>
            The list of tags that this package contains (like patches, scripts, etc).
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.Deprecated">
            <summary>
            A flag to set for a package that is considered to be outdated or no longer supported or stale.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.MinimalistModeExclude">
            <summary>
            A flag for determining if this package should be excluded from install when minimalist mode is enabled in ModpackSettings.
            </summary>
            <seealso cref="F:RelhaxModpack.Settings.ModpackSettings.MinimalistMode"/>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.Patches">
            <summary>
            Get or set a list of patch instructions to perform after extraction of this package.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.XmlUnpacks">
            <summary>
            Get or set a list of xml unpack instructions to perform after extraction of this package.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.Atlases">
            <summary>
            Get or set a list of atlas creation instructions to perform after extraction of this package.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.Shortcuts">
            <summary>
            Get or set a list of shortcut creation instructions to perform after extraction of this package.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.ComponentInternalName">
            <summary>
            When a databasePackage, the internal packageName. When category, the category name.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.DatabasePackage.ToString">
            <summary>
            String representation of the object.
            </summary>
            <returns>The PackageName of the package.</returns>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.CompletePath">
            <summary>
            Provides a complete tree style path to the package using its UI name, starting with the category.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.CompletePackageNamePath">
            <summary>
            Provides a complete tree style path to the package using its internal packageName, starting with the category.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.DatabasePackage.CompleteUIDPath">
            <summary>
            Provides a complete tree style path to the package using its UID, starting with the category.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.DatabasePackage.UpdateZipfile(System.String)">
            <summary>
            Updates the zip file entry of this package, as well as setting time stamp and md5 values.
            </summary>
            <param name="newZipfile">The new name of the zip file.</param>
            <remarks>When a zip file is updated, it means a file on the FTP server has been created or updated. When that happens, the md5 hash entry and other time stamp information about the package should be updated.</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.DatabasePackage.ToAutomationElement">
            <summary>
            Returns an xml element representation of what this package's entry should be in the automation root xml file.
            </summary>
            <returns>The xml element representation.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.DatabasePackage.GetInstructions(RelhaxModpack.Utilities.Enums.InstructionsType)">
            <summary>
            Returns the list of instructions associated with this package based on the requested instruction enumeration.
            </summary>
            <param name="instructionsType">The type of instructions to return.</param>
            <returns>The list of instructions, or an empty list of none of that type exist.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.DatabasePackage.GetInstructions">
            <summary>
            Returns a list of all instructions associated with this package.
            </summary>
            <returns>The list of instructions, or an empty list if no instructions in this package exist.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.DatabasePackage.ProcessInstructions">
            <summary>
            Add this package reference to each instruction entry.
            </summary>
        </member>
        <member name="T:RelhaxModpack.Database.Dependency">
            <summary>
            Represents a package with logical calculations. A dependency is only installed when a selectable package is checked
            for installation and is dependent on the dependency i.e. 6th sense sound and icon mods require the 6th sense script dependency.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.Dependency.#ctor">
            <summary>
            Create an instance of the Dependency class and over-ride DatabasePackage default values.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.Dependency.#ctor(RelhaxModpack.Database.DatabasePackage,System.Boolean)">
            <summary>
            Create an instance of the Dependency class and over-ride DatabasePackage default values, while using values provided for copy objects.
            </summary>
            <param name="packageToCopyFrom">The package to copy the information from.</param>
            <param name="deep">Set to true to copy list objects, false to use new lists.</param>
        </member>
        <member name="M:RelhaxModpack.Database.Dependency.InitComponent">
            <summary>
            Called from the constructor, handle any object initialization that should be done.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.Dependency.PropertiesForSerializationAttributes">
            <summary>
            Defines a list of properties in the class to be serialized into xml attributes.
            </summary>
            <returns>A list of string property names.</returns>
            <remarks>Xml attributes will always be written, xml elements are optional.</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.Dependency.PropertiesForSerializationElements">
            <summary>
            Defines a list of properties in the class to be serialized into xml elements.
            </summary>
            <returns>A list of string property names.</returns>
            <remarks>Xml attributes will always be written, xml elements are optional.</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.Dependency.GetXmlDatabasePropertiesV1Dot0">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.0 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Database.Dependency.GetXmlDatabasePropertiesV1Dot1">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.1 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="P:RelhaxModpack.Database.Dependency.DatabasePackageLogic">
            <summary>
            List of linked packages that use this dependency at install time.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.Dependency.Dependencies">
            <summary>
            List of dependencies this dependency calls on.
            </summary>
        </member>
        <member name="T:RelhaxModpack.Database.IComponentWithDependencies">
            <summary>
            Provides an interface for Categories and packages to share commonality since they both can have dependencies.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.IComponentWithDependencies.Dependencies">
            <summary>
            The property wrapper of the Dependencies field.
            </summary>
        </member>
        <member name="T:RelhaxModpack.Database.IXmlSerializable">
            <summary>
            Represents an interface that when implemented, will specify which properties of a class
            get serialized into xml attributes and elements.
            </summary>
            <remarks>This is also referenced as "Xml serialization V1".</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.IXmlSerializable.PropertiesForSerializationAttributes">
            <summary>
            Defines a list of properties in the class to be serialized into xml attributes.
            </summary>
            <returns>A list of string property names.</returns>
            <remarks>Xml attributes will always be written, xml elements are optional.</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.IXmlSerializable.PropertiesForSerializationElements">
            <summary>
            Defines a list of properties in the class to be serialized into xml elements.
            </summary>
            <returns>A list of string property names.</returns>
            <remarks>Xml attributes will always be written, xml elements are optional.</remarks>
        </member>
        <member name="T:RelhaxModpack.Database.Media">
            <summary>
            A media object is a preview-able component stored in a list in SelectablePackages.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.Media.#ctor">
            <summary>
            Create an instance of the Media class.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.Media.#ctor(RelhaxModpack.Database.Media)">
            <summary>
            Create an instance of the Media class, by copying values from a given Media object.
            </summary>
            <param name="mediaToCopy">The Media object to copy values from.</param>
        </member>
        <member name="M:RelhaxModpack.Database.Media.PropertiesForSerializationAttributes">
            <summary>
            Defines a list of properties in the class to be serialized into xml attributes.
            </summary>
            <returns>A list of string property names.</returns>
            <remarks>Xml attributes will always be written, xml elements are optional.</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.Media.PropertiesForSerializationElements">
            <summary>
            Defines a list of properties in the class to be serialized into xml elements.
            </summary>
            <returns>A list of string property names.</returns>
            <remarks>Xml attributes will always be written, xml elements are optional.</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.Media.GetXmlDatabasePropertiesV1Dot0">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.0 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Database.Media.GetXmlDatabasePropertiesV1Dot1">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.1 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Database.Media.GetXmlDatabasePropertiesV1Dot2">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.2 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="P:RelhaxModpack.Database.Media.URL">
            <summary>
            For direct link types, the URL to the element or resource.
            </summary>
            <remarks>HTTP and HTTPS links work for this property.</remarks>
        </member>
        <member name="P:RelhaxModpack.Database.Media.MediaType">
            <summary>
            The type of media for the URL to be interpreted as.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.Media.SelectablePackageParent">
            <summary>
            Gets or sets the SelectablePackage parent of the media item.
            </summary>
            <remarks>This is used in the preview window to get the name to display in the title.</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.Media.ToString">
            <summary>
            The string properties of the object.
            </summary>
            <returns>The integer code of the MediaType and the first 80 characters of the URL.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.Media.Copy(RelhaxModpack.Database.Media)">
            <summary>
            Create a copy of the Media object.
            </summary>
            <param name="mediaToCopy">The object to copy.</param>
            <returns>A new Media object with the same values.</returns>
        </member>
        <member name="T:RelhaxModpack.Database.PackageComparerByPackageName">
            <summary>
            Enables comparison of Packages by their PackageName property.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.PackageComparerByPackageName.Equals(RelhaxModpack.Database.DatabasePackage,RelhaxModpack.Database.DatabasePackage)">
            <summary>
            Determines if PackageName of package x is before or after PackageName of Package y.
            </summary>
            <param name="x">The first package.</param>
            <param name="y">The second package.</param>
            <returns>1,0,-1 from string PackageName comparison.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.PackageComparerByPackageName.GetHashCode(RelhaxModpack.Database.DatabasePackage)">
            <summary>
            Returns the hash code of the PackageName of the Package.
            </summary>
            <param name="package">The package to get the hash code.</param>
            <returns>The hash code of the PackageName of the Package.</returns>
        </member>
        <member name="T:RelhaxModpack.Database.PackageComparerByDisplayName">
            <summary>
            Enables comparison of Packages by their Name property
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.PackageComparerByDisplayName.Equals(RelhaxModpack.Database.SelectablePackage,RelhaxModpack.Database.SelectablePackage)">
            <summary>
            Determines if Name of package x is before or after Name of Package y.
            </summary>
            <param name="x">The first package.</param>
            <param name="y">The second package.</param>
            <returns>1,0,-1 from string Name comparison.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.PackageComparerByDisplayName.GetHashCode(RelhaxModpack.Database.SelectablePackage)">
            <summary>
            Returns the hash code of the Name of the Package.
            </summary>
            <param name="package">The package to get the hash code.</param>
            <returns>The hash code of the Name of the Package.</returns>
        </member>
        <member name="T:RelhaxModpack.Database.PackageComparerByUID">
            <summary>
            Enables comparison of Packages by their Unique ID (UID) property.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.PackageComparerByUID.Equals(RelhaxModpack.Database.DatabasePackage,RelhaxModpack.Database.DatabasePackage)">
            <summary>
            Determines if PackageName of package x is before or after PackageName of Package y.
            </summary>
            <param name="x">The first package.</param>
            <param name="y">The second package.</param>
            <returns>1,0,-1 from string PackageName comparison.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.PackageComparerByUID.GetHashCode(RelhaxModpack.Database.DatabasePackage)">
            <summary>
            Returns the hash code of the PackageName of the Package.
            </summary>
            <param name="package">The package to get the hash code.</param>
            <returns>The hash code of the PackageName of the Package.</returns>
        </member>
        <member name="T:RelhaxModpack.Database.PackageExtractInstruction">
            <summary>
            A PackageExtractInstruction is a type of Instruction that requires either extracting a file entry from a zip file or copying a file from one location to another.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.PackageExtractInstruction.#ctor">
            <summary>
            Create an instance of a parent class of PackageExtractInstruction.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.PackageExtractInstruction.#ctor(RelhaxModpack.Database.PackageExtractInstruction)">
            <summary>
            Create an instance of a parent class of PackageExtractInstruction, copying values from a given PackageExtractInstruction.
            </summary>
            <param name="packageExtractInstructionToCopyFrom">The PackageExtractInstruction to copy values from.</param>
        </member>
        <member name="M:RelhaxModpack.Database.PackageExtractInstruction.GetXmlDatabasePropertiesV1Dot0">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.0 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Database.PackageExtractInstruction.GetXmlDatabasePropertiesV1Dot1">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.1 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="P:RelhaxModpack.Database.PackageExtractInstruction.Pkg">
            <summary>
            Complete path to the package file.
            </summary>
            <remarks>This is loaded from the xml file. The package itself is a zip file.</remarks>
        </member>
        <member name="P:RelhaxModpack.Database.PackageExtractInstruction.DirectoryInArchive">
            <summary>
            Path inside the pkg file to the filename to process. If Pkg is empty, this is the path to the atlas and map file.
            </summary>
            <remarks>This is loaded from the xml file.</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.PackageExtractInstruction.InstructionsEqual(RelhaxModpack.Installer.Instruction)">
            <summary>
            Compares two Instruction objects's values to determine if they are equal.
            </summary>
            <param name="instructionToCompare">The instruction to compare against.</param>
            <returns>True if the instructions are equal, false otherwise.</returns>
        </member>
        <member name="P:RelhaxModpack.Database.PackageExtractInstruction.DumpInfoToLog">
            <summary>
            Returns a string representation of the object used for the log file.
            </summary>
        </member>
        <member name="T:RelhaxModpack.Database.PackageTagsList">
            <summary>
            A PackageTagsList class is a child class of List of type PackageTags enumeration. Allows for string representation for database serialization.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.PackageTagsList.#ctor">
            <summary>
            Creates a PackageTagsList object.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.PackageTagsList.#ctor(System.Collections.Generic.List{RelhaxModpack.Utilities.Enums.PackageTags})">
            <summary>
            Creates a PackageTagsList object with the given list of type PackageTags.
            </summary>
            <param name="packageTags">The list with elements to add from.</param>
        </member>
        <member name="M:RelhaxModpack.Database.PackageTagsList.ToString">
            <summary>
            Create a string representation of the enumerations from the list.
            </summary>
            <returns>A comma separated list of the string names of the enumerations.</returns>
        </member>
        <member name="T:RelhaxModpack.Database.PackageTagsListConverter">
            <summary>
            Allows conversion of a string representation of PackageTagsList.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.PackageTagsListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines if this converter can convert the supplied type.
            </summary>
            <param name="context">The container property and descriptor. Can be null if unknown.</param>
            <param name="sourceType">The type of source to convert from.</param>
            <returns>True is the type is of string or can be converted from base, false otherwise.</returns>
            <remarks>See https://www.cyotek.com/blog/creating-a-custom-typeconverter-part-1 </remarks>
        </member>
        <member name="M:RelhaxModpack.Database.PackageTagsListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the string representation of a PackageTagsList to a PackageTagsList.
            </summary>
            <param name="context">The container property and descriptor. Can be null if unknown.</param>
            <param name="culture">The culture to account for when converting, like including the location of where this program is being run.</param>
            <param name="value">The string value of PackageTagsList.</param>
            <returns></returns>
        </member>
        <member name="T:RelhaxModpack.Database.SelectablePackage">
            <summary>
            A SelectablePackage is a package that can be checked by the user for installation during package selection.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.SelectablePackage.#ctor">
            <summary>
            Create an instance of the SelectablePackage class.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.SelectablePackage.#ctor(RelhaxModpack.Database.DatabasePackage,System.Boolean)">
            <summary>
            Create an instance of the SelectablePackage class, while using values provided for copy objects.
            </summary>
            <param name="packageToCopyFrom">The package to copy the information from.</param>
            <param name="deep">Set to true to copy list objects, false to use new lists.</param>
        </member>
        <member name="M:RelhaxModpack.Database.SelectablePackage.InitComponent">
            <summary>
            Called from the constructor, handles any object initialization that should be done.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.SelectablePackage.PropertiesForSerializationAttributes">
            <summary>
            Defines a list of properties in the class to be serialized into xml attributes.
            </summary>
            <returns>A list of string property names.</returns>
            <remarks>Xml attributes will always be written, xml elements are optional.</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.SelectablePackage.PropertiesForSerializationElements">
            <summary>
            Defines a list of properties in the class to be serialized into xml elements.
            </summary>
            <returns>A list of string property names.</returns>
            <remarks>Xml attributes will always be written, xml elements are optional.</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.SelectablePackage.GetXmlDatabasePropertiesV1Dot0">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.0 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Database.SelectablePackage.GetXmlDatabasePropertiesV1Dot1">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.1 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Database.SelectablePackage.GetXmlDatabasePropertiesV1Dot2">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.2 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Database.SelectablePackage.OnFinishedLoadingFromXml(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            A hook from XmlComponent for when an xml entry is finished being loaded into an object.
            </summary>
            <param name="propertyElement">The xml element of the entry being loaded. For example, the "SelectablePackage" xml element.</param>
            <param name="loadStatus">The status of the loading of this object, if all properties of it were previously loaded correctly.</param>
        </member>
        <member name="M:RelhaxModpack.Database.SelectablePackage.OnStartedSavingToXml(System.Xml.Linq.XElement,System.String)">
            <summary>
            A hook from XmlComponent for when an xml entry is started being saved to an xml document object.
            </summary>
            <param name="propertyElement">The xml element of the entry being saved (for example, the "SelectablePackage" element).</param>
            <param name="targetSchemaVersion">The schema version being used to save.</param>
        </member>
        <member name="M:RelhaxModpack.Database.SelectablePackage.AttributesToXmlParseSelectionFiles">
            <summary>
            Defines a list of properties in the class to be serialized into xml attributes for selection files.
            </summary>
            <returns>The base array, with SelectablePackage options concatenated.</returns>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.Name">
            <summary>
            The display name of the package.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.NameFormatted">
            <summary>
            The name of the package with the version macro replaced for use display.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.ParentCategory">
            <summary>
            The Category object reference.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.Type">
            <summary>
            The type of selectable package logic to follow (see SelectionTypes enumeration for options).
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.Parent">
            <summary>
            The reference for the direct parent of this package.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.TopParent">
            <summary>
            The reference for the absolute top of the package tree.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.Visible">
            <summary>
            A flag to determine whether or not the mod should be shown in UI.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.UpdateComment">
            <summary>
            Update comments of the package.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.UpdateCommentEscaped">
            <summary>
            Gets an escaped version of the UpdateComment property, replacing literal '\n' with special character '\n', for example.
            </summary>
            <seealso cref="P:RelhaxModpack.Database.SelectablePackage.UpdateComment"/>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.UpdateCommentFormatted">
            <summary>
            Gets a user display formatted version of the UpdateCommentEscaped property, with a time stamp (if available). If no comment, a translated 'noComment' entry is returned.
            </summary>
            <seealso cref="P:RelhaxModpack.Database.SelectablePackage.UpdateCommentEscaped"/>
            <seealso cref="P:RelhaxModpack.Database.SelectablePackage.UpdateComment"/>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.Description">
            <summary>
            description of the package.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.DescriptionEscaped">
            <summary>
            Gets an escaped version of the Description property, replacing literal '\n' with special character '\n', for example.
            </summary>
            <seealso cref="P:RelhaxModpack.Database.SelectablePackage.Description"/>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.DescriptionFormatted">
            <summary>
            Gets a user display formatted version of the UpdateCommentEscaped property. Additionally could contain an encrypted, controversial or popular entry.
            If no description, a translated 'noDescription' entry is returned.
            </summary>
            <seealso cref="P:RelhaxModpack.Database.SelectablePackage.DescriptionEscaped"/>
            <seealso cref="P:RelhaxModpack.Database.SelectablePackage.Description"/>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.PopularMod">
            <summary>
            Flag to determine if the package is popular.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.GreyAreaMod">
            <summary>
            Flag to determine if the package is of controversial nature.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.ObfuscatedMod">
            <summary>
            Flag to determine if the package is obfuscated/encrypted and can't be checked for viruses or malware.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.FromWGmods">
            <summary>
            Flag to determine if the package is from the official WoT mod portal.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.SortChildPackages">
            <summary>
            Flag to determine any packages of this package should be sorted (by name).
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.FlagForSelectionSave">
            <summary>
            Used as internal flag for if application settings is checked "SaveDisabledModsInSelection". Allows for disabled mods to be saved back to the user's selection.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.SelectablePackage._Checked">
            <summary>
            Field for whether the package is selected to install.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.Checked">
            <summary>
            Property for if the package is selected by the user to install. handles all color change and single_dropdown updating code.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.Enabled">
            <summary>
            Overrides DatabasePackage.Enabled property. Used to toggle if the mod should be selectable and installed in the selection list.
            The override also enables the triggering of the UI components to reflect the user's selection changes.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.Level">
            <summary>
            The level in the database tree where the package resides.
            </summary>
            <remarks>A level of -2 implies that the value has not been set.</remarks>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.UserFiles">
            <summary>
            The list of cache files that should be backed up before wiping the directory.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.Packages">
            <summary>
            The list of child SelectablePackage entries in this instance of SelectablePackages.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.Medias">
            <summary>
            List of media preview items associated with this package, shown in the preview window on right click of component.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.Dependencies">
            <summary>
            A list of packages (from dependencies list) that this package is dependent on in order to be installed.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.ConflictingPackages">
            <summary>
            A list of any packageNames of packages that conflict with this package. A conflict will result the package not being processed.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.ConflictingPackagesNew">
            <summary>
            A list of entries that specify packages by UID, PackageName, and if loaded, the package references themselves, that conflict with this package. Packages on this list cannot be selected if this package is currently selected.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.ConflictingPackagesProcessed">
            <summary>
            Gets a list of selectable packages that conflict with this package. Packages on this list cannot be selected if this package is currently selected.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.ShowInSearchList">
            <summary>
            Toggle if the package should appear in the search list.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.SelectablePackage.UIComponent">
            <summary>
            The UI element reference for this package.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.SelectablePackage.ParentUIComponent">
            <summary>
            The UI element reference for the direct parent of this package.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.SelectablePackage.TopParentUIComponent">
            <summary>
            The UI element reference for the absolute top of the package tree.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.SelectablePackage.RelhaxWPFComboBoxList">
            <summary>
            The list of WPF combo boxes for each combobox type.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.SelectablePackage.ChildBorder">
            <summary>
            The border for the legacy view to allow for putting all children in the border. sits inside TreeViewItem.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.SelectablePackage.ChildStackPanel">
            <summary>
            The StackPanel to allow the child TreeViewItems to stack upon each other. sits inside the border.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.SelectablePackage.ParentBorder">
            <summary>
            The border that this component is in.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.SelectablePackage.ParentStackPanel">
            <summary>
            The StackPanel that this item is inside.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.ChangeColorOnValueChecked">
            <summary>
            Gets or sets if the UI background components of this package should change color when the checked value changes.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.SelectablePackage.TabIndex">
            <summary>
            The TabItem UI reference.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.ModSelectionView">
            <summary>
            The selection view that, when loading into the package selection list, the user selected for viewing packages.
            </summary>
            <remarks>This value is copied from the modpack settings.</remarks>
            <seealso cref="T:RelhaxModpack.Settings.ModpackSettings"/>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.ForceVisible">
            <summary>
            If this package should be forced visible in a selection view.
            </summary>
            <remarks>This value is copied from the modpack settings.</remarks>
            <seealso cref="T:RelhaxModpack.Settings.ModpackSettings"/>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.ForceEnabled">
            <summary>
            If this package should be forced enabled in a selection view.
            </summary>
            <remarks>This value is copied from the modpack settings.</remarks>
            <seealso cref="T:RelhaxModpack.Settings.ModpackSettings"/>
        </member>
        <member name="F:RelhaxModpack.Database.SelectablePackage.ContentControl">
            <summary>
            ContentControl item to allow for right-clicking of disabled components.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.SelectablePackage.ScrollViewer">
            <summary>
            Component used only in the top SelectablePackage to allow for scrolling of the package lists for each category.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.SelectablePackage.TreeViewItem">
            <summary>
            The TreeViewItem that corresponds to this package.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.SelectablePackage.TreeView">
            <summary>
            The TreeView that this package is in.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.InstallGroupWithOffset">
            <summary>
            The level at which this package will be installed, factoring if the category (if SelectablePackage) is set to offset the install group with the package level.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.CompletePath">
            <summary>
            Provides a complete path of the name fields from the top package down to where this package is located in the tree.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.CompletePackageNamePath">
            <summary>
            Provides a complete path of the packageName fields from the top package down to where this package is located in the tree.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.CompleteUIDPath">
            <summary>
            Provides a complete tree style path to the package using its UID, starting with the category.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.IsStructureVisible">
            <summary>
            Determines if the UI package structure to this package is of all visible components.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.IsStructureEnabled">
            <summary>
            Determines if all parent packages leading to this package are enabled. In other words, it checks if the path to this package is enabled.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.NameDisplay">
            <summary>
            Returns the display name of the package for the UI, with version macros replaced and any other statuses appended.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.TimeStampString">
            <summary>
            Returns a string representation of the time stamp of when the zip file of this package was last modified.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.ToolTipString">
            <summary>
            Returns the display tool tip string, or the translation string for "no description".
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.SelectablePackage.CompareModsPackageName(RelhaxModpack.Database.SelectablePackage,RelhaxModpack.Database.SelectablePackage)">
            <summary>
            Alphabetical sorting of packages by PackageName property at this level (not recursive).
            </summary>
            <param name="x">First package to compare.</param>
            <param name="y">Second package to compare.</param>
            <returns>1 or -1 if the package isn't equal, 0 if it is equal.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.SelectablePackage.CompareModsName(RelhaxModpack.Database.SelectablePackage,RelhaxModpack.Database.SelectablePackage)">
            <summary>
            Alphabetical sorting of packages by NameFormatted property at this level (not recursive).
            </summary>
            <param name="x">First package to compare.</param>
            <param name="y">Second package to compare.</param>
            <returns>1 or -1 if the package isn't equal, 0 if it is equal.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.SelectablePackage.ToString">
            <summary>
            Allows for display in a combobox and when debugging.
            </summary>
            <returns>The nameFormatted property of the package.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.SelectablePackage.AnyPackagesChecked">
            <summary>
            Check if the color change should be changed on or off, based on if any other packages at this level are enabled and checked.
            </summary>
            <returns>True if another package at this level is checked and enabled, false otherwise.</returns>
        </member>
        <member name="P:RelhaxModpack.Database.SelectablePackage.IsStructureValid">
            <summary>
            Returns true if the structure above and below this package is valid (all mandatory child options checked, parent checked), false otherwise.
            </summary>
            <remarks>This assumes that the database linking/reference code has been run, otherwise a null exception will occur.</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.SelectablePackage.AnyConflictingPackages">
            <summary>
            Determine if any packages that are listed as a conflict of this package are currently enabled and checked.
            </summary>
            <returns>True if there is at least conflicting package found, false if none are found.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.SelectablePackage.GetConflictingPackages">
            <summary>
            Get a list of packages that conflict with other packages up and down the selection tree.
            </summary>
            <returns>The list of packages that conflict.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.SelectablePackage.UncheckConflictingPackages">
            <summary>
            Unchecks any packages that conflict with this package.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.SelectablePackage.ForceCheckPackage">
            <summary>
            Force checks this package by un-checking any conflicting packages of this package.
            </summary>
        </member>
        <member name="T:RelhaxModpack.Database.Trigger">
            <summary>
            Represents a trigger object used in the installer as an event starter.
            For example, a contour icon trigger exists to start the building of contour icons.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.Trigger.#ctor">
            <summary>
            Create an instance of a Trigger object.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.Trigger.#ctor(RelhaxModpack.Database.Trigger)">
            <summary>
            Create an instance of a trigger object, copying from a given trigger.
            </summary>
            <param name="triggerToCopy">The trigger to copy.</param>
        </member>
        <member name="P:RelhaxModpack.Database.Trigger.Name">
            <summary>
            The name of the trigger.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.Trigger.Total">
            <summary>
            The total number of instances that this trigger exists in the selected packages to install.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.Trigger.NumberProcessed">
            <summary>
            The number of processed triggers for this trigger type. Prevents the trigger from firing early.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.Trigger.Fired">
            <summary>
            Flag to determine if the trigger task has started.
            </summary>
        </member>
        <member name="T:RelhaxModpack.Database.UserDataFile">
            <summary>
            A structure that is used to track the relative path of a user file (like session stats),
            and the root path between the installer and WoT directory.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.UserDataFile.#ctor(RelhaxModpack.Database.UserDataFile)">
            <summary>
            Create an instance of the UserDataFile struct.
            </summary>
            <param name="dataFileToCopy">The UserDataFile struct to copy.</param>
        </member>
        <member name="F:RelhaxModpack.Database.UserDataFile.WoTRoot">
            <summary>
            The WoT root directory where the UserDataFile is from.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.UserDataFile.TempSaveRoot">
            <summary>
            The directory path to the installer's temporary folder for holding user files during an installation.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.UserDataFile.FilePath">
            <summary>
            The relative path of the user file.
            </summary>
        </member>
        <member name="T:RelhaxModpack.Database.UserFile">
            <summary>
            An object that represents cache files generated by mods that should be backed up and restored as to not loose cache data (like session stats or auto equip data).
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.UserFile.#ctor">
            <summary>
            Create an instance of the UserFile class.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.UserFile.#ctor(RelhaxModpack.Database.UserFile)">
            <summary>
            Create an instance of the UserFile class, copying values from a given UserFile object.
            </summary>
            <param name="userfileToCopy">The UserFile instance to copy from.</param>
        </member>
        <member name="M:RelhaxModpack.Database.UserFile.#ctor(RelhaxModpack.Database.UserFile,System.Boolean)">
            <summary>
            Create an instance of the UserFile class, copying values and list contents from a given UserFile object.
            </summary>
            <param name="userfileToCopy">The UserFile instance to copy from.</param>
            <param name="deep">If true, copy the list of files saved.</param>
        </member>
        <member name="M:RelhaxModpack.Database.UserFile.PropertiesForSerializationAttributes">
            <summary>
            Defines a list of properties in the class to be serialized into xml attributes.
            </summary>
            <returns>A list of string property names.</returns>
            <remarks>Xml attributes will always be written, xml elements are optional.</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.UserFile.PropertiesForSerializationElements">
            <summary>
            Defines a list of properties in the class to be serialized into xml elements.
            </summary>
            <returns>A list of string property names.</returns>
            <remarks>Xml attributes will always be written, xml elements are optional.</remarks>
        </member>
        <member name="M:RelhaxModpack.Database.UserFile.GetXmlDatabasePropertiesV1Dot0">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.0 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Database.UserFile.GetXmlDatabasePropertiesV1Dot1">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.1 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Database.UserFile.GetXmlDatabasePropertiesV1Dot2">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.2 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="P:RelhaxModpack.Database.UserFile.Pattern">
            <summary>
            The path or pattern to a file or files to backup to a temporary directory.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.UserFile.FilesSaved">
            <summary>
            The list of actual files saved to the temporary backup directory. Contains the full path and file name
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.UserFile.ToString">
            <summary>
            The string representation of the UserFile object.
            </summary>
            <returns>The string pattern.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.UserFile.Copy(RelhaxModpack.Database.UserFile)">
            <summary>
            Create a copy of the UserFile object.
            </summary>
            <param name="userFileToCopy">The object to copy.</param>
            <returns>A new UserFile object with the same values.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.UserFile.DeepCopy(RelhaxModpack.Database.UserFile)">
            <summary>
            Create a deep copy of the UserFile object.
            </summary>
            <param name="userFileToCopy">The object to copy.</param>
            <returns>A new UserFile object with the same values and new list elements with the same values.</returns>
        </member>
        <member name="T:RelhaxModpack.Database.XmlComponent">
            <summary>
            An XmlComponent is a base class of a database object that can be serialized to and from memory and xml documents.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.XmlComponent.SchemaV1Dot0">
            <summary>
            The string to represent the xml schema 1.0.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.XmlComponent.SchemaV1Dot1">
            <summary>
            The string to represent the xml schema 1.1.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Database.XmlComponent.SchemaV1Dot2">
            <summary>
            The string to represent the xml schema 1.2.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.XmlComponent.LoadedSchemaVersion">
            <summary>
            Get or set the schema version that this object was loaded from.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.XmlComponent.#ctor">
            <summary>
            Create an instance of a parent class of XmlComponent.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.XmlComponent.#ctor(RelhaxModpack.Database.XmlComponent)">
            <summary>
            Create an instance of a a parent class of XmlComponent, copying values from another instance.
            </summary>
            <param name="componentToCopyFrom">The instance to copy from.</param>
        </member>
        <member name="M:RelhaxModpack.Database.XmlComponent.GetXmlDatabaseProperties(System.String)">
            <summary>
            Gets a list of all properties of a class that are mapped to xml attributes or elements, based on a given schema version.
            </summary>
            <param name="schemaVersion">The schema version to get the list of properties from.</param>
            <returns>The list of properties mapped to xml attributes or elements.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.XmlComponent.GetXmlDatabasePropertiesV1Dot0">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.0 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Database.XmlComponent.GetXmlDatabasePropertiesV1Dot1">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.1 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Database.XmlComponent.GetXmlDatabasePropertiesV1Dot2">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.2 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Database.XmlComponent.GetXmlElementName(System.String)">
            <summary>
            Gets the name of the xml element that this type of component is going to be named as, based on the schema version.
            </summary>
            <param name="schemaVersion">The schema version to get the list of properties from.</param>
            <returns>The expected xml element name for the component.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.XmlComponent.ToXml(System.Xml.Linq.XElement,System.String)">
            <summary>
            Saves a component to an xml object representing an xml element.
            </summary>
            <param name="propertyElement">The xml object of the element to save.</param>
            <param name="schemaVersion">The schema version to save the element as.</param>
            <returns>True if the save operation was successful, false if errors occurred.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.XmlComponent.FromXml(System.Xml.Linq.XElement,System.String)">
            <summary>
            Loads a component from an xml object representing an xml element.
            </summary>
            <param name="propertyElement">The xml object of the element to load from.</param>
            <param name="schemaVersion">The schema version to load the element as.</param>
            <returns></returns>
        </member>
        <member name="M:RelhaxModpack.Database.XmlComponent.UpdatePropertyValue(System.Object,System.Xml.Linq.XObject,System.Reflection.PropertyInfo,System.String)">
            <summary>
            Attempts to update a property's value if the current value does not match.
            </summary>
            <param name="valueOfProperty">The current value of the property.</param>
            <param name="xmlObject">The xml object that represents the container of this element. Only used for logging.</param>
            <param name="propertyInfo">The property metadata object of the target property to update.</param>
            <param name="xmlValue">The value from the xml element or attribute.</param>
            <returns>True if the value is up to date or updated, false if the value was unable to be updated.</returns>
        </member>
        <member name="M:RelhaxModpack.Database.XmlComponent.OnParsingPropertyToXmlElement(RelhaxModpack.Database.XmlDatabaseProperty,System.Xml.Linq.XElement,System.String,System.Reflection.PropertyInfo,System.Object,System.Xml.Linq.XElement,System.Boolean@)">
            <summary>
            A hook for when an xml entry is being loaded. This can be used to handle custom or one-off conversions or implementations to manage any legacy serialization issues (for example, old database formats never had a wrapping "Packages" element).
            </summary>
            <param name="thisPropertyXml">The xml database property entry being loaded. For example, the "Packages" list entry.</param>
            <param name="propertyXmlElement">The xml element entry of the current object being loaded. For example, the "Category" element.</param>
            <param name="schemaVersion">The version of the schema currently being loaded.</param>
            <param name="propertyInfo">The info meta-data about the property in the class object to be written to. For example, the "Packages" list property.</param>
            <param name="valueOfProperty">The current value of the property in the object. For example, this would be the list object of the "Packages" list property.</param>
            <param name="elementOfProperty">The xml element entry of the property being loaded. For example, the "Packages" xml entry.</param>
            <param name="continueProcessingProperty">A flag used back in XmlComponent if the current xml element to load (like "Packages") should continue to be loaded by XmlComponent.</param>
        </member>
        <member name="M:RelhaxModpack.Database.XmlComponent.OnParsingPropertyFromXmlElement(RelhaxModpack.Database.XmlDatabaseProperty,System.Xml.Linq.XElement,System.String,System.Reflection.PropertyInfo,System.Object,System.Xml.Linq.XElement,System.Boolean@)">
            <summary>
            A hook for when an xml entry is being saved. This can be used to handle custom or one-off conversions to manage any legacy serialization issues (for example, old database formats never had a wrapping "Packages" element).
            </summary>
            <param name="thisPropertyXml">The xml database property entry being saved. For example, the "Packages" list entry.</param>
            <param name="propertyXmlElement">The xml element entry of the current object being saved. For example, the "Category" element.</param>
            <param name="schemaVersion">The version of the schema currently being saved.</param>
            <param name="propertyInfo">The info meta-data about the property in the class object to be read from. For example, the "Packages" list property.</param>
            <param name="valueOfProperty">The current value of the property in the object. For example, this would be the list object of the "Packages" list property.</param>
            <param name="elementOfProperty">The xml element entry of the property being saved. For example, the "Packages" xml entry.</param>
            <param name="continueProcessingProperty">A flag used back in XmlComponent if the current xml element to save (like "Packages") should continue to be saved by XmlComponent.</param>
        </member>
        <member name="M:RelhaxModpack.Database.XmlComponent.OnStartedLoadingFromXml(System.Xml.Linq.XElement)">
            <summary>
            A hook from XmlComponent for when an xml entry is started being loaded into an object.
            </summary>
            <param name="propertyElement">The xml element of the entry being loaded.</param>
        </member>
        <member name="M:RelhaxModpack.Database.XmlComponent.OnFinishedLoadingFromXml(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            A hook from XmlComponent for when an xml entry is finished being loaded into an object.
            </summary>
            <param name="propertyElement">The xml element of the entry being loaded.</param>
            <param name="loadStatus">The status of the loading of this object, if all properties of it were previously loaded correctly.</param>
        </member>
        <member name="M:RelhaxModpack.Database.XmlComponent.OnStartedSavingToXml(System.Xml.Linq.XElement,System.String)">
            <summary>
            A hook from XmlComponent for when an xml entry is started being saved to an xml document object.
            </summary>
            <param name="propertyElement">The xml element of the entry being saved.</param>
            <param name="targetSchemaVersion">The schema version being used to save.</param>
        </member>
        <member name="M:RelhaxModpack.Database.XmlComponent.OnFinishedSavingToXml(System.Xml.Linq.XElement,System.String,System.Boolean)">
            <summary>
            A hook from XmlComponent for when an xml entry is finished being saved to an xml document object.
            </summary>
            <param name="propertyElement">The xml element of the entry being saved.</param>
            <param name="targetSchemaVersion">The schema version being used to save.</param>
            <param name="saveStatus">The status of the saving of this object, if all properties of it were previously saved correctly.</param>
        </member>
        <member name="T:RelhaxModpack.Database.XmlDatabaseProperty">
            <summary>
            An XmlDatabaseProperty object is a mapping of an xml attribute or element to a property in a class object for serialization.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.XmlDatabaseProperty.XmlName">
            <summary>
            Get or set the name of the xml element or attribute.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.XmlDatabaseProperty.XmlEntryType">
            <summary>
            Get or set the type of xml entry.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Database.XmlDatabaseProperty.PropertyName">
            <summary>
            Get or set the name of the class property name.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Database.XmlDatabaseProperty.ToString">
            <summary>
            A string representation of the object to display its property information.
            </summary>
            <returns>The string representing object properties.</returns>
        </member>
        <member name="T:RelhaxModpack.Installer.Instruction">
            <summary>
            An Instruction is a task to be performed by the installer after packages are extracted.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Installer.Instruction.#ctor">
            <summary>
            Create an instance of the Instruction class.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Installer.Instruction.#ctor(RelhaxModpack.Installer.Instruction)">
            <summary>
            Create an instance of the Instruction class, making a copy of a given Instruction.
            </summary>
            <param name="instructionToCopy">The Instruction whose values to copy.</param>
        </member>
        <member name="M:RelhaxModpack.Installer.Instruction.PropertiesToSerialize">
            <summary>
            Creates a string array of properties in the class to serialize for loading to and from an xml document.
            </summary>
            <returns>The string array of properties to serialize between xml document and class values.</returns>
            <remarks>This is only used in InstructionLoader, to load documents of instructions. Now, instructions are saved directly in the packages class.</remarks>
        </member>
        <member name="P:RelhaxModpack.Installer.Instruction.RootObjectPath">
            <summary>
            The xpath to use to get a list of xml element objects that represent each instruction to serialize.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Installer.Instruction.NativeProcessingFile">
            <summary>
            A single string with the filename of the processingNativeFile (needed for tracing work instructions after installation).
            </summary>
        </member>
        <member name="P:RelhaxModpack.Installer.Instruction.ActualPatchName">
            <summary>
            the actual name of the original patch before processed.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Installer.Instruction.Package">
            <summary>
            Get or set the DatabasePackage that this instruction belongs to.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Installer.Instruction.DumpInfoToLog">
            <summary>
            Gets a log formatted string for debugging containing key object name and values.
            </summary>
            <remarks>If debug output is enabled for the log file during an installation, then each instruction will have it's DumpInfoToLog property called.</remarks>
        </member>
        <member name="M:RelhaxModpack.Installer.Instruction.InstructionsEqual(RelhaxModpack.Installer.Instruction)">
            <summary>
            Compares two instructions to determine if their values are equal.
            </summary>
            <param name="instructionToCompare">The instruction to compare against.</param>
            <returns>True if the compared values are equal, false otherwise.</returns>
        </member>
        <member name="T:RelhaxModpack.Installer.InstructionLoader">
            <summary>
            The instructionLoader class is for loading instructions from legacy style individual xml documents into a list of Instruction objects.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Installer.InstructionLoader.CreateInstructionsList(System.String,RelhaxModpack.Utilities.Enums.InstructionsType,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a list of instructions from xml files in a directory.
            </summary>
            <param name="folderPath">The directory path to the location of xml files.</param>
            <param name="instructionsType">The type of instructions to load.</param>
            <param name="xmlSearchpath">The xml xpath to use to get the list of xml objects of each instruction xml.</param>
            <param name="originalPatchNames">A dictionary to serve as a map for each original filename of each xml document.</param>
            <returns>The loaded list of instructions, or an empty list if no instructions loaded.</returns>
        </member>
        <member name="M:RelhaxModpack.Installer.InstructionLoader.AddInstructionObjectsToList(System.String,System.Collections.Generic.List{RelhaxModpack.Installer.Instruction},RelhaxModpack.Utilities.Enums.InstructionsType,System.String)">
            <summary>
            Adds instructions to a given Instruction list.
            </summary>
            <param name="file">The file that contains instructions to load.</param>
            <param name="instructions">The instructions list to add loaded instructions to.</param>
            <param name="instructionsType">The type of instructions to load.</param>
            <param name="xmlSearchpath">The xml xpath to use to get the list of xml objects of each instruction xml.</param>
            <seealso cref="T:RelhaxModpack.Utilities.Enums.InstructionsType"/>
            <seealso cref="T:RelhaxModpack.Installer.Instruction"/>
        </member>
        <member name="T:RelhaxModpack.Settings.AutomationRunnerSettings">
            <summary>
            Defines settings used in the database automation runner window
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.AutomationRunnerSettings.RepoDefaultBranch">
            <summary>
            The default branch to use for the automation's repository root.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.AutomationRunnerSettings.Filename">
            <summary>
            The name of the xml file on disk
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.AutomationRunnerSettings.MembersToExclude">
            <summary>
            A list of properties and fields to exclude from saving/loading to and from xml
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.AutomationRunnerSettings.SelectedBranch">
            <summary>
            The name of the branch on github that the user specifies to download the automation scripts from
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.AutomationRunnerSettings.OpenLogWindowOnStartup">
            <summary>
            If true, the log window will be opened upon automation runner launch.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.AutomationRunnerSettings.BigmodsUsername">
            <summary>
            The user's FTP account username to the bigmods FTP server
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.AutomationRunnerSettings.BigmodsPassword">
            <summary>
            The user's FTP account password to the bigmods FTP server
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.AutomationRunnerSettings.DatabaseSavePath">
            <summary>
            The file path to the root modpack database xml file (not the automation database)
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.AutomationRunnerSettings.DumpParsedMacrosPerSequenceRun">
            <summary>
            If true, all macro variables will be written to the log file when a new sequence is started.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.AutomationRunnerSettings.DumpShellEnvironmentVarsPerSequenceRun">
            <summary>
            If true, all environment variables will be written to the log file when a new sequence is started.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.AutomationRunnerSettings.UseLocalRunnerDatabase">
            <summary>
            If true, use the local automation runner database on disk. If false, use the automation runner repository at the specified branch
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.AutomationRunnerSettings.LocalRunnerDatabaseRoot">
            <summary>
            The full path to the automation root xml database file (root.xml).
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.AutomationRunnerSettings.WoTClientInstallLocation">
            <summary>
            The full path to the WoT client installation directory.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.AutomationRunnerSettings.SuppressDebugMessagesInLogWindow">
            <summary>
            If true, debug level log messages won't be shown in the log window (they will only be written to the log file).
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.AutomationRunnerSettings.ClearLogWindowOnSequenceStart">
            <summary>
            If true, the log window text will be cleared upon starting a group of sequences.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.AutomationRunnerSettings.ClearLogFileOnSequenceStart">
            <summary>
            If true, the log file will be cleared upon starting a group of sequences.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.AutomationRunnerSettings.UserMacro1Name">
            <summary>
            The name of user supplied macro 1
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.AutomationRunnerSettings.UserMacro1Value">
            <summary>
            The value of user supplied macro 1
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.AutomationRunnerSettings.UserMacro2Name">
            <summary>
            The name of user supplied macro 2
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.AutomationRunnerSettings.UserMacro2Value">
            <summary>
            The value of user supplied macro 2
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.AutomationRunnerSettings.UserMacro3Name">
            <summary>
            The name of user supplied macro 3
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.AutomationRunnerSettings.UserMacro3Value">
            <summary>
            The value of user supplied macro 3
            </summary>
        </member>
        <member name="T:RelhaxModpack.Settings.ISettingsFile">
            <summary>
            Represents a class that is used within windows as a serialized to/from xml settings definition holder
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.ISettingsFile.Filename">
            <summary>
            The name of the file on disk
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.ISettingsFile.MembersToExclude">
            <summary>
            A list of properties and fields to exclude from saving/loading to and from xml
            </summary>
        </member>
        <member name="T:RelhaxModpack.Settings.ModpackToolboxSettings">
            <summary>
            The settings file for the ModpackToolbox window class
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackToolboxSettings.SettingsFilename">
            <summary>
            The name of the settings file on disk
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.ModpackToolboxSettings.Filename">
            <summary>
            The name of the xml file on disk
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.ModpackToolboxSettings.MembersToExclude">
            <summary>
            A list of properties and fields to exclude from saving/loading to and from xml
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.ModpackToolboxSettings.UseCustomDbPath">
            <summary>
            Toggle if using the custom path
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.ModpackToolboxSettings.CustomDbPath">
            <summary>
            If using a custom path to perform work, toggle the folder path of the RelhaxModpackDatabaseRepo
            </summary>
        </member>
        <member name="T:RelhaxModpack.Settings.SettingsParser">
            <summary>
            A helper class to parse a settings object to and from xml
            </summary>
        </member>
        <member name="M:RelhaxModpack.Settings.SettingsParser.LoadSettings(RelhaxModpack.Settings.ISettingsFile,System.String)">
            <summary>
            Load the settings object with values from the given xml file path
            </summary>
            <param name="settingsFile">The instance of the settings class object to load settings into</param>
            <param name="customSettingsPath">The custom location of the settings xml file</param>
        </member>
        <member name="M:RelhaxModpack.Settings.SettingsParser.LoadSettings(RelhaxModpack.Settings.ISettingsFile)">
            <summary>
            Load the settings object with values from the given xml file path
            </summary>
            <param name="settingsFile">The instance of the settings class object to load settings into</param>
        </member>
        <member name="M:RelhaxModpack.Settings.SettingsParser.SaveSettings(RelhaxModpack.Settings.ISettingsFile,System.String)">
            <summary>
            Save the settings object to a custom location.
            </summary>
            <param name="settingsFile">The settings object to save to xml</param>
            <param name="customSettingsPath">The custom path to save the settings xml document to</param>
        </member>
        <member name="M:RelhaxModpack.Settings.SettingsParser.SaveSettings(RelhaxModpack.Settings.ISettingsFile)">
            <summary>
            Save the settings to the default location stored in the file.
            </summary>
            <param name="settingsFile">The settings object to save to xml</param>
        </member>
        <member name="T:RelhaxModpack.Settings.PatchSettings">
            <summary>
            Defines the settings used for the patch class
            </summary>
            <remarks>There is no constructor for this class. It is not needed as the act of not having one assigns a default
            of an empty constructor with to parameters. See https://stackoverflow.com/a/23458819/3128017 </remarks>
        </member>
        <member name="F:RelhaxModpack.Settings.PatchSettings.SettingsFilename">
            <summary>
            The name of the settings file on disk
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.PatchSettings.Filename">
            <summary>
            The name of the xml file on disk
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.PatchSettings.MembersToExclude">
            <summary>
            A list of properties and fields to exclude from saving/loading to and from xml
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.PatchSettings.SaveSelectionBeforeLeave">
            <summary>
            If the selected patch should be saved (hitting apply) before the selection changes
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.PatchSettings.SwitchToLogWhenTestingPatch">
            <summary>
            If true, when testing a patch, the log tab will become the active tab
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.PatchSettings.AppMacro">
            <summary>
            The path to use for replacing the {app} macro in patch files
            </summary>
            <remarks>This is for the relative patch mode</remarks>
        </member>
        <member name="F:RelhaxModpack.Settings.PatchSettings.VersiondirMacro">
            <summary>
            The version of the game to use for replacing the {versiondir} macro in patch files
            </summary>
            <remarks>This is for the relative patch mode</remarks>
        </member>
        <member name="F:RelhaxModpack.Settings.PatchSettings.ApplyBehavior">
            <summary>
            Controls how the save patch and apply button interact with each other. See ApplyBehavior enumeration for interaction definitions.
            </summary>
        </member>
        <member name="T:RelhaxModpack.Settings.EditorSettings">
            <summary>
            The settings used in the editor window
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.EditorSettings.SettingsFilename">
            <summary>
            The name of the settings file on disk
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.EditorSettings.Filename">
            <summary>
            The name of the xml file on disk
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.EditorSettings.MembersToExclude">
            <summary>
            A list of properties and fields to exclude from saving/loading to and from xml
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.EditorSettings.BigmodsUsername">
            <summary>
            The user's FTP account username to the bigmods FTP server
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.EditorSettings.BigmodsPassword">
            <summary>
            The user's FTP account password to the bigmods FTP server
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.EditorSettings.SaveSelectionBeforeLeave">
            <summary>
            Before you click on a new selection to display, it will apply any changes made. Can be used with ApplyBehavior.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.EditorSettings.ApplyBehavior">
            <summary>
            The behavior the editor should use for the save and apply buttons
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.EditorSettings.ShowConfirmationOnPackageApply">
            <summary>
            Show a confirmation window when clicking apply
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.EditorSettings.ShowConfirmationOnPackageAddRemoveMove">
            <summary>
            Show a confirmation window when clicking to add or move a package
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.EditorSettings.DefaultEditorSaveLocation">
            <summary>
            The location to save the database file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.EditorSettings.FTPUploadDownloadWindowTimeout">
            <summary>
            The timeout, in seconds, until the FTP upload or download window will close. Set to 0 to disable timeout.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.EditorSettings.UploadZipDeleteIsActuallyMove">
            <summary>
            Flag to determine if the delete zip button (actually open file by default) will actually delete the zip, or move it to the specified folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.EditorSettings.UploadZipMoveFolder">
            <summary>
            The folder path to move the uploaded file to. If the file already exists, it will be overridden
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.EditorSettings.DeleteUploadLocallyUponCompletion">
            <summary>
            Flag to determine if after an upload is completed, the file will automatically be deleted or moved to a local folder
            </summary>
        </member>
        <member name="T:RelhaxModpack.Settings.ModpackSettings">
            <summary>
            Provides access to all settings used in the modpack.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.SettingsFilename">
            <summary>
            The name of the settings file on disk
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.OldSettingsFilename">
            <summary>
            The name of the Relhax V1 settings file on disk
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.ModpackSettings.Filename">
            <summary>
            The name of the xml file on disk
            </summary>
        </member>
        <member name="P:RelhaxModpack.Settings.ModpackSettings.MembersToExclude">
            <summary>
            A list of properties and fields to exclude from saving/loading to and from xml
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.CustomModInfoPath">
            <summary>
            The custom path to the ModInfo.xml file if loading in test mode
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.BetaDatabaseSelectedBranch">
            <summary>
            The name of the git branch to use when downloading the database. Uses the RelhaxModpackDatabase repository
            </summary>
            <remarks>URL for the repository: https://github.com/Willster419/RelhaxModpackDatabase </remarks>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.AtlasLibrariesCanBeLoaded">
            <summary>
            Flag to track when/if the user has MSVCP2013 installed to load the atlas image processing libraries
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.InformIfApplicationInDownloadsFolder">
            <summary>
            Show a warning (once) if the user launched the application right from the downloads folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.NotifyIfSameDatabase">
            <summary>
            Toggle if the program should notify the user if the database version is the same as the last installed version
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.BackupModFolder">
            <summary>
            Toggle if the program will backup the current mod installation
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.CleanInstallation">
            <summary>
            Toggle if the program will clean the mods and res_mods folders before installation
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.ForceManuel">
            <summary>
            Toggle if the program should force the user to manually point to the WoT location
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.SaveLastSelection">
            <summary>
            Toggle if the application should automatically save the last selected config to also be automatically loaded upon selection load
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.SaveUserData">
            <summary>
            Toggle if the application should save user cache save data like session stats, or auto equip configs
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.SaveDisabledMods">
            <summary>
            Toggle if the application should save disabled mods in the user's selection file. If selected, when a mod is enabled again, it will be automatically selected
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.DisplayUserModsWarning">
            <summary>
            A one time run bool to display a message about how to use user mods
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.DisplaySelectionPreviewMessage">
            <summary>
            A one time run bool to display a message about how the user can right click a selection to get a preview window
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.VerboseLogging">
            <summary>
            Toggle if the application should use debug level logging or just info
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.AllowStatisticDataGather">
            <summary>
            Toggle if the application can gather statistic data about it's usage
            </summary>
            <remarks>The data that the modpack gathers is only the list of packages you selected for installation. This helps us determine which mods are popular, and for how best to
            prioritize which mods to work on first in the event the support team is overloaded</remarks>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.EnableBordersLegacyView">
            <summary>
            Toggle for each view if the borders around the child selection options should show
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.EnableBordersDefaultV2View">
            <summary>
            Toggle for each view if the borders around the child selection options should show
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.EnableColorChangeLegacyView">
            <summary>
            Toggle for each view if the color change should occur when a child selection happens
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.EnableColorChangeDefaultV2View">
            <summary>
            Toggle for each view if the color change should occur when a child selection happens
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.ShowInstallCompleteWindow">
            <summary>
            Toggle if the installation complete window will be shown
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.ClearCache">
            <summary>
            Toggle if the program will delete the WoT appdata cache
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.DeleteLogs">
            <summary>
            Toggle if the program will delete xvm, pmod, WoT logs
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.CreateShortcuts">
            <summary>
            Toggle if the program will create desktop shortcuts
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.InstallWhileDownloading">
            <summary>
            Toggle the ability for the modpack to extract a package as soon as it is downloaded
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.MulticoreExtraction">
            <summary>
            Toggle the ability to have multiple extractions happening at the same time
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.ExportMode">
            <summary>
            Toggle export mode
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.ForceEnabled">
            <summary>
            Force all packages to be enabled in the selection list
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.ForceVisible">
            <summary>
            Force all packages to be visible in the selection list
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.DisableTriggers">
            <summary>
            When selected, the installation engine will disable event triggers.
            </summary>
            <remarks>The triggers, when enabled, enable the application to start some install tasks when all required packages are downloaded</remarks>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.OneClickInstall">
            <summary>
            Toggle one click install mode
            </summary>
            <remarks>Allows the user to install a selection when clicking the install button</remarks>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.AutoInstall">
            <summary>
            Toggle auto install mode
            </summary>
            <remarks>Allows the user to have the application automatically check for and install a selection file when the database updates</remarks>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.AdvancedInstalProgress">
            <summary>
            Toggle the advanced installation progress window
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.DeleteCacheFiles">
            <summary>
            True - After an installation the application will ask to delete old download cache files
            False - After an installation the application will always delete old download cache files
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.PreviewFullscreen">
            <summary>
            Toggle for if the Preview window should be shown in fullscreen mode
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.ModSelectionFullscreen">
            <summary>
            Toggle for if the ModSelectionView window should be shown in fullscreen mode
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.MinimizeToSystemTray">
            <summary>
            Toggle for minimizing the application to the system tray (After the application is done installing mods I presume?)
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.ShowOptionsCollapsedLegacy">
            <summary>
            Toggle for if the selection list options in Legacy view should be collapsed by default on start
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.AutoOneclickShowWarningOnSelectionsFail">
            <summary>
            Toggle if during auto or one click load if the application should inform if any selection errors during selection file load
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.EnableCustomFont">
            <summary>
            Toggle if the application should apply a custom font to the MainWindow and all windows of RelhaxWindow with 
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.ValidFrameworkVersion">
            <summary>
            Flag to enable a check if the user is running the minimum required .NET Framework version for this application
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.MinimalistMode">
            <summary>
            Toggle to enable minimalist mode during install. It won't install additional recommended files, only minimum files to allow the packages to work.
            </summary>
            <seealso cref="P:RelhaxModpack.Database.DatabasePackage.MinimalistModeExclude"/>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.AutoInstallFrequencyInterval">
            <summary>
            The time, in a specified unit, to check for anew data base version
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.AutoInstallFrequencyTimeUnit">
            <summary>
            The time unit to use for the interval (mins, hours, etc)
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.ModSelectionHeight">
            <summary>
            The height, in pixels, of the ModSelectionView window
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.ModSelectionWidth">
            <summary>
            The width, in pixels, of the ModSelectionView window
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.PreviewX">
            <summary>
            The x-coordinate location, in pixels, of the Preview window
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.PreviewY">
            <summary>
            The y-coordinate location, in pixels, of the Preview window
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.PreviewHeight">
            <summary>
            The height, in pixels, of the Preview window
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.PreviewWidth">
            <summary>
            The width, in pixels, of the Preview window
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.DisplayScale">
            <summary>
            The factor to scale the window size and components by. From 1 to 3 in increments of 0.25
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.DownloadMirror">
            <summary>
            The download mirror to use when running the download manager
            </summary>
            <remarks>0 based index for easy usage into the ApplicationConstants.DownloadMirrors field</remarks>
            <seealso cref="F:RelhaxModpack.Common.ApplicationConstants.DownloadMirrors"/>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.AutoOneclickSelectionFilePath">
            <summary>
            The path to the auto or one click selection file
            </summary>
            <remarks>Used for both auto and one click installation modes</remarks>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.CustomFontName">
            <summary>
            The name of the font to use for the MainWindow and all windows that are of RelhaxWindow type
            </summary>
            <remarks>If the font name is not found in the system folder, this is reset to empty</remarks>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.UninstallMode">
            <summary>
            The Uninstall mode to use when uninstalling or installing with the clean install option
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.ModSelectionView">
            <summary>
            The selection view to use
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.Language">
            <summary>
            The selected language
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.DatabaseDistroVersion">
            <summary>
            The distribution version of the database to use when selecting mods
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.ApplicationDistroVersion">
            <summary>
            The application distribution version to use. When selected, it won't take affect until application restart
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettings.ApplicationTheme">
            <summary>
            The theme to apply to the application
            </summary>
        </member>
        <member name="M:RelhaxModpack.Settings.ModpackSettings.ApplyLegacySettings(System.Collections.Generic.List{System.Xml.Linq.XElement})">
            <summary>
            Check for old poorly named settings that don't directly match setting property names
            </summary>
            <param name="settings">The node that holds all the settings nodes</param>
        </member>
        <member name="T:RelhaxModpack.Settings.CommandLineSettings">
            <summary>
            Handles all parsing and usage of command line arguments.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.CommandLineSettings.CommandLineArgsToSpawnCustomWindow">
            <summary>
            A list of command line arguments that, when specified, would create a custom window to
            run the application in a specific mode.
            </summary>
            <remarks>For example, if "database-editor" is detected, then the application is going to open the database editor</remarks>
        </member>
        <member name="F:RelhaxModpack.Settings.CommandLineSettings.TestMode">
            <summary>
            Using the application is database test mode. Allows you to test a local database
            </summary>
            <remarks>Activated with "/test"</remarks>
        </member>
        <member name="F:RelhaxModpack.Settings.CommandLineSettings.SkipUpdate">
            <summary>
            Skip the application update check
            </summary>
            <remarks>Activated with "/skip-update"</remarks>
        </member>
        <member name="F:RelhaxModpack.Settings.CommandLineSettings.SilentStart">
            <summary>
            Allows the application (in installer mode) to be launched in a minimized state
            </summary>
            <remarks>Activated with "/silent-start"</remarks>
        </member>
        <member name="F:RelhaxModpack.Settings.CommandLineSettings.AutoInstallFileName">
            <summary>
            The name of the auto install selection file
            </summary>
            <remarks>The application uses the filename as check for if in auto install mode i.e. if the string is not empty.
            The file must be in the "RelhaxUserSelections" folder</remarks>
        </member>
        <member name="F:RelhaxModpack.Settings.CommandLineSettings.UpdateKeyFileName">
            <summary>
            The name of the file that contains the key for unlocking the updater
            </summary>
            <remarks>use key filename as check for update key mode</remarks>
        </member>
        <member name="F:RelhaxModpack.Settings.CommandLineSettings.EditorAutoLoadFileName">
            <summary>
            The path to load the database from when the application starts
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.CommandLineSettings.PatchFilenames">
            <summary>
            The parsed list of patch instruction files for patch mode
            </summary>
            <remarks>The application will run the patches in order loaded from the command line i.e. left to right</remarks>
        </member>
        <member name="F:RelhaxModpack.Settings.CommandLineSettings.ApplicationMode">
            <summary>
            The mode that the application is currently running in
            </summary>
        </member>
        <member name="M:RelhaxModpack.Settings.CommandLineSettings.#ctor(System.String[])">
            <summary>
            Creates an instance of the CommandLineSettings class
            </summary>
            <param name="args">The list of command line arguments provided from the Environment class</param>
            <remarks>The first arg to the exe is skipped</remarks>
        </member>
        <member name="M:RelhaxModpack.Settings.CommandLineSettings.ParseCommandLineSwitches">
            <summary>
            Parse the command line arguments
            </summary>
        </member>
        <member name="M:RelhaxModpack.Settings.CommandLineSettings.ArgsOpenCustomWindow">
            <summary>
            Determines if any specified command line args will cause the application to open a custom (non MainWindow) window
            </summary>
            <returns>True if the provided arguments will return a custom array, false otherwise</returns>
        </member>
        <member name="P:RelhaxModpack.UI.IOnCheckedComponent.Package">
            <summary>
            The package that the UI component belongs to
            </summary>
        </member>
        <member name="M:RelhaxModpack.UI.IOnCheckedComponent.OnCheckedChanged(System.Boolean)">
            <summary>
            Method signature for when the checked property changes
            </summary>
            <param name="Checked">The value of the checked property</param>
        </member>
        <member name="T:RelhaxModpack.UI.RelhaxComboBoxItem">
            <summary>
            Interaction logic for RelhaxComboBoxItem.xaml
            </summary>
            <summary>
            RelhaxComboBoxItem
            </summary>
        </member>
        <member name="P:RelhaxModpack.UI.RelhaxComboBoxItem.Package">
            <summary>
            The SelectablePackage object that is being wrapped around
            </summary>
        </member>
        <member name="P:RelhaxModpack.UI.RelhaxComboBoxItem.DisplayName">
            <summary>
            The text to display in the Combobox
            </summary>
        </member>
        <member name="M:RelhaxModpack.UI.RelhaxComboBoxItem.#ctor(RelhaxModpack.Database.SelectablePackage,System.String)">
            <summary>
            Creates an instance of the RelhaxComboBoxItem class
            </summary>
            <param name="package">The package to wrap around</param>
            <param name="display">The text to display in the Combobox</param>
        </member>
        <member name="M:RelhaxModpack.UI.RelhaxComboBoxItem.ToString">
            <summary>
            Allows for displaying of custom text in the Combobox
            </summary>
            <returns>The text to display in the Combobox (DisplayName property)</returns>
        </member>
        <member name="M:RelhaxModpack.UI.RelhaxComboBoxItem.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.UI.RelhaxHyperlink">
            <summary>
            Interaction logic for RelhaxHyperlink.xaml
            </summary>
            <summary>
            RelhaxHyperlink
            </summary>
        </member>
        <member name="M:RelhaxModpack.UI.RelhaxHyperlink.#ctor">
            <summary>
            Create an instance of RelhaxHyperlink
            </summary>
        </member>
        <member name="M:RelhaxModpack.UI.RelhaxHyperlink.#ctor(System.String,System.String)">
            <summary>
            Create an instance of RelhaxHyperlink
            </summary>
            <param name="URL">The URL to open when the hyperlink is clicked</param>
            <param name="text">The text of the hyperlink</param>
        </member>
        <member name="P:RelhaxModpack.UI.RelhaxHyperlink.URL">
            <summary>
            Get or set the link URL
            </summary>
        </member>
        <member name="P:RelhaxModpack.UI.RelhaxHyperlink.Text">
            <summary>
            Get or set the link text
            </summary>
        </member>
        <member name="M:RelhaxModpack.UI.RelhaxHyperlink.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.UI.RelhaxInstallerProgress">
            <summary>
            The RelhaxInstallerProgress class adds additional properties for zip file extraction
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxInstallerProgress.BytesProcessed">
            <summary>
            During zip file extraction, the number of processed bytes extracted, and the total bytes to extract.
            During copy operations, the number of processed copied bytes, and the total bytes to copy.
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxInstallerProgress.BytesTotal">
            <summary>
            During zip file extraction, the number of processed bytes extracted, and the total bytes to extract.
            During copy operations, the number of processed copied bytes, and the total bytes to copy.
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxInstallerProgress.BytesProcessedOfAThread">
            <summary>
            The number of bytes currently processed in an entry in a thread
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxInstallerProgress.BytesTotalOfAThread">
            <summary>
            The number of bytes to total process in an entry in a thread
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxInstallerProgress.Filename">
            <summary>
            The name of the file currently being processed
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxInstallerProgress.FilenameOfAThread">
            <summary>
            The name of the file currently being processed in a thread
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxInstallerProgress.EntryFilename">
            <summary>
            During zip file extraction, the entry inside the zip file being processed
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxInstallerProgress.EntriesProcessed">
            <summary>
            The number of entries currently processed in this zip file
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxInstallerProgress.EntriesTotal">
            <summary>
            The total number of entries in this zip file
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxInstallerProgress.EntriesProcessedOfAThread">
            <summary>
            The number of processed entries of a zip file of a thread
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxInstallerProgress.EntriesTotalOfAThread">
            <summary>
            The number of total entries of a zip file of a thread
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxInstallerProgress.EntryFilenameOfAThread">
            <summary>
            The entry name of a zip file of a thread
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxInstallerProgress.ThreadID">
            <summary>
            The ID number of the thread that this zip file belongs to
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxInstallerProgress.TotalThreads">
            <summary>
            The total number of extraction threads
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxInstallerProgress.CompletedThreads">
            <summary>
            The number of completed extraction threads
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxInstallerProgress.InstallGroup">
            <summary>
            The extraction installation group
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxInstallerProgress.TotalInstallGroups">
            <summary>
            The total number of install groups
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxInstallerProgress.CompletedPackagesOfAThread">
            <summary>
            The number of completed extracted packages that thread [index] has
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxInstallerProgress.TotalPackagesofAThread">
            <summary>
            The number of packages that thread [index] has
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxInstallerProgress.WaitingOnDownloadsOfAThread">
            <summary>
            Flag to mark if the install engine is waiting on a package to download in a thread
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxInstallerProgress.InstallStatus">
            <summary>
            The current status of the installer. Represents the current state of the installer. When it exists, it is also used as an exit code.
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxInstallerProgress.UninstallStatus">
            <summary>
            The current status of the uninstaller. Also used as exit code.
            </summary>
        </member>
        <member name="T:RelhaxModpack.UI.UiUtils">
            <summary>
            A utility class to handle UI interaction
            </summary>
        </member>
        <member name="M:RelhaxModpack.UI.UiUtils.GetAllWindowComponentsVisual(System.Windows.Window,System.Boolean)">
            <summary>
            Get a list of all visual components in the window
            </summary>
            <param name="window">The window to get the list of</param>
            <param name="includeWindow">if the list should include the window itself</param>
            <returns>A list of type FrameowrkElement of all components</returns>
        </member>
        <member name="M:RelhaxModpack.UI.UiUtils.GetAllWindowComponentsLogical(System.Windows.Window,System.Boolean)">
            <summary>
            Get a list of all logical components in the window
            </summary>
            <param name="window">The window to get the list of</param>
            <param name="includeWindow">if the list should include the window itself</param>
            <returns>A list of type FrameowrkElement of all components</returns>
        </member>
        <member name="M:RelhaxModpack.UI.UiUtils.GetAllWindowComponentsLogical(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Get a list of all logical components in the window
            </summary>
            <param name="rootElement">The element to get the list of logical items from</param>
            <param name="addRoot">If this rootElement should be added to the list</param>
            <returns></returns>
        </member>
        <member name="M:RelhaxModpack.UI.UiUtils.PointWithinScreen(System.Int32,System.Int32)">
            <summary>Checks if a point is inside the possible monitor space</summary>
            <param name="x">The x coordinate of the point</param>
            <param name="y">The y coordinate of the point</param>
        </member>
        <member name="M:RelhaxModpack.UI.UiUtils.PointWithinScreen(System.Drawing.Point)">
            <summary>Checks if a point is inside the possible monitor space</summary>
            <param name="p">The point to check</param>
        </member>
        <member name="M:RelhaxModpack.UI.UiUtils.AllowUIToUpdate">
            <summary>
            Injects a Dispatcher frame followed by an idle backgrouned operation to allow for the UI to update during an intensive operation on the UI thread
            </summary>
            <remarks>See https://stackoverflow.com/questions/37787388/how-to-force-a-ui-update-during-a-lengthy-task-on-the-ui-thread 
            <para>and https://stackoverflow.com/questions/2329978/the-calling-thread-must-be-sta-because-many-ui-components-require-this </para></remarks>
        </member>
        <member name="T:RelhaxModpack.UI.ZoomBorder">
            <summary>
            Represents a border that allows for panning and zooming of the UIElement object inside
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.ZoomBorder.CancelMouseDown">
            <summary>
            Cancel the mouse down event for panning
            </summary>
        </member>
        <member name="M:RelhaxModpack.UI.ZoomBorder.GetTranslateTransform(System.Windows.UIElement)">
            <summary>
            Returns the TranslateTransform part of the UIElement's RenderTransform
            </summary>
            <param name="element">The element to get the transformation parameter from</param>
            <returns>The TranslateTransformpart of the UIElement's RenderTransform</returns>
        </member>
        <member name="M:RelhaxModpack.UI.ZoomBorder.GetScaleTransform(System.Windows.UIElement)">
            <summary>
            Returns the ScaleTransform part of the UIElement's RenderTransform
            </summary>
            <param name="element">The element to get the transformation parameter from</param>
            <returns>The ScaleTransform of the UIElement's RenderTransform</returns>
        </member>
        <member name="P:RelhaxModpack.UI.ZoomBorder.Child">
            <summary>
            Gets or Sets the child UIElement inside this border
            </summary>
        </member>
        <member name="M:RelhaxModpack.UI.ZoomBorder.Reset">
            <summary>
            Reset the scale and translation (zoom and pan) values
            </summary>
        </member>
        <member name="T:RelhaxModpack.UI.EditorComboBoxItem">
            <summary>
            The EditorComboBoxItem class is a wrapper class for displaying DatabaseObjects as combo box items. The ToString() allows for display of the internal PackageName property
            </summary>
        </member>
        <member name="P:RelhaxModpack.UI.EditorComboBoxItem.Package">
            <summary>
            The DatabasePackage object that is being wrapped around
            </summary>
        </member>
        <member name="P:RelhaxModpack.UI.EditorComboBoxItem.DisplayName">
            <summary>
            A wrapper property around the Package's PackageName object
            </summary>
        </member>
        <member name="M:RelhaxModpack.UI.EditorComboBoxItem.#ctor(RelhaxModpack.Database.DatabasePackage)">
            <summary>
            Creates an instance of the EditorComboBoxItem class
            </summary>
            <param name="package">The package to wrap around</param>
        </member>
        <member name="M:RelhaxModpack.UI.EditorComboBoxItem.ToString">
            <summary>
            Allows for displaying of custom text in the Combobox
            </summary>
            <returns>The text to display in the Combobox (DisplayName property -> PackageName)</returns>
        </member>
        <member name="T:RelhaxModpack.UI.EditorSearchBoxItem">
            <summary>
            The EditorSearchBoxItem class is a wrapper class for displaying DatabaseObjects as combo box items. The ToString() allows for display of any string property
            </summary>
        </member>
        <member name="P:RelhaxModpack.UI.EditorSearchBoxItem.Package">
            <summary>
            The DatabasePackage object that is being wrapped around
            </summary>
        </member>
        <member name="P:RelhaxModpack.UI.EditorSearchBoxItem.DisplayName">
            <summary>
            The text to display in the Combobox
            </summary>
        </member>
        <member name="M:RelhaxModpack.UI.EditorSearchBoxItem.#ctor(RelhaxModpack.Database.DatabasePackage,System.String)">
            <summary>
            Creates an instance of the EditorSearchBoxItem class
            </summary>
            <param name="package">The package to wrap around</param>
            <param name="display">The text to display in the Combobox</param>
        </member>
        <member name="M:RelhaxModpack.UI.EditorSearchBoxItem.ToString">
            <summary>
            Allows for displaying of custom text in the Combobox
            </summary>
            <returns>The text to display in the Combobox</returns>
        </member>
        <member name="T:RelhaxModpack.UI.LinkButton">
            <summary>
            Wrapper class for the Button class of the System.Windows.Controls namespace. Adds the Link property.
            </summary>
            <remarks>Allows for starting a process from the Link value to a website</remarks>
        </member>
        <member name="P:RelhaxModpack.UI.LinkButton.Link">
            <summary>
            The URL for which to start the process based on
            </summary>
        </member>
        <member name="T:RelhaxModpack.UI.TaskReportState">
            <summary>
            States of the Task reporter in display to the UI
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.TaskReportState.Inactive">
            <summary>
            Not used for this installation
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.TaskReportState.Active">
            <summary>
            In use for this installation
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.TaskReportState.Complete">
            <summary>
            In use for this installation and the task completed
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.TaskReportState.Error">
            <summary>
            An error has occurred on that task
            </summary>
        </member>
        <member name="T:RelhaxModpack.UI.RelhaxInstallTaskReporter">
            <summary>
            Interaction logic for RelhaxInstallTaskReporter.xaml
            </summary>
            <summary>
            RelhaxInstallTaskReporter
            </summary>
        </member>
        <member name="M:RelhaxModpack.UI.RelhaxInstallTaskReporter.#ctor(System.String)">
            <summary>
            Create an instance of the RelhaxInstallTaskReporter and init the UI side of it
            </summary>
        </member>
        <member name="P:RelhaxModpack.UI.RelhaxInstallTaskReporter.LoadedAfterApply">
            <summary>
            Flag for when the object has been fully constructed by the UI Dispatcher.
            </summary>
            <remarks>Due to the multi-threaded nature of the progress reporting, progress may be reported before the reporting UI objects are fully constructed.
            This results in null exceptions. By using a flag to determine if the object is fully created, the reporting progresses won't try to update properties of null objects</remarks>
        </member>
        <member name="P:RelhaxModpack.UI.RelhaxInstallTaskReporter.ReportState">
            <summary>
            Controls the UI state of the thread reporter
            </summary>
        </member>
        <member name="P:RelhaxModpack.UI.RelhaxInstallTaskReporter.IsSubProgressActive">
            <summary>
            Toggle if the second progress bar should be visible
            </summary>
            <remarks>Some tasks (like zip file extraction) have "sub-tasks" that take enough time where tracking their progress is warranted.
            For example, a zip file has many files to extract. That's the main task. However, each file has bytes to extract. If the file to extract
            is large, a subtask to track the extraction progress could be useful</remarks>
        </member>
        <member name="P:RelhaxModpack.UI.RelhaxInstallTaskReporter.TaskTitle">
            <summary>
            The name of this task to display
            </summary>
        </member>
        <member name="P:RelhaxModpack.UI.RelhaxInstallTaskReporter.TaskText">
            <summary>
            The main reporting description of this task. Supports string formatting
            </summary>
        </member>
        <member name="P:RelhaxModpack.UI.RelhaxInstallTaskReporter.TaskMinimum">
            <summary>
            The minimum value for the main task progress bar
            </summary>
        </member>
        <member name="P:RelhaxModpack.UI.RelhaxInstallTaskReporter.TaskMaximum">
            <summary>
            The maximum value for the main task progress bar
            </summary>
            <remarks>This value can be changed for, example, the number of patches to run</remarks>
        </member>
        <member name="P:RelhaxModpack.UI.RelhaxInstallTaskReporter.TaskValue">
            <summary>
            The current progress of this task. Value must be between Maximum and Minimum.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UI.RelhaxInstallTaskReporter.SubTaskMinimum">
            <summary>
            The minimum value for the subtask progress bar
            </summary>
        </member>
        <member name="P:RelhaxModpack.UI.RelhaxInstallTaskReporter.SubTaskMaximum">
            <summary>
            The maximum value for the subtask progress bar
            </summary>
        </member>
        <member name="P:RelhaxModpack.UI.RelhaxInstallTaskReporter.SubTaskValue">
            <summary>
            The current value of the subtask progress. Must be between the maximum and minimum
            </summary>
        </member>
        <member name="E:RelhaxModpack.UI.RelhaxInstallTaskReporter.PropertyChanged">
            <summary>
            Event to trigger when an internal property is changed. It forces a UI update
            </summary>
        </member>
        <member name="M:RelhaxModpack.UI.RelhaxInstallTaskReporter.OnPropertyChanged(System.String)">
            <summary>
            Method to invoke the PropertyChanged event to update the UI
            </summary>
            <param name="propertyName">The name of the property that changed, to update it's UI binding</param>
        </member>
        <member name="M:RelhaxModpack.UI.RelhaxInstallTaskReporter.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.UI.RelhaxWPFCheckBox">
            <summary>
            Interaction logic for RelhaxWPFCheckBox.xaml
            </summary>
            <summary>
            RelhaxWPFCheckBox
            </summary>
        </member>
        <member name="M:RelhaxModpack.UI.RelhaxWPFCheckBox.#ctor">
            <summary>
            Create an instance of the RelhaxWPFCheckBox class
            </summary>
        </member>
        <member name="P:RelhaxModpack.UI.RelhaxWPFCheckBox.Package">
            <summary>
            The package associated with this UI component
            </summary>
        </member>
        <member name="M:RelhaxModpack.UI.RelhaxWPFCheckBox.OnEnabledChanged(System.Boolean)">
            <summary>
            Change any UI parent class properties that depends on the enabled SelectablePackage
            </summary>
            <param name="Enabled">The value from the SelectablePackage</param>
        </member>
        <member name="M:RelhaxModpack.UI.RelhaxWPFCheckBox.OnCheckedChanged(System.Boolean)">
            <summary>
            Change any UI parent class properties that depends on the checked SelectablePackage
            </summary>
            <param name="Checked">The value from the SelectablePackage</param>
        </member>
        <member name="M:RelhaxModpack.UI.RelhaxWPFCheckBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.UI.OnSelectionCommitted">
            <summary>
            Fires when the SelectionChanged event fires, but verifies that it's from user interaction (mouse of space bar/enter)
            </summary>
            <param name="source">The source of causing the event</param>
            <param name="e">The parameters from the SelectionChanged event</param>
        </member>
        <member name="T:RelhaxModpack.UI.RelhaxWPFComboBox">
            <summary>
            Interaction logic for RelhaxWPFComboBox.xaml
            </summary>
            <summary>
            RelhaxWPFComboBox
            </summary>
        </member>
        <member name="P:RelhaxModpack.UI.RelhaxWPFComboBox.AddedToList">
            <summary>
            Flag to determine if the Combobox object has been already added to the ModSelectionList window
            </summary>
            <remarks>Many components of 'single_dropDown' exist in the Combobox, and therefore the UI generation code gets run for each object.
            So, a flag is used to prevent the ComboBox being added multiple times to the window</remarks>
        </member>
        <member name="P:RelhaxModpack.UI.RelhaxWPFComboBox.SelectedIndex">
            <summary>
            Gets or sets the selected index property in the base class without invoking the selectionChanged event
            </summary>
            <seealso cref="!:https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/new-modifier"/>
        </member>
        <member name="P:RelhaxModpack.UI.RelhaxWPFComboBox.SelectedItem">
            <summary>
            Gets or sets the selected item property in the base class without invoking the selectionChanged event
            </summary>
            <seealso cref="!:https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/new-modifier"/>
        </member>
        <member name="E:RelhaxModpack.UI.RelhaxWPFComboBox.SelectionCommitted">
            <summary>
            Event to fire when the selection changes from user interaction (mouse of space bar/enter)
            </summary>
        </member>
        <member name="M:RelhaxModpack.UI.RelhaxWPFComboBox.#ctor">
            <summary>
            Create an instance of the RelhaxWPFComboBox class
            </summary>
        </member>
        <member name="M:RelhaxModpack.UI.RelhaxWPFComboBox.OnDropDownSelectionChanged(RelhaxModpack.Database.SelectablePackage,System.Boolean)">
            <summary>
            Called from the database object to update the UI on a combobox selection change
            </summary>
            <param name="spc">The SelectablePakage that caused the update</param>
            <param name="value">The checked value</param>
        </member>
        <member name="M:RelhaxModpack.UI.RelhaxWPFComboBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.UI.RelhaxWPFRadioButton">
            <summary>
            Interaction logic for RelhaxWPFRadioButton.xaml
            </summary>
            <summary>
            RelhaxWPFRadioButton
            </summary>
        </member>
        <member name="M:RelhaxModpack.UI.RelhaxWPFRadioButton.#ctor">
            <summary>
            Create an instance of the RelhaxWPFRadioButton class
            </summary>
        </member>
        <member name="P:RelhaxModpack.UI.RelhaxWPFRadioButton.Package">
            <summary>
            The package associated with this UI component
            </summary>
        </member>
        <member name="M:RelhaxModpack.UI.RelhaxWPFRadioButton.OnEnabledChanged(System.Boolean)">
            <summary>
            Change any UI parent class properties that depends on the enabled SelectablePackage
            </summary>
            <param name="Enabled">The value from the SelectablePackage</param>
        </member>
        <member name="M:RelhaxModpack.UI.RelhaxWPFRadioButton.OnCheckedChanged(System.Boolean)">
            <summary>
            Change any UI parent class properties that depends on the checked SelectablePackage
            </summary>
            <param name="Checked">The value from the SelectablePackage</param>
        </member>
        <member name="M:RelhaxModpack.UI.RelhaxWPFRadioButton.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.UI.IPackageUIComponent">
            <summary>
            The PackageUIComponent class acts as a handler for when the enabled and checked properties are set from the Package.
            It can simplify the ModSelectionList code, clean it up, allow for uniform logic for all UI,
            and allow for easy implementation of another UI.
            </summary>
        </member>
        <member name="M:RelhaxModpack.UI.IPackageUIComponent.OnEnabledChanged(System.Boolean)">
            <summary>
            Method signature for when the enabled property changes
            </summary>
            <param name="Enabled">The value of the enabled property</param>
        </member>
        <member name="T:RelhaxModpack.UI.RelhaxMediaPlayer">
            <summary>
            Interaction logic for RelhaxMediaPlayer.xaml
            </summary>
            <summary>
            RelhaxMediaPlayer
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxMediaPlayer.MediaURL">
            <summary>
            The direct link to the audio file to preview
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxMediaPlayer.AudioData">
            <summary>
            The raw audio data to parse
            </summary>
        </member>
        <member name="M:RelhaxModpack.UI.RelhaxMediaPlayer.#ctor(System.String,System.Byte[])">
            <summary>
            Creates an instance of the RelhaxMediaPlayer user control
            </summary>
            <param name="_audioData">The audio data to use in the preview</param>
            <param name="_mediaURL">The URL to the audio source. Used for audio type parsing.</param>
        </member>
        <member name="M:RelhaxModpack.UI.RelhaxMediaPlayer.StopPlaybackIfPlaying">
            <summary>
            Stops playback from an outside source, like if changing previews
            </summary>
        </member>
        <member name="M:RelhaxModpack.UI.RelhaxMediaPlayer.Dispose(System.Boolean)">
            <summary>
            Dispose of the RelhaxMediaPlayer references
            </summary>
            <param name="disposing">True to dispose of managed objects</param>
        </member>
        <member name="M:RelhaxModpack.UI.RelhaxMediaPlayer.Dispose">
            <summary>
            Dispose of the RelhaxMediaPlayer references
            </summary>
        </member>
        <member name="M:RelhaxModpack.UI.RelhaxMediaPlayer.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.UI.RelhaxProgress">
            <summary>
            The base class for reporting async progress to any UI receiver task.
            There are up to 3 levels of tasks that can be reported: child, parent, and total. At least total will be implemented an any given usage case.
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxProgress.ChildCurrent">
            <summary>
            The current completed and total child level tasks. (Tasks are arbitrary and defined by the task itself)
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxProgress.ChildTotal">
            <summary>
            The current completed and total child level tasks. (Tasks are arbitrary and defined by the task itself)
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxProgress.ChildCurrentProgress">
            <summary>
            A custom formatted string to use if the async task supports/implements it
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxProgress.ParrentCurrent">
            <summary>
            The current completed and total parent level tasks. (Tasks are arbitrary and defined by the task itself)
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxProgress.ParrentTotal">
            <summary>
            The current completed and total parent level tasks. (Tasks are arbitrary and defined by the task itself)
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxProgress.ParrentCurrentProgress">
            <summary>
            A custom formatted string to use if the async task supports/implements it
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxProgress.TotalCurrent">
            <summary>
            The current completed and total level tasks. (Tasks are arbitrary and defined by the task itself)
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxProgress.TotalTotal">
            <summary>
            The current completed and total level tasks. (Tasks are arbitrary and defined by the task itself)
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxProgress.TotalCurrentProgress">
            <summary>
            A custom formatted string to use if the async task supports/implements it
            </summary>
        </member>
        <member name="F:RelhaxModpack.UI.RelhaxProgress.ReportMessage">
            <summary>
            A custom formatted string to use if the async task supports/implements it
            </summary>
        </member>
        <member name="T:RelhaxModpack.UI.StretchingTreeView">
            <summary>
            A tree view that allows for stretch horizontal alignment of the header item
            </summary>
        </member>
        <member name="M:RelhaxModpack.UI.StretchingTreeView.GetContainerForItemOverride">
            <summary>
            Overrides the parent GetContainerForItemOverride() method
            </summary>
            <returns>A new StretchingTreeViewItem object</returns>
        </member>
        <member name="M:RelhaxModpack.UI.StretchingTreeView.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Overrides the parent IsItemItsOwnContainerOverride() method
            </summary>
            <param name="item">The item to test</param>
            <returns>True if the item is of StretchingTreeViewItem class, false otherwise</returns>
        </member>
        <member name="T:RelhaxModpack.UI.StretchingTreeViewItem">
            <summary>
            Allows for the header control to stretch all the way across a filling container
            </summary>
            <remarks>see https://stackoverflow.com/questions/35556975/horizontalalignment-stretch-not-working-in-treeviewitem </remarks>
        </member>
        <member name="M:RelhaxModpack.UI.StretchingTreeViewItem.#ctor">
            <summary>
            Create an instance of the StretchingTreeViewItem UI component
            </summary>
        </member>
        <member name="M:RelhaxModpack.UI.StretchingTreeViewItem.GetContainerForItemOverride">
            <summary>
            Overrides the parent GetContainerForItemOverride() method
            </summary>
            <returns>A new StretchingTreeViewItem object</returns>
        </member>
        <member name="M:RelhaxModpack.UI.StretchingTreeViewItem.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Overrides the parent IsItemItsOwnContainerOverride() method
            </summary>
            <param name="item">The item to test</param>
            <returns>True if the item is of StretchingTreeViewItem class, false otherwise</returns>
        </member>
        <member name="T:RelhaxModpack.Utilities.ClassEventArgs.LogMessageEventArgs">
            <summary>
            Event argument class when a log message is sent to a subscribed event
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.ClassEventArgs.LogMessageEventArgs.Message">
            <summary>
            The complete message that was written to text file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.ClassEventArgs.LogMessageEventArgs.LogLevel">
            <summary>
            The log level from the method call
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.ClassEventArgs.RelhaxInstallFinishedEventArgs">
            <summary>
            Event arguments for when the installer finishes or is ended prematurely
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.ClassEventArgs.RelhaxInstallFinishedEventArgs.ExitCode">
            <summary>
            The exit code from the installer thread
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.ClassEventArgs.RelhaxInstallFinishedEventArgs.ErrorMessage">
            <summary>
            The error message description
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.ClassEventArgs.RelhaxInstallFinishedEventArgs.ParsedCategoryList">
            <summary>
            Reference to list of parsed categories
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.ClassEventArgs.RelhaxInstallFinishedEventArgs.Dependencies">
            <summary>
            Reference to list of parsed dependencies
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.ClassEventArgs.RelhaxInstallFinishedEventArgs.GlobalDependencies">
            <summary>
            Reference to list of dependencies
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.ClassEventArgs.RelhaxInstallFinishedEventArgs.InstallFailedSteps">
            <summary>
            A list of all the steps that the installer failed at when returning back to the MainWindow
            </summary>
            <remarks>The installer creates many threads to complete different parts of the installation.
            One of more of these may fail and should be logged when the installer cleanly exists and returns to the MainWindow</remarks>
        </member>
        <member name="T:RelhaxModpack.Utilities.ClassEventArgs.SelectionListEventArgs">
            <summary>
            Event arguments for when the selection list is closed
            </summary>
            <remarks>See https://stackoverflow.com/questions/623451/how-can-i-make-my-own-event-in-c </remarks>
        </member>
        <member name="F:RelhaxModpack.Utilities.ClassEventArgs.SelectionListEventArgs.ContinueInstallation">
            <summary>
            If the installation should be continued or if the user canceled
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.ClassEventArgs.SelectionListEventArgs.UserMods">
            <summary>
            The list of use mods
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.ClassEventArgs.SelectionListEventArgs.IsAutoInstall">
            <summary>
            Flag to determine if the current installation is started from auto install mode
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.ClassEventArgs.SelectionListEventArgs.IsSelectionOutOfDate">
            <summary>
            Flag to determine if the current installation loaded with selection file
            format V3+ is out of date with what the database has
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.ClassEventArgs.EditorTransferEventArgs">
            <summary>
            Event args returned to the editor for when an FTP upload or download is complete
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.ClassEventArgs.EditorTransferEventArgs.Package">
            <summary>
            The package that was just uploaded
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.ClassEventArgs.EditorTransferEventArgs.UploadedFilename">
            <summary>
            The path to the file that was uploaded or downloaded
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.ClassEventArgs.EditorTransferEventArgs.UploadedFilepathOnline">
            <summary>
            The FTP path to the field that was uploaded or downloaded
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.ClassEventArgs.EditorTransferEventArgs.TransferMode">
            <summary>
            The Transfer mode that was used for the upload or download
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.ApplicationMode">
            <summary>
            The primary functional modes the application can run in
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.ApplicationMode.Default">
            <summary>
            The default mode of modpack installer. This is the primary focus of the application
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.ApplicationMode.Editor">
            <summary>
            The database editor mode
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.ApplicationMode.Updater">
            <summary>
            The updater mode. Used for updating the database, application, and other various functions
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.ApplicationMode.PatchDesigner">
            <summary>
            The patch designer mode. Allow the user to create and test patches
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.ApplicationMode.Patcher">
            <summary>
            The patch runner mode. Can be used in command line mode, used for patching files given patch file instructions
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.ApplicationMode.AutomationRunner">
            <summary>
            The database automation runner mode. Used for running automation sequences
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.ApplicationVersions">
            <summary>
            The build distribution version of the application
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.ApplicationVersions.Stable">
            <summary>
            The stable distribution for all users
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.ApplicationVersions.Beta">
            <summary>
            The beta distribution, for advanced users, may have new features or improvements, and bugs
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.ApplicationVersions.Alpha">
            <summary>
            The alpha distribution. Should never be publicly distributed
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.ApplyBehavior">
            <summary>
            The different ways that the apply and save database buttons can interact
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.ApplyBehavior.Default">
            <summary>
            Default behavior. The buttons do not interact.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.ApplyBehavior.ApplyTriggersSave">
            <summary>
            When you click the apply button, it also saves the database after, to the default save location.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.ApplyBehavior.SaveTriggersApply">
            <summary>
            When you click the save button, it also clicks the apply button before saving.
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.AutomationExitCode">
            <summary>
            List of possible return code error conditions that can occur when running an automation task
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.AutomationCompareMode">
            <summary>
            The different behaviors of the comparison
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.AutomationCompareMode.NoMatchContinue">
            <summary>
            If the file hashes are different, then continue the sequence. This is the primary behavior.
            </summary>
            <remarks>The implied use of this mode is that if the hashes are different, then the application
            needs to continue to update the version of the package in our database</remarks>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.AutomationCompareMode.NoMatchStop">
            <summary>
            If the file hashes are different, then stop the sequence with appropriate exit code.
            </summary>
            <remarks>If the exit code associated with this enumeration occurs, then it implies that this
            file must be manually inspected and cannot be an automated change</remarks>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.DatabaseLoadFailCode">
            <summary>
            List of possible return code error conditions that can occur when loading the database
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.DatabaseLoadFailCode.None">
            <summary>
            No error occurred
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.DownloadProgressState">
            <summary>
            The primary functional modes the application can run in
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.DownloadProgressState.None">
            <summary>
            Default download state. No activity.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.DownloadProgressState.OpenStreams">
            <summary>
            The file stream and download stream have been opened. This will only fire once per download operation.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.DownloadProgressState.Download">
            <summary>
            The file is being downloaded.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.DownloadProgressState.DownloadCompleted">
            <summary>
            The file download is completed. This will only fire once per download operation.
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.HtmlXpathParserExitCode">
            <summary>
            List of possible return code error conditions that can occur when running the htmlPath browser parser
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.HtmlXpathParserExitCode.None">
            <summary>
            No error occurred
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.InstallerExitCodes">
            <summary>
            Possible points at which the installer can fail
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.InstallerExitCodes.Success">
            <summary>
            No fail
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.InstallerExitCodes.DownloadModsError">
            <summary>
            Error with downloading mods
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.InstallerExitCodes.BackupModsError">
            <summary>
            Error with backup of mods to the RelhaxBackup folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.InstallerExitCodes.BackupDataError">
            <summary>
            Error with backing up of user cache data to temporary folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.InstallerExitCodes.ClearCacheError">
            <summary>
            Error with clearing WoT app data cache
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.InstallerExitCodes.ClearLogsError">
            <summary>
            Error with clearing game and mod logs
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.InstallerExitCodes.CleanModsError">
            <summary>
            Error with cleaning mods and res_mods folders
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.InstallerExitCodes.ExtractionError">
            <summary>
            Error with mods extraction/installation
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.InstallerExitCodes.UserExtractionError">
            <summary>
            Error with user mods extraction
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.InstallerExitCodes.RestoreUserdataError">
            <summary>
            Error with restoring user cache data from temporary folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.InstallerExitCodes.XmlUnpackError">
            <summary>
            Error with copying/extracting and unpacking binary xml files
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.InstallerExitCodes.PatchError">
            <summary>
            Error with patching configuration files
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.InstallerExitCodes.ShortcutsError">
            <summary>
            Error with creating shortcuts
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.InstallerExitCodes.ContourIconAtlasError">
            <summary>
            Error with creating the contour icon atlas files
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.InstallerExitCodes.FontInstallError">
            <summary>
            Error with installing fonts (starting the fontReg process)
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.InstallerExitCodes.TrimDownloadCacheError">
            <summary>
            Error with deleting old download files from the RelhaxDownloads folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.InstallerExitCodes.CleanupError">
            <summary>
            Error with cleanup of temporary and leftover files
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.InstallerExitCodes.UnknownError">
            <summary>
            An unknown error has occurred
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.InstructionsLoaderExitCode">
            <summary>
            The exit codes that can occur when running the instructions loader
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.InstructionsLoaderExitCode.None">
            <summary>
            No error occurred
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.InstructionsLoaderExitCode.FileSearchError">
            <summary>
            An error occurred when searching for files to load
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.InstructionsLoaderExitCode.FileLoadError">
            <summary>
            An error occurred when loading the instructions to parse
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.InstructionsLoaderExitCode.FileParseError">
            <summary>
            An error occurred when parsing the instructions to a class object
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.InstructionsType">
            <summary>
            The supported instruction types that can be loaded for execution
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.InstructionsType.Atlas">
            <summary>
            The Atlas type instructions
            </summary>
            <seealso cref="T:RelhaxModpack.Atlases.Atlas"/>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.InstructionsType.UnpackCopy">
            <summary>
            The Unpack and Copy type instructions, previously called XmlUnpack
            </summary>
            <seealso cref="T:RelhaxModpack.Xml.XmlUnpack"/>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.InstructionsType.Patch">
            <summary>
            The Patch type instructions
            </summary>
            <seealso cref="T:RelhaxModpack.Patching.Patch"/>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.InstructionsType.Shortcut">
            <summary>
            The shortcut type instructions
            </summary>
            <seealso cref="T:RelhaxModpack.Shortcuts.Shortcut"/>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.SelectionPropagationDirection">
            <summary>
            The UI checked propagation directions
            </summary>
            <remarks>When a UI package element is checked, it needs to propagate the checked behavior up or down to prevent an invalid selection</remarks>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.SelectionPropagationDirection.PropagateUp">
            <summary>
            Up the higher parent levels
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.SelectionPropagationDirection.PropagateDown">
            <summary>
            Down to lower child levels
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.EditorTransferMode">
            <summary>
            The primary functional modes the application can run in
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.EditorTransferMode.DownloadZip">
            <summary>
            Downloading a zip file from the FTP wot online folder to disk
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.EditorTransferMode.UploadZip">
            <summary>
            Uploading a zip file from disk to the FTP wot online folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.EditorTransferMode.UploadMedia">
            <summary>
            Uploading a media preview file from disk to the FTP Medias folder
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.DatabaseVersions">
            <summary>
            Database distribution levels
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.DatabaseVersions.Stable">
            <summary>
            The stable public database
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.DatabaseVersions.Beta">
            <summary>
            The unstable public beta database
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.DatabaseVersions.Test">
            <summary>
            The unstable private testing database.
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.DatabaseXmlVersion">
            <summary>
            The enumeration representations of the Xml database saving format
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.DatabaseXmlVersion.Legacy">
            <summary>
            The Legacy format. All in one document
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.DatabaseXmlVersion.OnePointOne">
            <summary>
            The 1.1 format. A root file, a file for the global and standard dependencies, and a file for each categories
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.FailCode">
            <summary>
            List of possible areas in the Atlas creation process where it could fail
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.FailCode.None">
            <summary>
            No error occurred
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.FailCode.ImageImporter">
            <summary>
            Failed to import the DDS image file to a bitmap object
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.FailCode.ImageExporter">
            <summary>
            Failed to export the bitmap object to a DDS image file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.FailCode.MapImporter">
            <summary>
            Failed to load and parse the WG xml atlas map
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.FailCode.MapExporter">
            <summary>
            Failed to parse and save the WG xml atlas map
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.FailCode.NoImages">
            <summary>
            No images to build for the atlas
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.FailCode.ImageNameCollision">
            <summary>
            Duplicate image names in list of images to pack
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.FailCode.FailedToPackImage">
            <summary>
            Failed to pack the images into one large image (most likely they don't fit into the provided dimensions)
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.FailCode.OutOfMemory32bit">
            <summary>
            Failed to compress an atlas that requires over the 2GB process limit on 32bit systems
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.FailCode.FailedToCreateBitmapAtlas">
            <summary>
            Failed to create the atlas bitmap object
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.IERegistryVersion">
            <summary>
            Registry key values used for specifying the emulated version of Internet Explorer to use
            </summary>
            <remarks>See https://stackoverflow.com/a/25650219/3128017
            and https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/general-info/ee330730(v=vs.85)?redirectedfrom=MSDN#browser_emulation
            for more information</remarks>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.IERegistryVersion.IE11Forced">
            <summary>
            Internet Explorer 11. Webpages are displayed in IE11 edge mode, regardless of the !DOCTYPE directive.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.IERegistryVersion.IE11Default">
            <summary>
            Internet Explorer 11. Webpages containing standards-based !DOCTYPE directives are displayed in IE11 edge mode. Default value for IE11.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.IERegistryVersion.IE10Forced">
            <summary>
            Internet Explorer 10. Webpages are displayed in IE10 Standards mode, regardless of the !DOCTYPE directive.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.IERegistryVersion.IE10Default">
            <summary>
            Internet Explorer 10. Webpages containing standards-based !DOCTYPE directives are displayed in IE10 Standards mode. Default value for Internet Explorer 10.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.IERegistryVersion.IE9Forced">
            <summary>
            Internet Explorer 9. Webpages are displayed in IE9 Standards mode, regardless of the !DOCTYPE directive.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.IERegistryVersion.IE9Default">
            <summary>
            Internet Explorer 9. Webpages containing standards-based !DOCTYPE directives are displayed in IE9 mode. Default value for Internet Explorer 9.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.IERegistryVersion.IE8Forced">
            <summary>
            Internet Explorer 8. Webpages are displayed in IE8 Standards mode, regardless of the !DOCTYPE directive.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.IERegistryVersion.IE8Default">
            <summary>
            Internet Explorer 8. Webpages containing standards-based !DOCTYPE directives are displayed in IE8 mode. Default value for Internet Explorer 8.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.IERegistryVersion.IE7Default">
            <summary>
            Internet Explorer 7. Webpages containing standards-based !DOCTYPE directives are displayed in IE7 Standards mode. Default value for applications hosting the WebBrowser Control.
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.KnownFolder">
            <summary>
            Standard folders registered with the system. These folders are installed with Windows Vista
            and later operating systems, and a computer will have only folders appropriate to it
            installed.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.KnownFolder.Contacts">
            <summary>
            The user's Contacts folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.KnownFolder.Desktop">
            <summary>
            The user's Desktop folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.KnownFolder.Documents">
            <summary>
            The user's Documents folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.KnownFolder.Downloads">
            <summary>
            The user's Downloads folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.KnownFolder.Favorites">
            <summary>
            The user's Favorites folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.KnownFolder.Links">
            <summary>
            The user's Links folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.KnownFolder.Music">
            <summary>
            The user's Music folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.KnownFolder.Pictures">
            <summary>
            The user's Pictures folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.KnownFolder.SavedGames">
            <summary>
            The user's Pictures folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.KnownFolder.SavedSearches">
            <summary>
            The user's SavedGames folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.KnownFolder.Videos">
            <summary>
            The user's Videos folder
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.KnownFolderFlags">
            <Summary>
             Enums for Known Folder Flags
            </Summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.Languages">
            <summary>
            List of all supported Languages in the modpack
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.Languages.English">
            <summary>
            The English language
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.Languages.German">
            <summary>
            The German language
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.Languages.Polish">
            <summary>
            The Polish language
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.Languages.French">
            <summary>
            The French language
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.Languages.Spanish">
            <summary>
            The Spanish language
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.Languages.Russian">
            <summary>
            The Russian language
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.Logfiles">
            <summary>
            The different log files currently used in the modpack
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.Logfiles.Application">
            <summary>
            The default modpack log file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.Logfiles.Installer">
            <summary>
            The log file for when installing mods
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.Logfiles.Uninstaller">
            <summary>
            The log file for when uninstalling mods
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.Logfiles.Editor">
            <summary>
            The log file for the editor
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.Logfiles.PatchDesigner">
            <summary>
            The log file for the patcher
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.Logfiles.Updater">
            <summary>
            The log file for the database update tool
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.Logfiles.AutomationRunner">
            <summary>
            The log file for the database automation runner window
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.LogLevel">
            <summary>
            The level of severity of the log message
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.LogLevel.Debug">
            <summary>
            Debug message
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.LogLevel.Info">
            <summary>
            Informational message
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.LogLevel.Warning">
            <summary>
            A problem, but can be worked around
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.LogLevel.Error">
            <summary>
            Something is wrong, something may not work
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.LogLevel.Exception">
            <summary>
            Something is wrong, something will not work
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.LogLevel.ApplicationHalt">
            <summary>
            The application is closing now
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.MacroType">
            <summary>
            The enumeration representations of the level of where the macro is defined. Implies protection level of the macro
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.MacroType.ApplicationDefined">
            <summary>
            Macro is hard-code defined inside the application. It cannot be overridden
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.MacroType.Global">
            <summary>
            Macro is defined in the global macros definition file. Can be overridden with a local value.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.MacroType.Local">
            <summary>
            Macro is defined in the local automation sequence.
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.MediaType">
            <summary>
            The supported types of media formats supported for preview in the application
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.MediaType.Unknown">
            <summary>
            Catch-all case for unknown media when parsing
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.MediaType.Picture">
            <summary>
            A direct link to a picture
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.MediaType.Webpage">
            <summary>
            A direct link to a website (like for embedding a web player)
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.MediaType.MediaFile">
            <summary>
            A direct link to an audio file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.MediaType.HTML">
            <summary>
            Raw HTML code to display in embedded browser
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.PackageTags">
            <summary>
            An enumeration to categorize the contents of a package, or its purpose
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.PackageTags.Patch">
            <summary>
            The package contains patching instructions
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.PackageTags.XmlUnpack">
            <summary>
            The package contains Xml unpacking instructions
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.PackageTags.Script">
            <summary>
            The package contains python scripts
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.PackageTags.Atlas">
            <summary>
            The package contains pre-built atlas files
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.PackageTags.AtlasBuilder">
            <summary>
            The package contains atlas creation instructions
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.PackageTags.ImagePNG">
            <summary>
            The package contains PNG image files
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.PackageTags.ImageDDS">
            <summary>
            The package contains DDS image files
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.PackageTags.GuiFlash">
            <summary>
            The package contains ActionScript swf files
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.PackageTags.GuiLoginVideo">
            <summary>
            The package contains GUI login video files
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.PackageTags.ConfigurationFileXml">
            <summary>
            The package contains xml configuration files
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.PackageTags.ConfigurationFileJson">
            <summary>
            The package contains json configuration files
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.PackageTags.ConfigurationFileXC">
            <summary>
            The package contains XVM (xc) configuration files
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.PackageTags.ConfigurationFileOther">
            <summary>
            The package contains configuration files of an other format
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.PackageTags.SoundBank">
            <summary>
            The package contains sound bank (bnk/pck) files
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.PackageTags.DependencyLink">
            <summary>
            The package is used as a dependency link or a dependency with logical requirements
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.PackageTags.OtherFiles">
            <summary>
            The package contains misc files
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.PatchExitCode">
            <summary>
            Exit codes during a patch operation
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.PatchExitCode.Success">
            <summary>
            The patch operation succeeded
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.PatchExitCode.Warning">
            <summary>
            The patch operation succeeded, but with warnings
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.PatchExitCode.Error">
            <summary>
            The patch operation did not succeeded
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.PatchRegressionTypes">
            <summary>
            The types of patch regression tests that can be performed
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.PatchRegressionTypes.json">
            <summary>
            Json regression (standard, non-XVM)
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.PatchRegressionTypes.xml">
            <summary>
            Xml regression
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.PatchRegressionTypes.regex">
            <summary>
            Regex regression
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.PatchRegressionTypes.followPath">
            <summary>
            Json regression (XVM style)
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.ReplacementTypes">
            <summary>
            The types of text macro replacements
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.ReplacementTypes.FilePath">
            <summary>
            Replacing macros with file paths
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.ReplacementTypes.PatchArguementsReplace">
            <summary>
            Replacing patch arguments of the patch object
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.ReplacementTypes.PatchFiles">
            <summary>
            Replacing modpack created macros (like [quote]) with the corresponding characters
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.ReplacementTypes.TextEscape">
            <summary>
            Replacing literal interpretations of special characters like newline and tab with escaped versions
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.ReplacementTypes.TextUnescape">
            <summary>
            Replacing escaped versions of special characters like newline and tab with the literal interpretations
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.ReplacementTypes.ZipFilePath">
            <summary>
            Replacing zip path macros with absolute extraction paths
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.ReturnCodes">
            <summary>
            Application return error codes
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.ReturnCodes.Success">
            <summary>
            No error occurred
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.ReturnCodes.LogfileError">
            <summary>
            Error with logfile creation
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.ReturnCodes.PatcherNoSpecifiedFiles">
            <summary>
            No files specified on the command line when in patch mode
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.ReturnCodes.PatcherNoPatchesParsed">
            <summary>
            No patch objects parsed when specified on the command line when in patch mode
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.SelectionTypes">
            <summary>
            The types of UI selections for building the selection tree
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.SelectionTypes.none">
            <summary>
            Used as catch-all for any mis-assigned selection types
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.SelectionTypes.single1">
            <summary>
            A radio button selection (only one of many), can have children
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.SelectionTypes.single_dropdown1">
            <summary>
            A combobox selection (only one of many), cannot have children
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.SelectionTypes.single_dropdown2">
            <summary>
            Another combobox selection (only one of many), cannot have children
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.SelectionTypes.multi">
            <summary>
            A checkbox selection (many of many), can have children
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.SelectionView">
            <summary>
            The type of selection view for how to display the selection tree
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.SelectionView.Legacy">
            <summary>
            OMC style
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.SelectionView.DefaultV2">
            <summary>
            Default WPF V2 style
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.AutomationRunMode">
            <summary>
            The run mode of the automation sequencer
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.AutomationRunMode.Debug">
            <summary>
            Debug run mode.Requires the user to manually step through each task.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.AutomationRunMode.Sequence">
            <summary>
            Gui run mode. Similar to batch, but will stop on a failed sequence.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.AutomationRunMode.Batch">
            <summary>
            Batch run mode. Requires no user interaction. The default run mode
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.SequencerExitCode">
            <summary>
            List of possible return code error conditions that can occur when running a sequence
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.UIThemes">
            <summary>
            The list of different types of themes in the application
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.UIThemes.Default">
            <summary>
            The default application theme
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.UIThemes.Dark">
            <summary>
            The dark application theme
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.UninstallerExitCodes">
            <summary>
            Possible points at which the uninstaller can fail
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.UninstallerExitCodes.GettingFilelistError">
            <summary>
            Error with getting the file lists (from folder scan and/or from log file)
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.UninstallerExitCodes.UninstallError">
            <summary>
            Error with deleting of files
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.UninstallerExitCodes.ProcessingEmptyFolders">
            <summary>
            Error with deleting of empty folders
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.UninstallerExitCodes.PerformFinalClearup">
            <summary>
            Error with cleanup of temporary and leftover files
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.UninstallerExitCodes.Success">
            <summary>
            No error occurred
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.UninstallModes">
            <summary>
            The types on uninstall mods the application supports
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.UninstallModes.Default">
            <summary>
            Default uninstall method to uninstall all modifications done by the application
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.UninstallModes.Quick">
            <summary>
            Quick uninstall method to remove 
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.Enums.XmlLoadType">
            <summary>
            Xml document load type enumeration
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.XmlLoadType.FromFile">
            <summary>
            loading Xml from a file on disk
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Enums.XmlLoadType.FromString">
            <summary>
            loading Xml from a text string
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.FileUtils">
            <summary>
            A Utility class to deal with Files and Folders
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.FileUtils.SizeSuffixes">
            <summary>
            A list of file size constructs from bytes to Yotabytes
            </summary>
            <remarks>{ "bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB" }</remarks>
        </member>
        <member name="F:RelhaxModpack.Utilities.FileUtils.BYTES_TO_MBYTES">
            <summary>
            Multiply by this to convert bytes to megabytes
            </summary>
        </member>
        <member name="M:RelhaxModpack.Utilities.FileUtils.CreateMD5Hash(System.String)">
            <summary>
            Creates an MD5 hash calculation of the input file
            </summary>
            <param name="inputFile">The path to the file to calculate</param>
            <returns></returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.FileUtils.CreateMD5Hash(System.IO.Stream)">
            <summary>
            Creates an MD5 hash calculation from and stream object
            </summary>
            <param name="stream">The stream object to calculate from</param>
            <returns>The MD5 calculated hash</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:RelhaxModpack.Utilities.FileUtils.CreateMD5HashAsync(System.String)">
            <summary>
            Creates an MD5 hash calculation of the input file
            </summary>
            <param name="inputFile">The path to the file to calculate</param>
            <returns></returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.FileUtils.CreateMD5HashAsync(System.IO.Stream)">
            <summary>
            Creates an MD5 hash calculation from and stream object
            </summary>
            <param name="stream">The stream object to calculate from</param>
            <returns>The MD5 calculated hash</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:RelhaxModpack.Utilities.FileUtils.GetStringFromZip(System.String,System.String,System.String)">
            <summary>
            Gets a zip file entry in the form of a string
            </summary>
            <param name="zipFilename">The path to the file in the zip</param>
            <param name="archivedFilename">the path to the zip file</param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.FileUtils.GetStringFromZip(Ionic.Zip.ZipFile,System.String,System.String)">
            <summary>
            Gets the string contents of a text based file inside a zip file
            </summary>
            <param name="zip">The zipfile to extract the entry from</param>
            <param name="archivedFilename">The archive path to the entry</param>
            <param name="password">The password to use when extracting the entry. Leave blank for no password</param>
            <returns></returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.FileUtils.SizeSuffix(System.UInt64,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Calculates and returns the size magnitude of the file (kilo, mega, giga...)
            </summary>
            <param name="bytes">The file size in bytes</param>
            <param name="decimalPlaces">The number of decimal places to maintain in the result</param>
            <param name="sizeSuffix">If it should return the byte symbol with the size amount (KB, MB, etc.)</param>
            <param name="ignoreSizeWarningIf0">If set to true, the application log will not show values about the passed in value for size calculation being 0. 
            File of 0 size, for example.</param>
            <returns>The string representation to decimalPlaces of the file size optionally with the bytes parameter</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.FileUtils.GetFilesize(System.String)">
            <summary>
            Gets the size of the file in bytes
            </summary>
            <param name="filepath">The string path to the file</param>
            <returns>The size of the file in bytes</returns>
            <remarks>This is a wrapper for the FileInfo.Length property</remarks>
        </member>
        <member name="M:RelhaxModpack.Utilities.FileUtils.GetValidFilename(System.String)">
            <summary>
            Checks if a filename has invalid characters and replaces them with underscores
            </summary>
            <param name="fileName">The filename to replace characters from</param>
            <returns>The filename with valid characters</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.FileUtils.FileMove(System.String,System.String,System.UInt32,System.UInt32)">
            <summary>
            Attempts to move a file from source to destination with numRetrys, with a file timeout of timeout
            </summary>
            <param name="source">The source file to move</param>
            <param name="destination">The destination of the file to move</param>
            <param name="numRetrys">The number of fail retries if it failes to move the file</param>
            <param name="timeout">The timeout, in milliseconds, to wait between faliures</param>
            <returns>True if the file was moved, false otherwise</returns>
            <remarks>This method does NOT work to move a file across physical drives. 
            This method does NOT check if the destination file already exists.</remarks>
        </member>
        <member name="M:RelhaxModpack.Utilities.FileUtils.FileDelete(System.String,System.UInt32,System.UInt32)">
            <summary>
            Tries to delete a file from the given path
            </summary>
            <param name="file">The file to delete</param>
            <param name="numRetrys">The number of retires if an exception is encountered</param>
            <param name="timeout">The number of milliseconds between retries</param>
            <returns>True is the file operation was successful, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.FileUtils.DirectoryDelete(System.String,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.String)">
            <summary>
            Deletes files in a directory
            </summary>
            <param name="folderPath">The directory to delete files in</param>
            <param name="deleteSubfolders">Toggle if the method should recursively look inside directory</param>
            <param name="deleteRoot">Toggle if the method should delete the folderPath directory</param>
            <param name="numRetrys">The number of retires to delete a file entry before failing</param>
            <param name="timeout">The time in milliseconds between retries</param>
            <param name="pattern">The pattern of files to search for in a directory</param>
            <returns>True if the complete operation was a success, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.FileUtils.DirectoryDeleteAsync(System.String,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.String)">
            <summary>
            Async wrapper around DirectoryDelete() method. Deletes files in a directory
            </summary>
            <param name="folderPath">The directory to delete files in</param>
            <param name="deleteSubfolders">Toggle if the method should recursively look inside directory</param>
            <param name="deleteRoot">Toggle if the method should delete the folderPath directory</param>
            <param name="numRetrys">The number of retires to delete a file entry before failing</param>
            <param name="timeout">The time in milliseconds between retries</param>
            <param name="pattern">The pattern of files to search for in a directory</param>
            <returns>True if the complete operation was a success, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.FileUtils.DirectoryMove(System.String,System.String,System.Boolean,System.UInt32,System.UInt32,System.String)">
            <summary>
            Move a directory and its files to a new location. Works across drive letters.
            </summary>
            <param name="source">The source path of the directory to move from</param>
            <param name="destination">The destination path of the directory to move to</param>
            <param name="recursive">Toggle if the sub-folders and files should be moved as well</param>
            <param name="numRetrys">The number of retires to delete a file entry before failing</param>
            <param name="timeout">The time in milliseconds between retries</param>
            <param name="pattern">The pattern of files to search for in a directory</param>
            <remarks>The DirectoryMove method works across drive letters and other physical separate drives because it deletes and re-creates folders rather then trying to move them</remarks>
        </member>
        <member name="M:RelhaxModpack.Utilities.FileUtils.DirectoryCopy(System.String,System.String,System.Boolean,System.UInt32,System.UInt32,System.String)">
            <summary>
            Copy a directory and its files to a new location
            </summary>
            <param name="source">The source path of the directory to move from</param>
            <param name="destination">The destination path of the directory to move to</param>
            <param name="recursive">Toggle if the sub-folders and files should be moved as well</param>
            <param name="numRetrys">The number of retires to delete a file entry before failing</param>
            <param name="timeout">The time in milliseconds between retries</param>
            <param name="pattern">The pattern of files to search for in a directory</param>
        </member>
        <member name="M:RelhaxModpack.Utilities.FileUtils.FileSearch(System.String,System.IO.SearchOption,System.Boolean,System.Boolean,System.String,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Return a list of files from a directory
            </summary>
            <param name="directoryPath">The directory to search for files</param>
            <param name="option">Specifies to search this top directory or subdirectories to the Directory.GetFiles() method</param>
            <param name="includeDirectoryRoot">Toggle if the directoryPath should be included in the list of files</param>
            <param name="filesOnly">Toggle if the returned list should be pre-filtered for only have files (no directories)</param>
            <param name="searchPattern">The search pattern for finding files in a directory</param>
            <param name="numRetrys">The number of retires to delete a file entry before failing</param>
            <param name="timeout">The time in milliseconds between retries</param>
            <param name="applydirectoryAttributeToRoot">Toggle if the "Normal" file property as assigned to these files at the same time</param>
            <returns>The list of files if the search operation was successful, otherwise null</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.FileUtils.DirectorySearch(System.String,System.IO.SearchOption,System.Boolean,System.String,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Return a list of directories from a directory
            </summary>
            <param name="directoryPath">The directory to search for files</param>
            <param name="option">Specifies to search this top directory or subdirectories to the Directory.GetFiles() method</param>
            <param name="includeDirectoryRoot">Toggle if the directoryPath should be included in the list of files</param>
            <param name="searchPattern">The search pattern for finding files in a directory</param>
            <param name="numRetrys">The number of retires to delete a file entry before failing</param>
            <param name="timeout">The time in milliseconds between retries</param>
            <param name="applydirectoryAttributeToRoot">Toggle if the "Normal" file property as assigned to these files at the same time</param>
            <returns>The list of files if the search operation was successful, otherwise null</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.FileUtils.ApplyNormalFileProperties(System.String)">
            <summary>
            Applies the "Normal" file attribute to a file
            </summary>
            <param name="file">The file to apply normal attributes to</param>
        </member>
        <member name="M:RelhaxModpack.Utilities.FileUtils.ProcessEmptyDirectories(System.String,System.Boolean,System.UInt32,System.UInt32)">
            <summary>
            Deletes any empty directories from a given path
            </summary>
            <param name="startLocation">The location to start from. Includes deleting empty directories from this point</param>
            <param name="recursive">Toggle to check inside the starting location for empty folders</param>
            <param name="numRetrys">The number of times the method should retry after receiving an exception</param>
            <param name="timeout">The time to wait between retries</param>
            <returns>True if the operation completed successfully, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.FileUtils.RemoveWoT32bit64bitPathIfExists(System.String)">
            <summary>
            Removes the directory character and Wots 'win32' and/or 'win64' directories if it exists in the string
            </summary>
            <param name="wotPath">The path to the WoT exe</param>
            <returns>The absolute directory path to the World_of_Tanks folder</returns>
            <remarks>This is for in case the user specifies the WoT exe inside the win32 and/or win64 folders</remarks>
        </member>
        <member name="M:RelhaxModpack.Utilities.FileUtils.Unpack(System.String,System.String,System.String)">
            <summary>
            Copies a file from one path or in an archive to a destination
            </summary>
            <param name="package">The zip archive to extract the file from</param>
            <param name="sourceCompletePath">The complete path to the file. Could be a path on disk, or a path in a zip archive</param>
            <param name="destinationCompletePath">The complete path to copy the destination file to</param>
        </member>
        <member name="M:RelhaxModpack.Utilities.FileUtils.GetSpecialFolderPath(RelhaxModpack.Utilities.Enums.KnownFolder)">
            <summary>
            Gets the current path to the specified known folder as currently configured. This does
            not require the folder to be existent.
            </summary>
            <param name="knownFolder">The known folder which current path will be returned.</param>
            <returns>The default path of the known folder.</returns>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">Thrown if the path
                could not be retrieved.</exception>
        </member>
        <member name="M:RelhaxModpack.Utilities.FileUtils.GetSpecialFolderPath(RelhaxModpack.Utilities.Enums.KnownFolder,System.Boolean)">
            <summary>
            Gets the current path to the specified known folder as currently configured. This does
            not require the folder to be existent.
            </summary>
            <param name="knownFolder">The known folder which current path will be returned.</param>
            <param name="defaultUser">Specifies if the paths of the default user (user profile
                template) will be used. This requires administrative rights.</param>
            <returns>The default path of the known folder.</returns>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">Thrown if the path
                could not be retrieved.</exception>
        </member>
        <member name="T:RelhaxModpack.Utilities.FtpUtils">
            <summary>
            A Utility class for handling FTP connections
            </summary>
        </member>
        <member name="M:RelhaxModpack.Utilities.FtpUtils.FtpMakeFolder(System.String,System.Net.ICredentials)">
            <summary>
            Create an FTP folder
            </summary>
            <param name="addressWithDirectory">The complete path to the folder to create</param>
            <param name="credentials">The FTP server credentials</param>
        </member>
        <member name="M:RelhaxModpack.Utilities.FtpUtils.FtpMakeFolderAsync(System.String,System.Net.ICredentials)">
            <summary>
            Create an FTP folder
            </summary>
            <param name="addressWithDirectory">The complete path to the folder to create</param>
            <param name="credentials">The FTP server credentials</param>
        </member>
        <member name="M:RelhaxModpack.Utilities.FtpUtils.FtpListFilesFolders(System.String,System.Net.ICredentials)">
            <summary>
            Get a list of files currently in an FTP folder
            </summary>
            <param name="address">The complete path to the FTP folder</param>
            <param name="credentials">The FTP server credentials</param>
            <returns>The list of files on the server, as well as the current directory "." and parent directory ".." characters</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.FtpUtils.FtpListFilesFoldersAsync(System.String,System.Net.ICredentials)">
            <summary>
            Get a list of files currently in an FTP folder
            </summary>
            <param name="address">The complete path to the FTP folder</param>
            <param name="credentials">The FTP server credentials</param>
            <returns>The list of files on the server, as well as the current directory "." and parent directory ".." characters</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.FtpUtils.FtpDeleteFile(System.String,System.Net.ICredentials)">
            <summary>
            Delete a file on an FTP server
            </summary>
            <param name="address">The complete path to the FTP file to delete</param>
            <param name="credentials">The FTP server credentials</param>
        </member>
        <member name="M:RelhaxModpack.Utilities.FtpUtils.FtpDeleteFileAsync(System.String,System.Net.ICredentials)">
            <summary>
            Delete a file on an FTP server
            </summary>
            <param name="address">The complete path to the FTP file to delete</param>
            <param name="credentials">The FTP server credentials</param>
        </member>
        <member name="M:RelhaxModpack.Utilities.FtpUtils.FtpDeleteFolder(System.String,System.Net.ICredentials)">
            <summary>
            Delete a folder on an FTP server
            </summary>
            <param name="address">The complete path to the FTP file to delete</param>
            <param name="credentials">The FTP server credentials</param>
        </member>
        <member name="M:RelhaxModpack.Utilities.FtpUtils.FtpDeleteFolderAsync(System.String,System.Net.ICredentials)">
            <summary>
            Delete a folder on an FTP server
            </summary>
            <param name="address">The complete path to the FTP file to delete</param>
            <param name="credentials">The FTP server credentials</param>
        </member>
        <member name="M:RelhaxModpack.Utilities.FtpUtils.FtpGetFilesize(System.String,System.Net.ICredentials)">
            <summary>
            Get a file size of an FTP file
            </summary>
            <param name="address">The complete path to the FTP file</param>
            <param name="credentials">The FTP server credentials</param>
            <returns>The size of the file in bytes</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.FtpUtils.FtpGetFilesizeAsync(System.String,System.Net.ICredentials)">
            <summary>
            Get a file size of an FTP file
            </summary>
            <param name="address">The complete path to the FTP file</param>
            <param name="credentials">The FTP server credentials</param>
            <returns>The size of the file in bytes</returns>
        </member>
        <member name="F:RelhaxModpack.Utilities.Structs.VersionInfos.WoTClientVersion">
            <summary>
            The WoT client version e.g. 1.5.1.3
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.Structs.VersionInfos.WoTOnlineFolderVersion">
            <summary>
            The online folder number (major game version) that contains the game zip files
            </summary>
        </member>
        <member name="M:RelhaxModpack.Utilities.Structs.VersionInfos.ToString">
            <summary>
            Overrides the ToString() function to display the two properties
            </summary>
            <returns>Displays the WoTClientVersion and WoTOnlineFolderVersion</returns>
        </member>
        <member name="T:RelhaxModpack.Utilities.MacroUtils">
            <summary>
            A utility class to handle macros
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.MacroUtils.FilePathDict">
            <summary>
            The dictionary to store filepath macros
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.MacroUtils.PatchArguementsReplaceDict">
            <summary>
            The dictionary to store patch argument (replace) macros
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.MacroUtils.PatchFilesDict">
            <summary>
            The dictionary to store patch file replacement macros
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.MacroUtils.TextUnscapeDict">
            <summary>
            The dictionary to store escaped text characters with the literal versions
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.MacroUtils.TextEscapeDict">
            <summary>
            The dictionary to store literal versions of characters with their escaped versions
            </summary>
        </member>
        <member name="M:RelhaxModpack.Utilities.MacroUtils.BuildFilepathMacroList(System.String,System.String,System.String)">
            <summary>
            Builds the Filepath macro dictionary with settings that should be parsed from the Settings class
            </summary>
        </member>
        <member name="M:RelhaxModpack.Utilities.MacroUtils.MacroReplace(System.String,RelhaxModpack.Utilities.Enums.ReplacementTypes)">
            <summary>
            Performs a replacement of macros using the specified macro replace operation
            </summary>
            <param name="inputString">The string to replace the macros of</param>
            <param name="type">The type of macro replace operation</param>
            <returns>The replaced string</returns>
        </member>
        <member name="T:RelhaxModpack.Utilities.RegistrySearch">
            <summary>
            A structure to help with searching for inside the registry by providing a base area to start, and a string search path
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.RegistrySearch.Root">
            <summary>
            Where to base the search in the registry (current_user, local_machiene, etc.)
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.RegistrySearch.Searchpath">
            <summary>
            The absolute folder path to the desired registry entries
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utilities.RegistryUtils">
            <summary>
            A utility class to handle registry requests
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.RegistryUtils.IE_BROWSER_EMULATION_REGPATH_32">
            <summary>
            The registry location, within CURRENT_USER, of where to specify the version of IE to use for embedded application browser usage
            </summary>
        </member>
        <member name="M:RelhaxModpack.Utilities.RegistryUtils.AutoFindWoTDirectoryFirst">
            <summary>
            Checks the registry to get the latest location of where WoT is installed, includes exe in the name
            </summary>
            <returns>True if operation success</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.RegistryUtils.AutoFindWoTDirectoryList">
            <summary>
            Checks the registry to get the latest location of where WoT is installed, includes exe in the name
            </summary>
            <returns>A list of all unique valid game paths</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.RegistryUtils.GetRegistryKeys(RelhaxModpack.Utilities.RegistrySearch)">
            <summary>
            Gets all registry keys that exist in the given search base and path
            </summary>
            <param name="search">The RegistrySearch structure to specify where to search and where to base the search</param>
            <returns>The RegistryKey object of the folder in registry, or null if the search failed</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.RegistryUtils.AutoFindWgcDirectory">
            <summary>
            Finds the location of the Wargaming Game center installation directory from the registry
            </summary>
            <returns>The location of wgc.exe if found, else null</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.RegistryUtils.SetRegisterKeyForIEVersion(RelhaxModpack.Utilities.Enums.IERegistryVersion)">
            <summary>
            Sets RelhaxModpack.exe in the registry to use the specified version of IE for embedded browser usage
            </summary>
            <param name="IEVersion">The version of Internet Explorer to use with the associated executable</param>
        </member>
        <member name="M:RelhaxModpack.Utilities.RegistryUtils.SetRegisterKeyForIEVersion(System.String,RelhaxModpack.Utilities.Enums.IERegistryVersion)">
            <summary>
            Sets the given executable in the registry to use the specified version of IE for embedded browser usage
            </summary>
            <param name="exeName">The name of the executable to add to the registry location as a key entry</param>
            <param name="IEVersion">The version of Internet Explorer to use with the associated executable</param>
        </member>
        <member name="T:RelhaxModpack.Utilities.CommonUtils">
            <summary>
            A utility class for static functions used in various places in the modpack
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.CommonUtils.TO_SECONDS">
            <summary>
            Multiply by this value to convert milliseconds to seconds
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.CommonUtils.TO_MINUTES">
            <summary>
            Multiply by this value to convert seconds to minuets
            </summary>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.GetAssemblyName(System.String)">
            <summary>
            Get a complete assembly name based on a matching keyword
            </summary>
            <param name="keyword">The keyword to match</param>
            <returns>The first matching assembly name, or null if no matches</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.GetApplicationVersion">
            <summary>
            Return the entire assembly version
            </summary>
            <returns>The entire assembly version string (major, minor, build, revision)</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.GetCompileTime">
            <summary>
            Return the date and time in EN-US form, the time that the application was built
            </summary>
            <returns>the application build date and time in EN-US form</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.GetManagerInfoDocumentAsync(System.Boolean)">
            <summary>
            Get the XmlDocument object of the managerInfo zip file
            </summary>
            <param name="overwrite">If the managerInfo zip file should be force refreshed</param>
            <returns>An xmlDocument object of manager_version.xml</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.GetManagerInfoZipfileAsync(System.Boolean)">
            <summary>
            Download and store the latest managerInfo zip file
            </summary>
            <param name="overwrite">Set to true to force a download of the latest version</param>
            <returns>The mangerInfo zip file in the Ionic.Zipfile object</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.IsManagerUptoDate(System.String,RelhaxModpack.Utilities.Enums.ApplicationVersions)">
            <summary>
            Compares if the current application version is the same as the version checked from online
            </summary>
            <param name="currentVersion">The string representation of the latest modpack application version</param>
            <param name="applicationVersion">Control if the update check will use the beta or stable distribution channel</param>
            <returns>True if the manager string versions are the same, false otherwise</returns>
            <remarks>IsManagerUptoDate will return false if it fails to get the latest managerInfo zip file</remarks>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.ParseBool(System.String,System.Boolean)">
            <summary>
            Try to parse a boolean value based on string input
            </summary>
            <param name="input">The string to try to parse</param>
            <param name="defaultValue">The default value to use if parsing fails</param>
            <returns>The bool value of the input string, or the default value if parsing fails</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.ParseBool(System.String,System.Boolean@,System.Boolean)">
            <summary>
            Try to parse a boolean value based on string input
            </summary>
            <param name="input">The string to try to parse</param>
            <param name="result">The result value</param>
            <param name="defaultValue">The default value for result, if parse fails</param>
            <returns>Returns if the TryParse() worked</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.ParseInt(System.String,System.Int32)">
            <summary>
            Try to parse an integer value based on string input
            </summary>
            <param name="input">The string to try to parse</param>
            <param name="defaultValue">The default value to use if parsing fails</param>
            <returns>The int value of the input string, or the default value if parsing fails</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.ParseInt(System.String,System.Int32@,System.Int32)">
            <summary>
            Try to parse an integer value based on string input
            </summary>
            <param name="input">The string to try to parse</param>
            <param name="result">The result value</param>
            <param name="defaultValue">The default value for result, if parse fails</param>
            <returns>Returns if the TryParse() worked</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.ParseFloat(System.String,System.Single)">
            <summary>
            Try to parse a float value based on string input
            </summary>
            <param name="input">The string to try to parse</param>
            <param name="defaultValue">The default value to use if parsing fails</param>
            <returns>The float value of the input string, or the default value if parsing fails</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.ParseFloat(System.String,System.Single@,System.Single)">
            <summary>
            Try to parse a float value based on string input
            </summary>
            <param name="input">The string to try to parse</param>
            <param name="result">The result value</param>
            <param name="defaultValue">The default value for result, if parse fails</param>
            <returns>Returns if the TryParse() worked</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.ParseLong(System.String,System.Int64)">
            <summary>
            Try to parse a long value based on string input
            </summary>
            <param name="input">The string to try to parse</param>
            <param name="defaultValue">The default value to use if parsing fails</param>
            <returns>The float value of the input string, or the default value if parsing fails</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.ParseLong(System.String,System.Int64@,System.Int64)">
            <summary>
            Try to parse a long value based on string input
            </summary>
            <param name="input">The string to try to parse</param>
            <param name="result">The result value</param>
            <param name="defaultValue">The default value for result, if parse fails</param>
            <returns>Returns if the TryParse() worked</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.ParseuLong(System.String,System.UInt64)">
            <summary>
            Try to parse an unsigned long value based on string input
            </summary>
            <param name="input">The string to try to parse</param>
            <param name="defaultValue">The default value to use if parsing fails</param>
            <returns>The float value of the input string, or the default value if parsing fails</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.ParseuLong(System.String,System.UInt64@,System.UInt64)">
            <summary>
            Try to parse an unsigned long value based on string input
            </summary>
            <param name="input">The string to try to parse</param>
            <param name="result">The result value</param>
            <param name="defaultValue">The default value for result, if parse fails</param>
            <returns>Returns if the TryParse() worked</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.DownloadStringsFromUrls(System.Collections.Generic.List{System.String})">
            <summary>
            Downloads an array of strings from a list of download URLs all at the same time
            </summary>
            <param name="downloadURLs">the list of string URLs to download</param>
            <returns>An array of downloaded strings, or empty for each string that failed to download</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.DownloadStringsFromUrlsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Downloads an array of strings from a list of download URLs all at the same time
            </summary>
            <param name="downloadURLs">the list of string URLs to download</param>
            <returns>An array of downloaded strings, or empty for each string that failed to download</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.BitmapToImageSource(System.Drawing.Bitmap)">
            <summary>
            Converts a Bitmap object to a BitmapImage object
            </summary>
            <param name="bitmap">The Bitmap object to convert</param>
            <returns>The BitmapImage object</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.RandomString(System.Int32,System.String)">
            <summary>
            Creates a string of random characters
            </summary>
            <param name="length">The number of characters to create the random string</param>
            <param name="chars">The list of characters to use for making the random string</param>
            <returns>The random string</returns>
            <remarks>See https://stackoverflow.com/questions/1344221/how-can-i-generate-random-alphanumeric-strings-in-c </remarks>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.GenerateUID">
            <summary>
            Generates a Unique IDentifier for a package using the constant defined number of string and character selections
            </summary>
            <returns>a Unique IDentifier for a package</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.GenerateUID(System.Collections.Generic.List{RelhaxModpack.Database.DatabasePackage})">
            <summary>
            Generates a Unique IDentifier for a package using the constant defined number of string and character selections
            while verifying that it's unique against a given list
            </summary>
            <param name="allPackages">A list of packages to test to make sure the UID is unique</param>
            <returns>A guaranteed unique ID that does not exist in the list</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.CompareVersions(System.String,System.String)">
            <summary>
            Compare versions of form "1,2,3,4" or "1.2.3.4". Throws FormatException
            in case of invalid version. See function comments for more informations and samples.
            </summary>
            <param name="strA">the first version</param>
            <param name="strB">the second version</param>
            <returns>less than zero if strA is less than strB, equal to zero if
            strA equals strB, and greater than zero if strA is greater than strB</returns>
            <remarks>
            See https://stackoverflow.com/questions/30494/compare-version-identifiers
            Samples:
            strA        | strB
            1.0.0.0     | 1.0.0.1 = -1
            1.0.0.1     | 1.0.0.0 =  1
            1.0.0.0     | 1.0.0.0 =  0
            1, 0.0.0    | 1.0.0.0 =  0
            9, 5, 1, 44 | 3.4.5.6 =  1
            1, 5, 1, 44 | 3.4.5.6 = -1
            6,5,4,3     | 6.5.4.3 =  0
            </remarks>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.GetCurrentUniversalFiletimeTimestamp">
            <summary>
            Gets the current time in the form of universal time
            </summary>
            <returns>the universal time of now</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.ConvertFiletimeTimestampToDate(System.Int64)">
            <summary>
            Converts a timestamp value to a string representation
            </summary>
            <param name="timestamp">The timestamp to convert</param>
            <returns>The string representation of the timestamp</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.Base64Encode(System.String)">
            <summary>
            Encode a plain text string into base64 UTF8 encoding
            </summary>
            <param name="plainText">The plain text string</param>
            <returns>The UTF8 base64 encoded version</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.Base64Decode(System.String)">
            <summary>
            Decode a base64 UTF8 encoded string into plain text
            </summary>
            <param name="base64EncodedData">The base64 stirng</param>
            <returns>The plain text version</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.GetProcess(System.String,System.String)">
            <summary>
            Checks if a process is running on the system
            </summary>
            <param name="processName">The name of the process</param>
            <param name="pathToMatch">(Optional) The directory that the process is running from</param>
            <returns>The Process object that matches, or null if no matches</returns>
        </member>
        <member name="T:RelhaxModpack.Utilities.CommonUtils.ProcessAccessFlags">
            <summary>
            An enumeration of desired access rights to ask for information when opening a process's info
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.CommonUtils.ProcessAccessFlags.All">
            <summary>
            All process info
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.CommonUtils.ProcessAccessFlags.Terminate">
            <summary>
            Terminate the process
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.CommonUtils.ProcessAccessFlags.CreateThread">
            <summary>
            Create a thread from the process
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.CommonUtils.ProcessAccessFlags.VirtualMemoryOperation">
            <summary>
            View the process's virtual memory operations
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.CommonUtils.ProcessAccessFlags.VirtualMemoryRead">
            <summary>
            View the process's virtual memory reads
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.CommonUtils.ProcessAccessFlags.VirtualMemoryWrite">
            <summary>
            View the process's virtual memoty writes
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.CommonUtils.ProcessAccessFlags.DuplicateHandle">
            <summary>
            Ability to create a duplicate process handle
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.CommonUtils.ProcessAccessFlags.CreateProcess">
            <summary>
            Ability for process to create processes
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.CommonUtils.ProcessAccessFlags.SetQuota">
            <summary>
            Set quotas on the process
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.CommonUtils.ProcessAccessFlags.SetInformation">
            <summary>
            Set information about the process
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.CommonUtils.ProcessAccessFlags.QueryInformation">
            <summary>
            Query information about the process
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.CommonUtils.ProcessAccessFlags.QueryLimitedInformation">
            <summary>
            Query information about the process that does not require administrator rights
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utilities.CommonUtils.ProcessAccessFlags.Synchronize">
            <summary>
            Synchronize rights
            </summary>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.GetExecutablePathAboveVista(System.Int32)">
            <summary>
            Gets the path to the application, including exe filename, based on the process ID
            </summary>
            <param name="ProcessId">The process ID from Process object</param>
            <returns>The path to the process's exe</returns>
            <remarks>This can throw a Win32Exception if the method fails.
            It uses kernel32.dll p/invoke methods to perform the operation.
            Does not work below windows vista.</remarks>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.IsProcessRunning(System.String,System.String)">
            <summary>
            Wrapper for IsProcessRunning() to return boolean type
            </summary>
            <param name="processName">The name of the process</param>
            <param name="pathToMatch">(Optional) The directory that the process is running from</param>
            <returns>True if match, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.StartProcess(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Start a process
            </summary>
            <param name="startInfo">The ProcessStartInfo parameters object</param>
            <returns>True if process start was successful, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.StartProcess(System.String)">
            <summary>
            Start a process
            </summary>
            <param name="command">The entire command as a string style commandline</param>
            <returns>True if process start was successful, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.OpenInGoogleTranslate(System.String)">
            <summary>
            Opens the selected text in Google translate web page
            </summary>
            <param name="message">The text to translate</param>
            <returns></returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.EmptyNullStringCheck(System.String,System.String)">
            <summary>
            Tests if an input string is null or empty
            </summary>
            <param name="stringToTest">The string to test</param>
            <param name="emptyNullReturn">The emptyNullReturn value if the string is null or empty, stringToTest otherwise</param>
            <returns></returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.GetExecutingMethodName">
            <summary>
            Gets the name of the method above this
            </summary>
            <returns>The name of the calling method on this method</returns>
            <remarks>This is mostly used for in logging, to log the name of the method
            See https://stackoverflow.com/a/2652481/3128017 </remarks>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.GetExecutingClassName">
            <summary>
            Gets the name of the class above this
            </summary>
            <returns>The name of the calling class on this method call</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.ClearCache">
            <summary>
            Clear the WoT appdata cache folder
            </summary>
            <returns>True if clearing operation was sucessfull, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.SetObjectProperty(System.Object,System.Reflection.PropertyInfo,System.String)">
            <summary>
            Attempts to set a property value of a class or structure object instance with the string valueToSet
            </summary>
            <param name="objectToSetValueOn">The class or structure object instance to have property set</param>
            <param name="propertyInfoOfObject">The property information/metadata of the property to set on the object</param>
            <param name="valueToSet">The string version of the value to set</param>
            <returns>False if the value could not be set, true otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.SetObjectField(System.Object,System.Reflection.FieldInfo,System.String)">
            <summary>
            Attempts to set a field value of a class or structure object instance with the string valueToSet
            </summary>
            <param name="objectToSetValueOn">The class or structure object instance to have property set</param>
            <param name="fieldInfoOfObject">The field information/metadata of the field to set on the object</param>
            <param name="valueToSet">The string version of the value to set</param>
            <returns>False if the value could not be set, true otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.SetObjectValue(System.Type,System.String,System.Object@)">
            <summary>
            Attempts to create an instance of a value type object and set it's value based on valueToSet for objectType
            </summary>
            <param name="objectType">The type of value object to create</param>
            <param name="valueToSet">The string version of the value to set</param>
            <param name="newObject">The new value type object created</param>
            <returns>False if the value could not be set, true otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.SetListEntries(System.Collections.IList,System.String,System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.String,System.Collections.Generic.Dictionary{System.String,System.Type})">
            <summary>
            Creates all database entries in a list property, parsing each list entry object by xmlListItems
            </summary>
            <param name="listProperty">A generic representation of a initialized, empty list</param>
            <param name="xmlListItems">The xml element holder for the property object types, for example Medias element holder</param>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.SetListEntries(RelhaxModpack.Common.IComponentWithID,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.String,System.Collections.Generic.Dictionary{System.String,System.Type})">
            <summary>
            Creates all database entries in a list property, parsing each list entry object by xmlListItems
            </summary>
            <param name="databasePackageObject">The database package object with the list property, for example SelectablePackage</param>
            <param name="listPropertyInfo">The property metadata/info about the list property, for example Medias</param>
            <param name="xmlListItems">The xml element holder for the property object types, for example Medias element holder</param>
        </member>
        <member name="M:RelhaxModpack.Utilities.CommonUtils.GetEnumList``1">
            <summary>
            Gets a list of all types that can exist in an enumeration
            </summary>
            <typeparam name="T">The type of the enumeration to get a list of</typeparam>
            <returns>A list of all enumeration values of that type</returns>
            <remarks>See https://stackoverflow.com/a/801058/3128017 </remarks>
        </member>
        <member name="T:RelhaxModpack.RelhaxZipFile">
            <summary>
            A wrapper class around the Ionic.Zip.Zipfile with the purpose of saving the thread ID that the zip file belongs to.
            </summary>
        </member>
        <member name="F:RelhaxModpack.RelhaxZipFile.ThreadID">
            <summary>
            The ID number of the thread that the zip file belongs to.
            </summary>
        </member>
        <member name="F:RelhaxModpack.RelhaxZipFile.IsUserMod">
            <summary>
            Flag for if this zip file is a user mod.
            </summary>
            <remarks>User mods are treated differently then regular mods. They have no valid threadID, and should not be deleted if the extraction fails.</remarks>
        </member>
        <member name="M:RelhaxModpack.RelhaxZipFile.#ctor(System.String)">
            <summary>
            Create an instance of a RelhaxZipFile.
            </summary>
            <param name="fileName">The name of the file to send to the base constructor. File must already exist.</param>
        </member>
        <member name="T:RelhaxModpack.InstallEngine">
            <summary>
            The install engine is the root component to the entire installation process. It manages install tasks, threading, and resource usage from start to finish.
            </summary>
        </member>
        <member name="P:RelhaxModpack.InstallEngine.OrderedPackagesToInstall">
            <summary>
            Get the list of packages that have zip files to install and are enabled, and ordered into installGroups
            </summary>
        </member>
        <member name="P:RelhaxModpack.InstallEngine.PackagesToInstall">
            <summary>
            Get the list of packages to install that are enabled.
            </summary>
        </member>
        <member name="P:RelhaxModpack.InstallEngine.PackagesToInstallWithZipfile">
            <summary>
            List of packages that have zip files to install and are enabled (and checked if selectable).
            </summary>
        </member>
        <member name="P:RelhaxModpack.InstallEngine.UserPackagesToInstall">
            <summary>
            List of user packages placed in the RelhaxUserMods folder and selected for installation.
            </summary>
        </member>
        <member name="P:RelhaxModpack.InstallEngine.ParsedCategoryList">
            <summary>
            A reference for the list of parsed categories.
            </summary>
        </member>
        <member name="P:RelhaxModpack.InstallEngine.Dependencies">
            <summary>
            A reference for the list of parsed dependencies.
            </summary>
        </member>
        <member name="P:RelhaxModpack.InstallEngine.GlobalDependencies">
            <summary>
            A reference for the list of parsed globally installed dependencies.
            </summary>
        </member>
        <member name="P:RelhaxModpack.InstallEngine.DatabaseManager">
            <summary>
            Get or set the DatabaseManager used to get the installation lists.
            </summary>
        </member>
        <member name="P:RelhaxModpack.InstallEngine.ModpackSettings">
            <summary>
            Get or set the Modpack settings configuration class.
            </summary>
        </member>
        <member name="P:RelhaxModpack.InstallEngine.CommandLineSettings">
            <summary>
            Get or set Command line settings configuration class.
            </summary>
        </member>
        <member name="P:RelhaxModpack.InstallEngine.DatabaseVersion">
            <summary>
            Get or set the version of the database that was installed.
            </summary>
            <remarks>This is only used for writing into the install's log file.</remarks>
        </member>
        <member name="P:RelhaxModpack.InstallEngine.WoTClientVersion">
            <summary>
            Get or set the version of the WoT client that is being installed for. This also is used to set the version number of the mods and res_mods folders.
            </summary>
        </member>
        <member name="P:RelhaxModpack.InstallEngine.WoTDirectory">
            <summary>
            Get or set the root WoT client install directory to install to.
            </summary>
        </member>
        <member name="P:RelhaxModpack.InstallEngine.DownloadManager">
            <summary>
            Get or set the DownloadManger instance used for downloading (and waiting on) packages.
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallEngine.TriggerContouricons">
            <summary>
            The event name for starting the contour icon atlas building.
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallEngine.TriggerInstallFonts">
            <summary>
            The event name for starting the installation of fonts.
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallEngine.TriggerCreateShortcuts">
            <summary>
            The event name for starting the creation of shortcuts.
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallEngine.CompleteTriggerList">
            <summary>
            A list of all current trigger event names.
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallEngine.Triggers">
            <summary>
            A list of all current trigger event objects. For more information, see the trigger class.
            </summary>
            <seealso cref="T:RelhaxModpack.Database.Trigger"/>
        </member>
        <member name="F:RelhaxModpack.InstallEngine.CancellationToken">
            <summary>
            The token used for handling and checking for cancellation requests.
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallEngine.DisableTriggersForInstall">
            <summary>
            Flag for if the install engine should honor the user setting or if installing user packages, disable triggers anyways.
            </summary>
        </member>
        <member name="M:RelhaxModpack.InstallEngine.#ctor(RelhaxModpack.Settings.ModpackSettings,RelhaxModpack.Settings.CommandLineSettings)">
            <summary>
            Creates an instance of the InstallEngine class.
            </summary>
            <param name="modpackSettings">The modpack settings configuration class.</param>
            <param name="commandLineSettings">The command line settings configuration class.</param>
        </member>
        <member name="M:RelhaxModpack.InstallEngine.RunInstallationAsync(System.IProgress{RelhaxModpack.UI.RelhaxInstallerProgress})">
            <summary>
            Run an asynchronous installation.
            </summary>
            <param name="progress">The progress reporter object.</param>
            <returns>A RelhaxInstallFinishedEventArgs object contain installation data for if the installation succeed or ended prematurely.</returns>
        </member>
        <member name="M:RelhaxModpack.InstallEngine.RunUninstallationAsync(System.IProgress{RelhaxModpack.UI.RelhaxInstallerProgress})">
            <summary>
            Run an asynchronous uninstallation.
            </summary>
            <param name="progress">The progress reporter object.</param>
            <returns>A RelhaxInstallFinishedEventArgs object contain uninstallation data for if the uninstallation succeed or ended prematurely.</returns>
        </member>
        <member name="M:RelhaxModpack.InstallEngine.UninstallMods(RelhaxModpack.Utilities.Enums.UninstallModes,System.Boolean)">
            <summary>
            Deletes mod files from the current game client
            </summary>
            <param name="UninstallMode">Selects which uninstall method</param>
            <param name="logToUninstaller">if to </param>
            <returns>true if the uninstall processes completed, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.InstallEngine.Dispose">
            <summary>
            This code added to correctly implement the disposable pattern.
            </summary>
        </member>
        <member name="T:RelhaxModpack.Patching.Patch">
            <summary>
            A patch is an instruction object of how to modify a text file. Can be a json, xml, or plain text file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Patching.Patch.TypeRegex1">
            <summary>
            One of two string values used for regex type patches
            </summary>
        </member>
        <member name="F:RelhaxModpack.Patching.Patch.TypeRegex2">
            <summary>
            One of two string values used for regex type patches
            </summary>
        </member>
        <member name="F:RelhaxModpack.Patching.Patch.TypeXml">
            <summary>
            The string value used for xml type patches
            </summary>
        </member>
        <member name="F:RelhaxModpack.Patching.Patch.TypeJson">
            <summary>
            The string value used for json type patches
            </summary>
        </member>
        <member name="F:RelhaxModpack.Patching.Patch.TypeXvm">
            <summary>
            The string value used for xvm type legacy patches
            </summary>
        </member>
        <member name="F:RelhaxModpack.Patching.Patch.ValidXmlModes">
            <summary>
            A list of all supported xml patch operation modes
            </summary>
        </member>
        <member name="F:RelhaxModpack.Patching.Patch.ValidJsonModes">
            <summary>
            A list of all supported json patch operation modes
            </summary>
        </member>
        <member name="F:RelhaxModpack.Patching.Patch.PatchXmlSearchPath">
            <summary>
            For patch instruction files, the xpath to return a list of all patch instruction xml elements.
            </summary>
            <remarks>As of the time of this writing, all instructions are now stored inside the database and are no longer separate xml files in the package zip files.</remarks>
        </member>
        <member name="M:RelhaxModpack.Patching.Patch.#ctor">
            <summary>
            Create an instance of the Patch class
            </summary>
        </member>
        <member name="M:RelhaxModpack.Patching.Patch.#ctor(RelhaxModpack.Patching.Patch)">
            <summary>
            Create an instance of the Patch class, copying values from a given patch.
            </summary>
            <param name="patchToCopy">The Patch instance to copy from.</param>
        </member>
        <member name="M:RelhaxModpack.Patching.Patch.Copy(RelhaxModpack.Patching.Patch)">
            <summary>
            Make a copy of a Patch instance
            </summary>
            <param name="shortcutToCopy">The Patch instance to copy from.</param>
            <returns>A copy of the given Patch instance.</returns>
        </member>
        <member name="P:RelhaxModpack.Patching.Patch.RootObjectPath">
            <summary>
            The xpath to use to get a list of xml element objects that represent each instruction to serialize.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Patching.Patch.PropertiesToSerialize">
            <summary>
            Defines a list of properties in the class to be serialized into xml elements.
            </summary>
            <returns>A list of string property names.</returns>
            <remarks>Xml elements may always exist, but they may have empty inner text values.</remarks>
        </member>
        <member name="M:RelhaxModpack.Patching.Patch.GetXmlDatabasePropertiesV1Dot0">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.0 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Patching.Patch.GetXmlDatabasePropertiesV1Dot1">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.1 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Patching.Patch.GetXmlDatabasePropertiesV1Dot2">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.2 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="P:RelhaxModpack.Patching.Patch.Type">
            <summary>
            The type of patch, xml or regex (direct text replacement)
            </summary>
        </member>
        <member name="P:RelhaxModpack.Patching.Patch.Mode">
            <summary>
            If not regex, the mode that the xml patcher should use.<para/>Examples: add xml node, remove xml node, edit xml node
            </summary>
        </member>
        <member name="P:RelhaxModpack.Patching.Patch.PatchPath">
            <summary>
            The starting path to the file
            </summary>
        </member>
        <member name="P:RelhaxModpack.Patching.Patch.File">
            <summary>
            The path to the file, relative to patchPath
            </summary>
        </member>
        <member name="P:RelhaxModpack.Patching.Patch.CompletePath">
            <summary>
            The complete path to the file, saved at parse time
            </summary>
        </member>
        <member name="P:RelhaxModpack.Patching.Patch.Version">
            <summary>
            The version of the patch for parsing. Allows for multiple variations. Default to 1
            </summary>
        </member>
        <member name="P:RelhaxModpack.Patching.Patch.Path">
            <summary>
            If xml or json, the xml xpath or json jsonpath to the node
            </summary>
        </member>
        <member name="P:RelhaxModpack.Patching.Patch.Lines">
            <summary>
            If regex, the optional specific lines in the text file
            </summary>
        </member>
        <member name="P:RelhaxModpack.Patching.Patch.Line">
            <summary>
            If a regex patch, a comma seperated list of line numbers to attempt to apply the patch on.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Patching.Patch.Search">
            <summary>
            The node inner text (xml) or regex criteria to search for
            </summary>
        </member>
        <member name="P:RelhaxModpack.Patching.Patch.Replace">
            <summary>
            The text to replace the found search text with
            </summary>
        </member>
        <member name="P:RelhaxModpack.Patching.Patch.FollowPath">
            <summary>
            For json patches, if it should use the new method of separating the path for getting the xvm references
            </summary>
        </member>
        <member name="P:RelhaxModpack.Patching.Patch.DumpInfoToLog">
            <summary>
            Gets a log formatted string for debugging containing key object name and values.
            </summary>
            <remarks>If debug output is enabled for the log file during an installation, then each instruction will have it's DumpInfoToLog property called.</remarks>
        </member>
        <member name="P:RelhaxModpack.Patching.Patch.ListboxDisplay">
            <summary>
            Gets a listbox style UI element display-ready text
            </summary>
        </member>
        <member name="P:RelhaxModpack.Patching.Patch.IsValidForSave">
            <summary>
            Gets a value that determines if all required properties are filed out to be saved to a patch file
            </summary>
        </member>
        <member name="M:RelhaxModpack.Patching.Patch.GetInvalidPatchesForSave(RelhaxModpack.Patching.Patch[])">
            <summary>
            Returns a list of patch objects that are not ready to be written to a patch file
            </summary>
            <param name="patchList">The list of patches to check</param>
            <returns>A new list of patches that are not valid to save, or an empty list of all patches are valid</returns>
            <seealso cref="P:RelhaxModpack.Patching.Patch.IsValidForSave"/>
        </member>
        <member name="M:RelhaxModpack.Patching.Patch.GetInvalidPatchesForSave(System.Collections.Generic.List{RelhaxModpack.Patching.Patch})">
            <summary>
            Returns a list of patch objects that are not ready to be written to a patch file
            </summary>
            <param name="patchList">The list of patches to check</param>
            <returns>A new list of patches that are not valid to save, or an empty list of all patches are valid</returns>
            <seealso cref="P:RelhaxModpack.Patching.Patch.IsValidForSave"/>
        </member>
        <member name="M:RelhaxModpack.Patching.Patch.GetInvalidPatchesForSave(System.Windows.Controls.ItemCollection)">
            <summary>
            Returns a list of patch objects that are not ready to be written to a patch file
            </summary>
            <param name="patchList">The list of patches to check</param>
            <returns>A new list of patches that are not valid to save, or an empty list of all patches are valid</returns>
            <seealso cref="P:RelhaxModpack.Patching.Patch.IsValidForSave"/>
        </member>
        <member name="M:RelhaxModpack.Patching.Patch.InstructionsEqual(RelhaxModpack.Installer.Instruction)">
            <summary>
            Compares two instructions to determine if their values are equal.
            </summary>
            <param name="instructionToCompare">The instruction to compare against.</param>
            <returns>True if the compared values are equal, false otherwise.</returns>
        </member>
        <member name="M:RelhaxModpack.Patching.Patch.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>The patch's target file name, or "(empty)", if no target file name is given.</returns>
        </member>
        <member name="T:RelhaxModpack.Patching.Patcher">
            <summary>
            A class for handling patch operations
            </summary>
        </member>
        <member name="P:RelhaxModpack.Patching.Patcher.DebugMode">
            <summary>
            Gets or sets if the patcher should run in debug mode
            </summary>
            <remarks>Debug mode will create additional files as individual steps of the patch process are outputted for debug</remarks>
        </member>
        <member name="P:RelhaxModpack.Patching.Patcher.WoTDirectory">
            <summary>
            The WoT client directory path to use for the {app} Patchpath parameter.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Patching.Patcher.PatchJsonNullEscape">
            <summary>
            Provides the ability to insert a 'null' value into json configurations
            </summary>
        </member>
        <member name="M:RelhaxModpack.Patching.Patcher.RunPatchFromCommandline(RelhaxModpack.Patching.Patch)">
            <summary>
            Runs a patch operation, but first parsing the 'app' and 'versiondir' keywords
            </summary>
            <param name="p">The patch instructions object</param>
            <returns>The operation exit code</returns>
        </member>
        <member name="M:RelhaxModpack.Patching.Patcher.RunPatchFromInstaller(RelhaxModpack.Patching.Patch)">
            <summary>
            Run a patch operation from the Installer.
            </summary>
            <param name="p">The patch instructions object</param>
            <returns>The operation exit code</returns>
        </member>
        <member name="M:RelhaxModpack.Patching.Patcher.RunPatchFromEditor(RelhaxModpack.Patching.Patch)">
            <summary>
            Run a patch operation from the Editor.
            </summary>
            <param name="p">The patch instructions object</param>
            <returns>The operation exit code</returns>
        </member>
        <member name="M:RelhaxModpack.Patching.Patcher.RunPatch(RelhaxModpack.Patching.Patch)">
            <summary>
            Run a patch operation
            </summary>
            <param name="p">The patch instructions object</param>
            <returns>The operation exit code</returns>
        </member>
        <member name="M:RelhaxModpack.Patching.Patcher.XMLPatch(RelhaxModpack.Patching.Patch)">
            <summary>
            Run an XML patch operation
            </summary>
            <param name="p">The patch instructions object</param>
            <returns>The operation exit code</returns>
        </member>
        <member name="M:RelhaxModpack.Patching.Patcher.RegxPatch(RelhaxModpack.Patching.Patch,System.Int32[])">
            <summary>
            Run a regex patch operation
            </summary>
            <param name="p">The patch instructions object</param>
            <param name="lines">The lines to patch on the file.</param>
            <returns>The operation exit code</returns>
            <remarks>Can be used to "batch patch" an xml or json file. See Database examples.
            Use -1 to indicate the whole file is being patched. Use 0 to check every line.</remarks>
        </member>
        <member name="M:RelhaxModpack.Patching.Patcher.JsonPatch(RelhaxModpack.Patching.Patch)">
            <summary>
            Run a Json patch operation
            </summary>
            <param name="p">The patch instructions object</param>
            <returns>The operation exit code</returns>
        </member>
        <member name="M:RelhaxModpack.Patching.Patcher.GetXvmFolderName">
            <summary>
            Gets the absolute path to the Xvm configuration folder
            </summary>
            <returns>The absolute path of the Xvm configuration folder if it exists, otherwise returns "default"</returns>
        </member>
        <member name="T:RelhaxModpack.Shortcuts.Shortcut">
            <summary>
            Represents instructions on how to create a shortcut
            </summary>
        </member>
        <member name="F:RelhaxModpack.Shortcuts.Shortcut.ShortcutXmlSearchPath">
            <summary>
            For shortcut instruction files, the xpath to return a list of all shortcut instruction xml elements.
            </summary>
            <remarks>As of the time of this writing, all instructions are now stored inside the database and are no longer separate xml files in the package zip files.</remarks>
        </member>
        <member name="M:RelhaxModpack.Shortcuts.Shortcut.#ctor">
            <summary>
            Creates an instance of the Shortcut class.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Shortcuts.Shortcut.#ctor(RelhaxModpack.Shortcuts.Shortcut)">
            <summary>
            Creates an instance of the Shortcut class, copying values form a given Shortcut object.
            </summary>
            <param name="shortcutToCopy">The Shortcut object to copy.</param>
        </member>
        <member name="M:RelhaxModpack.Shortcuts.Shortcut.Copy(RelhaxModpack.Shortcuts.Shortcut)">
            <summary>
            Creates a copy of the given Shortcut object.
            </summary>
            <param name="shortcutToCopy">The Shortcut object to copy.</param>
            <returns>A copy of the Shortcut object.</returns>
        </member>
        <member name="P:RelhaxModpack.Shortcuts.Shortcut.RootObjectPath">
            <summary>
            The xpath to use to get a list of xml element objects that represent each instruction to serialize.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Shortcuts.Shortcut.PropertiesToSerialize">
            <summary>
            Defines a list of properties in the class to be serialized into xml elements.
            </summary>
            <returns>A list of string property names.</returns>
            <remarks>Xml elements may always exist, but they may have empty inner text values.</remarks>
        </member>
        <member name="M:RelhaxModpack.Shortcuts.Shortcut.GetXmlDatabasePropertiesV1Dot0">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.0 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Shortcuts.Shortcut.GetXmlDatabasePropertiesV1Dot1">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.1 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Shortcuts.Shortcut.GetXmlDatabasePropertiesV1Dot2">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.2 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="P:RelhaxModpack.Shortcuts.Shortcut.Path">
            <summary>
            The target of the shortcut
            </summary>
        </member>
        <member name="P:RelhaxModpack.Shortcuts.Shortcut.Name">
            <summary>
            The name for the shortcut
            </summary>
        </member>
        <member name="P:RelhaxModpack.Shortcuts.Shortcut.Enabled">
            <summary>
            Flag for in the installer to actually create the shortcut
            </summary>
        </member>
        <member name="M:RelhaxModpack.Shortcuts.Shortcut.ToString">
            <summary>
            String representation of the object
            </summary>
            <returns>The name property and value of the shortcut.</returns>
        </member>
        <member name="P:RelhaxModpack.Shortcuts.Shortcut.DumpInfoToLog">
            <summary>
            Gets a log formatted string for debugging containing key object name and values.
            </summary>
            <remarks>If debug output is enabled for the log file during an installation, then each instruction will have it's DumpInfoToLog property called.</remarks>
        </member>
        <member name="M:RelhaxModpack.Shortcuts.Shortcut.InstructionsEqual(RelhaxModpack.Installer.Instruction)">
            <summary>
            Compares two instructions to determine if their values are equal.
            </summary>
            <param name="instructionToCompare">The instruction to compare against.</param>
            <returns>True if the compared values are equal, false otherwise.</returns>
        </member>
        <member name="T:RelhaxModpack.Shortcuts.ShortcutUtils">
            <summary>
            A utility class to handle creating of shortcuts
            </summary>
        </member>
        <member name="M:RelhaxModpack.Shortcuts.ShortcutUtils.CreateShortcut(RelhaxModpack.Shortcuts.Shortcut,System.Text.StringBuilder)">
            <summary>
            Creates a shortcut on the user's desktop
            </summary>
            <param name="shortcut">The shortcut parameters</param>
            <param name="sb">The StringBuilder to log the path to the created file</param>
        </member>
        <member name="T:RelhaxModpack.Texture">
            <summary>
            A Texture is a piece of an atlas file. Contains image data such as the position, size, and bitmap itself.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Texture.PropertiesForSerializationAttributes">
            <summary>
            Gets a list of properties that represent xml attributes to be loaded/saved to/from an xml document.
            </summary>
            <returns>The list of properties.</returns>
        </member>
        <member name="M:RelhaxModpack.Texture.PropertiesForSerializationElements">
            <summary>
            Gets a list of properties thata represent xml elements to be loaded/saved to/from an xml document.
            </summary>
            <returns>The list of properties.</returns>
        </member>
        <member name="P:RelhaxModpack.Texture.Name">
            <summary>
            The file name of where this texture came from, without extension.
            </summary>
            <remarks>This is loaded from the map file.</remarks>
        </member>
        <member name="P:RelhaxModpack.Texture.X">
            <summary>
            The x position of the texture in the atlas image.
            </summary>
            <remarks>This is loaded from the map file.</remarks>
        </member>
        <member name="P:RelhaxModpack.Texture.Y">
            <summary>
            The y position of the texture in the atlas image.
            </summary>
            <remarks>This is loaded from the xml file.</remarks>
        </member>
        <member name="P:RelhaxModpack.Texture.Width">
            <summary>
            The width of the texture in the atlas image.
            </summary>
            <remarks>This is loaded from the map file.</remarks>
        </member>
        <member name="P:RelhaxModpack.Texture.Height">
            <summary>
            The height of the texture in the atlas image.
            </summary>
            <remarks>This is loaded from the map file.</remarks>
        </member>
        <member name="F:RelhaxModpack.Texture.AtlasImage">
            <summary>
            The actual bitmap in memory of the image.
            </summary>
            <remarks>This is *not* loaded from the map file and is used internally.</remarks>
        </member>
        <member name="T:RelhaxModpack.Windows.ConflictingPackageDialog">
            <summary>
            Interaction logic for ConflictingPackageDialog.xaml
            </summary>
            <summary>
            ConflictingPackageDialog
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.ConflictingPackageDialog.OptionASelected">
            <summary>
            True if 'option a' of package conflict resolution is selected, false if 'option b' is selected.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.ConflictingPackageDialog.PackageToTryToSelect">
            <summary>
            The package that the user tried to select that conflicts with other already selected packages.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.ConflictingPackageDialog.#ctor(RelhaxModpack.Settings.ModpackSettings,RelhaxModpack.Database.SelectablePackage)">
            <summary>
            Create an instance of the ConflictingPackageDialog class
            </summary>
            <param name="modpackSettings">The modpack settings object</param>
            <param name="packageToTryToSelect">The package that the user tried to select that conflicts with other already selected packages.</param>
        </member>
        <member name="M:RelhaxModpack.Windows.ConflictingPackageDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.DatabaseAutomationRunner">
            <summary>
            Interaction logic for DatabaseAutomationRunner.xaml
            </summary>
            <summary>
            DatabaseAutomationRunner
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseAutomationRunner.CommandLineArg">
            <summary>
            The command line argument specified at application launch to show this window
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseAutomationRunner.LoggingFilename">
            <summary>
            The name of the logfile
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseAutomationRunner.DownloadProgressChanged">
            <summary>
            Event handler to use when a task is reporting download progress.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseAutomationRunner.ProgressChanged">
            <summary>
            Event handler to use when a task is reporting generic progress.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseAutomationRunner.DownloadDataCompleted">
            <summary>
            Event handler to use when a task is reporting a download has been completed.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseAutomationRunner.DownloadFileCompleted">
            <summary>
            Event handler to use when a task is reporting a download to a file has been completed.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseAutomationRunner.UploadProgressChanged">
            <summary>
            Event handler to use when a task is reporting upload progress of a file.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseAutomationRunner.UploadFileCompleted">
            <summary>
            Event handler to use when a task is reporting an upload of a file has been completed.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseAutomationRunner.RelhaxProgressChanged">
            <summary>
            Event handler to use when a task is reporting generic progress using the RelhaxProgress object.
            </summary>
            <seealso cref="T:RelhaxModpack.UI.RelhaxProgress"/>
        </member>
        <member name="M:RelhaxModpack.Windows.DatabaseAutomationRunner.#ctor(RelhaxModpack.Settings.ModpackSettings,RelhaxModpack.Utilities.Enums.Logfiles)">
            <summary>
            Create an instance of the DatabaseAutomationRunner window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.DatabaseAutomationRunner.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.HtmlPathSelector">
            <summary>
            Interaction logic for HtmlPathSelector.xaml
            </summary>
            <summary>
            HtmlPathSelector
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.HtmlPathSelector.HtmlDocumentTextFilename">
            <summary>
            The filename to write the downloaded html document to, to use for additional debugging by the user.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.HtmlPathSelector.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Create an instance of the HtmlpathSelector class window.
            </summary>
            <param name="modpackSettings">The modpack settings object</param>
        </member>
        <member name="M:RelhaxModpack.Windows.HtmlPathSelector.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.RelhaxCustomFeatureWindow">
            <summary>
            A class definition to specify a window that is a separate sub-function of the application:
            It has its own log and settings file, and requires custom loading code
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.RelhaxCustomFeatureWindow.LaunchedFromMainWindow">
            <summary>
            Indicates if this editor instance was launched from the MainWindow or from command line
            </summary>
            <remarks>This changes the behavior of the logging for the editor</remarks>
        </member>
        <member name="P:RelhaxModpack.Windows.RelhaxCustomFeatureWindow.Settings">
            <summary>
            The settings definitions class for this window
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.RelhaxCustomFeatureWindow.RunStandAloneUpdateCheck">
            <summary>
            Controls is the application will, on startup, run a check to see if it's the latest version
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.RelhaxCustomFeatureWindow.Logfile">
            <summary>
            Get or (privately) set the log file enumeration to use when writing log messages in this window.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.RelhaxCustomFeatureWindow.Init">
            <summary>
            Flag to indicate if the window is performing initialization tasks.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.RelhaxCustomFeatureWindow.#ctor(RelhaxModpack.Settings.ModpackSettings,RelhaxModpack.Utilities.Enums.Logfiles)">
            <summary>
            Creates an instance of the RelhaxCustomFeatureWindow class
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.RelhaxCustomFeatureWindow.OnClosed(System.EventArgs)">
            <summary>
            Saves the settings instance used by this application to disk before the window is closed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RelhaxModpack.Windows.RelhaxCustomFeatureWindow.OnWindowLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Loads the settings object with settings values from an xml document specified by the settings object.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.RelhaxCustomFeatureWindow.ApplyFontToWindow">
            <summary>
            If the default font to apply is null, it is saved from this window's default font.
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.RelhaxFeatureWindowWithChanges">
            <summary>
            Represents a window where the user is performing operations that are logged and saved to disk (for example, database editing).
            This class provides an implementation to handle when a user wishes to close the window while he has changes that are not yet written to disk.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.RelhaxFeatureWindowWithChanges.UnsavedChanges">
            <summary>
            Flag to indicate if the user has performed operations that are not yet saved to disk.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.RelhaxFeatureWindowWithChanges.#ctor(RelhaxModpack.Settings.ModpackSettings,RelhaxModpack.Utilities.Enums.Logfiles)">
            <summary>
            Create an instance of a parent class, using the constructor of the RelhaxFeatureWindowWithChanges.
            </summary>
            <param name="modpackSettings">The modpack settings object.</param>
            <param name="logfile">The logfile enumeration to control which logfile to write to from this window.</param>
        </member>
        <member name="M:RelhaxModpack.Windows.RelhaxFeatureWindowWithChanges.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Check if the user has unsaved changes, and if he does, confirm the user wants to close the window (without saving the changes).
            </summary>
            <param name="e">Provides data for a cancel-able event.</param>
        </member>
        <member name="T:RelhaxModpack.Windows.RelhaxLogViewer">
            <summary>
            Interaction logic for RelhaxLogViewer.xaml
            </summary>
            <summary>
            RelhaxLogViewer
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.RelhaxLogViewer.SuppressDebugMessages">
            <summary>
            If true, don't show debug level log messages in the window.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.RelhaxLogViewer.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Create an instance of the RelhaxLogViewer class.
            </summary>
            <param name="modpackSettings">The modpack settings object.</param>
        </member>
        <member name="M:RelhaxModpack.Windows.RelhaxLogViewer.ClearLogWindow">
            <summary>
            Use the dispatcher that created this window to clear the log text display.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.RelhaxLogViewer.StartLogListener">
            <summary>
            Use the dispatcher that created this window to start the log listener.
            </summary>
            <remarks>The windows's dispatcher is subscribed to the OnLogMessageWrite event, which when invoked asynchronously writes the log message to the log window.</remarks>
            <seealso cref="M:RelhaxModpack.Windows.RelhaxLogViewer.OnLogMessageWrite(System.Object,RelhaxModpack.Utilities.ClassEventArgs.LogMessageEventArgs)"/>
        </member>
        <member name="M:RelhaxModpack.Windows.RelhaxLogViewer.StopLogListener">
            <summary>
            Use the dispatcher that created this window to stop the log listener.
            </summary>
            <remarks>The window's dispatcher is un-subscribed from the OnLogMessageWriteEvent.</remarks>
            <seealso cref="M:RelhaxModpack.Windows.RelhaxLogViewer.OnLogMessageWrite(System.Object,RelhaxModpack.Utilities.ClassEventArgs.LogMessageEventArgs)"/>
        </member>
        <member name="M:RelhaxModpack.Windows.RelhaxLogViewer.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.WoTClientSelection">
            <summary>
            Interaction logic for WoTClientSelection.xaml
            </summary>
            <summary>
            WoTClientSelection
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.WoTClientSelection.SelectedPath">
            <summary>
            The selected wot client path to use. A null value means none was selected. It will include the exe.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.WoTClientSelection.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Create an instance of the WoTClientSelection Window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.WoTClientSelection.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.AskCloseWoTResult">
            <summary>
            A return enumeration for the result of the AskCloseWoT window
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AskCloseWoTResult.Retry">
            <summary>
            Try again to check if WoT is open
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AskCloseWoTResult.CancelInstallation">
            <summary>
            Cancel the current installation
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AskCloseWoTResult.ForceClosed">
            <summary>
            Attempt to force close the WoT process
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.AskCloseWoT">
            <summary>
            Interaction logic for AskCloseWoT.xaml
            </summary>
            <summary>
            AskCloseWoT
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.AskCloseWoT.AskCloseWoTResult">
            <summary>
            The return structure for determining the result from closing this window
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.AskCloseWoT.WoTDirectory">
            <summary>
            The location of the WoT installation directory parsed at installation time
            </summary>
            <remarks>The path is absolute, ending at "World_of_Tanks"</remarks>
        </member>
        <member name="M:RelhaxModpack.Windows.AskCloseWoT.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Create an instance of the AskCloseWoT window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.AskCloseWoT.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.CreateFTPFolderName">
            <summary>
            Interaction logic for CreateFTPFolderName.xaml
            </summary>
            <summary>
            CreateFTPFolderName
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.CreateFTPFolderName.FTPPath">
            <summary>
            The absolute FTP path to the current folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.CreateFTPFolderName.Credential">
            <summary>
            The FTP credentials to use
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.CreateFTPFolderName.FTPReturnPath">
            <summary>
            The absolute FTP path to the newly created folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.CreateFTPFolderName.FTPReturnFolderName">
            <summary>
            The newly created folder name
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.CreateFTPFolderName.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Create an instance of the CreateFTPFolderName window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.CreateFTPFolderName.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.Credits">
            <summary>
            Interaction logic for Credits.xaml
            </summary>
            <summary>
            Credits
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.Credits.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Create an instance of the Credits window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.Credits.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.DevleoperSelectionsClosedEventArgs">
            <summary>
            Event argument passed back to the caller for when the developer selection window is closed
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DevleoperSelectionsClosedEventArgs.LoadSelection">
            <summary>
            Determines if a selection should be loaded (for example, if the user closed the window instead of selecting one)
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DevleoperSelectionsClosedEventArgs.FileToLoad">
            <summary>
            the name of the file to load from the online list of selection files
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.DeveloperSelectionsClosedDelagate">
            <summary>
            The delegate callback for when the developer selections window is closed
            </summary>
            <param name="sender">The sender (this)</param>
            <param name="e">The arguments</param>
        </member>
        <member name="T:RelhaxModpack.Windows.DeveloperSelectionsViewer">
            <summary>
            Interaction logic for DeveloperSelectionsViewer.xaml
            </summary>
            <summary>
            DeveloperSelectionsViewer
            </summary>
        </member>
        <member name="E:RelhaxModpack.Windows.DeveloperSelectionsViewer.OnDeveloperSelectionsClosed">
            <summary>
            Fires when the developer selection window is closed
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.DeveloperSelectionsViewer.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Create an instance of the DeveloperSelectionsViewer window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.DeveloperSelectionsViewer.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.Diagnostics">
            <summary>
            Interaction logic for Diagnostics.xaml
            </summary>
            <summary>
            Diagnostics
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.Diagnostics.WoTDirectory">
            <summary>
            The location of the WoT installation directory parsed at installation time
            </summary>
            <remarks>The path is absolute, ending at "World_of_Tanks"</remarks>
        </member>
        <member name="F:RelhaxModpack.Windows.Diagnostics.RelhaxLogfileTrimLength">
            <summary>
            The number of log file entries that should be kept after the trim operation
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.Diagnostics.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Create an instance of the Diagnostics window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.Diagnostics.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.EditorAddRemove">
            <summary>
            Interaction logic for EditorAddRemove.xaml
            </summary>
            <summary>
            EditorAddRemove
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.EditorAddRemove.GlobalDependencies">
            <summary>
            The list of parsed global dependencies
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.EditorAddRemove.Dependencies">
            <summary>
            The list of parsed dependencies
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.EditorAddRemove.ParsedCategoryList">
            <summary>
            The list of parsed categories
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.EditorAddRemove.SelectedPackage">
            <summary>
            The referenced package when selecting to add, the package selected when removing
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.EditorAddRemove.EditOrAdd">
            <summary>
            True is moving package, false is adding package
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.EditorAddRemove.AddSameLevel">
            <summary>
            Toggles if the user requests to add the package at a new level or in the same level as the referenced package
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.EditorAddRemove.DatabaseTreeviewSelectedItem">
            <summary>
            The currently selected package in the editor's database tree view
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.EditorAddRemove.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Create an instance of the EditorAddRemove window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.EditorAddRemove.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.EditorSelectMediaUploadLocation">
            <summary>
            Interaction logic for EditorSelectMediaUploadLocation.xaml
            </summary>
            <summary>
            EditorSelectMediaUploadLocation
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.EditorSelectMediaUploadLocation.Credential">
            <summary>
            The FTP network credential
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.EditorSelectMediaUploadLocation.UploadPath">
            <summary>
            The FTP upload path to upload the media to
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.EditorSelectMediaUploadLocation.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Create an instance of the EditorSelectMediaUploadLocation window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.EditorSelectMediaUploadLocation.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.ExceptionCaptureDisplay">
            <summary>
            Interaction logic for ExceptionCaptureDisplay.xaml
            </summary>
            <summary>
            ExceptionCaptureDisplay
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.ExceptionCaptureDisplay.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Create an instance of the ExceptionCaptureDisplay window
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.ExceptionCaptureDisplay.ExceptionText">
            <summary>
            Gets or sets the Exception text to display
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.ExceptionCaptureDisplay.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.ExportModeSelect">
            <summary>
            Interaction logic for ExportModeSelect.xaml
            </summary>
            <summary>
            ExportModeSelect
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.ExportModeSelect.SelectedVersionInfo">
            <summary>
            The selection version info struct that was selected from the user selection
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.ExportModeSelect.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Create an instance of the ExportModeSelect class
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.ExportModeSelect.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.FirstLoadSelectLanguage">
            <summary>
            Interaction logic for FirstLaunchSelectLanguage.xaml
            </summary>
            <summary>
            FirstLoadSelectLanguage
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.FirstLoadSelectLanguage.Continue">
            <summary>
            Flag to determine if the user selected a language
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.FirstLoadSelectLanguage.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Create and instance of the FirstLoadSelectLanguage Window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.FirstLoadSelectLanguage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.FirstLoadAcknowledgments">
            <summary>
            Interaction logic for FirstLoadAcknowledgments.xaml
            </summary>
            <summary>
            FirstLoadAcknowledgments
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.FirstLoadAcknowledgments.UserAgreed">
            <summary>
            Gets and sets is the user has agreed to the Acknowledgments before allowing him/her to use the application
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.FirstLoadAcknowledgments.FirstLoadToV2">
            <summary>
            Flag used to indicate if this is the first time the user is upgrading from Relhax V1 (old application) to Relhax V2.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.FirstLoadAcknowledgments.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Create an instance of the FirstLoadAcknowledgments window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.FirstLoadAcknowledgments.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.GameCenterProperty">
            <summary>
            The object used in getting the value for the php update request
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterProperty.FileName">
            <summary>
            The name of the xml file to get the value from
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterProperty.Xpath">
            <summary>
            The xml xpath to get the value from inside the xml document
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterProperty.ValueBlock">
            <summary>
            The TextBlock that holds the php value text
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterProperty.KeyBlock">
            <summary>
            The Textblock that holds the php key text
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterProperty.Value">
            <summary>
            The value from the xml document to use for the php GET request
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterProperty.GetRequestParamater">
            <summary>
            The name of the php GET request parameter
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterProperty.GaveError">
            <summary>
            Stores if getting the value from xml document was successful
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterProperty.IsRequired">
            <summary>
            Flag for if this parameter is required (hd parameter is not required, for example)
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.PatchFileProperty">
            <summary>
            A class definition for the xml objects returned from the php update request
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.PatchFileProperty.Filename">
            <summary>
            The name of the update file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.PatchFileProperty.FolderName">
            <summary>
            The name of the folder inside 'updates' folder to place the update
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.PatchFileProperty.BaseURL">
            <summary>
            The base URL of where to download the file from
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.PatchFileProperty.Size">
            <summary>
            The size of the file
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.GameCenterUpdateDownloader">
            <summary>
            Interaction logic for GameCenterUpdateDownloader.xaml
            </summary>
            <summary>
            GameCenterUpdateDownloader
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.GameCenterUpdateDownloader.SelectedClient">
            <summary>
            The path to the root client folder (World_of_Tanks), for example
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterUpdateDownloader.GameInfoXml">
            <summary>
            The name of the game info xml to get some of the php properties from
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterUpdateDownloader.MetaDataXml">
            <summary>
            The name of the metadata xml to get some of the php properties from
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterUpdateDownloader.GameMetadataFolder">
            <summary>
            The name of the folder where the metadata xml file is stored
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterUpdateDownloader.WgcNotificationsXml">
            <summary>
            The Wargaming game center xml file containing the app_id
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterUpdateDownloader.WgcVersionXml">
            <summary>
            The wargaming game center xml file containing the application version
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterUpdateDownloader.WgcProcessName">
            <summary>
            The name of the Game center process shown in windows
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.GameCenterUpdateDownloader.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Create an instance of the GameCenterUpdateDownloaded window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.GameCenterUpdateDownloader.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.NewsViewer">
            <summary>
            Interaction logic for NewsViewer.xaml
            </summary>
            <summary>
            NewsViewer
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.NewsViewer.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Create an instance of the NewsViewer window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.NewsViewer.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.PopOutReplacePatchDesigner">
            <summary>
            Interaction logic for PopOutReplacePatchDesigner.xaml
            </summary>
            <summary>
            PopOutReplacePatchDesigner
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.PopOutReplacePatchDesigner.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Create an instance of the PopOutReplacePatchDesigner Window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.PopOutReplacePatchDesigner.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.AdvancedProgress">
            I exist as a branch
             <summary>
             Interaction logic for Window1.xaml
             </summary>
            <summary>
            AdvancedProgress
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.AdvancedProgress.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Create and initialize the AdvancedProgress window
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AdvancedProgress.ShouldUserInstallBeCalled">
            <summary>
            Flag for if the user installation reporter should have been called
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AdvancedProgress.BackupModsReporter">
            <summary>
            The UI Reporting object for the step of backing up mods
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AdvancedProgress.BackupDataClearCacheClearLogsReporter">
            <summary>
            The UI Reporting object for the steps of backing up data, clearing cache, and clearing logs
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AdvancedProgress.CleanModsReporter">
            <summary>
            The UI Reporting object for the step of cleaning mods
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AdvancedProgress.ExtractionModsReporters">
            <summary>
            The UI Reporting object for the step of extracting mods
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AdvancedProgress.ExtractionUserModsReporter">
            <summary>
            The UI Reporting object for the step of extracting user mods
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AdvancedProgress.RestoreDataXmlUnpackReporter">
            <summary>
            The UI Reporting object for the step of unpacking xml files
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AdvancedProgress.PatchReporter">
            <summary>
            The UI Reporting object for the step of patching files
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AdvancedProgress.ShortcutsReporter">
            <summary>
            The UI Reporting object for the step of creating shortcuts
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AdvancedProgress.AtlasReporter">
            <summary>
            The UI Reporting object for the step of Creating atlas files
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AdvancedProgress.FontInstallTrimDownloadCacheCleanupReporter">
            <summary>
            The UI Reporting object for the step of font install, trimming download cache, and cleanup
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.AdvancedProgress.OnReportDownload(RelhaxModpack.UI.RelhaxDownloadProgress)">
            <summary>
            Report download progress of a package waiting to install.
            </summary>
            <param name="progress">The progress object.</param>
        </member>
        <member name="M:RelhaxModpack.Windows.AdvancedProgress.OnReportAdvancedProgress(RelhaxModpack.UI.RelhaxInstallerProgress)">
            <summary>
            Update the advanced progress UI objects
            </summary>
            <param name="progress">The progress report object</param>
        </member>
        <member name="M:RelhaxModpack.Windows.AdvancedProgress.ToggleComplete(RelhaxModpack.UI.RelhaxInstallTaskReporter)">
            <summary>
            Toggle a reporting task to the complete state
            </summary>
            <param name="reporter">The task to toggle</param>
        </member>
        <member name="M:RelhaxModpack.Windows.AdvancedProgress.ToggleError(RelhaxModpack.UI.RelhaxInstallTaskReporter)">
            <summary>
            Toggle a reporting task to the error state
            </summary>
            <param name="reporter">The task to toggle</param>
        </member>
        <member name="M:RelhaxModpack.Windows.AdvancedProgress.ToggleComplete(RelhaxModpack.Utilities.Enums.InstallerExitCodes)">
            <summary>
            Toggle a reporting task to the complete state
            </summary>
            <param name="exitCode">The reporter of this corresponding install step</param>
            <remarks>If the task reporter is null, it won't throw a NullRefrenceException</remarks>
        </member>
        <member name="M:RelhaxModpack.Windows.AdvancedProgress.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.AddPicturesZip">
            <summary>
            Interaction logic for AddPicturesZip.xaml
            </summary>
            <summary>
            AddPicturesZip
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.AddPicturesZip.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Create and initialize the AddPicturesZip window
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AddPicturesZip.FilesToAddalways">
            <summary>
            A list of files to add for any diagnostic bug report
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AddPicturesZip.FilesToAddList">
            <summary>
            FilesToAddList Name Field
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.AddPicturesZip.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.DatabaseEditor">
            <summary>
            Interaction logic for DatabaseEditor.xaml
            </summary>
            <summary>
            DatabaseEditor
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseEditor.CommandLineArg">
            <summary>
            The command line argument specified at application launch to show this window
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseEditor.LoggingFilename">
            <summary>
            The name of the logfile
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.DatabaseEditor.#ctor(RelhaxModpack.Settings.ModpackSettings,RelhaxModpack.Utilities.Enums.Logfiles)">
            <summary>
            Create an instance of the DatabaseEditor
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.DatabaseEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.EditorTransferWindowClosed">
            <summary>
            The delegate for invocation of when the FTP upload or download finishes
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The Upload or download event arguments</param>
        </member>
        <member name="T:RelhaxModpack.Windows.DatabaseEditorTransferWindow">
            <summary>
            Interaction logic for DatabaseEditorTrnasferWindow.xaml
            </summary>
            <summary>
            DatabaseEditorTransferWindow
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseEditorTransferWindow.ZipFilePathDisk">
            <summary>
            The path to the zip file on the disk
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseEditorTransferWindow.ZipFilePathOnline">
            <summary>
            The FTP path to the zip file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseEditorTransferWindow.ZipFileName">
            <summary>
            The complete name of the Zip file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseEditorTransferWindow.Credential">
            <summary>
            The FTP credentials
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseEditorTransferWindow.TransferMode">
            <summary>
            Enumeration flag to indicate uploading or downloading
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseEditorTransferWindow.PackageToUpdate">
            <summary>
            The package being updated. A null package with Upload=true indicates the item being uploaded is a media
            </summary>
        </member>
        <member name="E:RelhaxModpack.Windows.DatabaseEditorTransferWindow.OnEditorUploadDownloadClosed">
            <summary>
            The event callback used for the editor when an upload or download is finished
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseEditorTransferWindow.Countdown">
            <summary>
            The timeout, in seconds, until the window will automatically close
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseEditorTransferWindow.EditorSettings">
            <summary>
            The reference to the editor settings object. Must be supplied
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.DatabaseEditorTransferWindow.WoTModpackOnlineFolderVersion">
            <summary>
            Get or set the name of the FTP folder to use for logging reporting and user display.
            </summary>
            <remarks>The full path to the file on disk and on the FTP server are handled by other variables</remarks>
            <seealso cref="F:RelhaxModpack.Windows.DatabaseEditorTransferWindow.ZipFilePathDisk"/>
            <seealso cref="F:RelhaxModpack.Windows.DatabaseEditorTransferWindow.ZipFilePathOnline"/>
        </member>
        <member name="M:RelhaxModpack.Windows.DatabaseEditorTransferWindow.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Create an instance of the DatabaseEditorDownlaod class
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.DatabaseEditorTransferWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.ModpackToolbox">
            <summary>
            Interaction logic for DatabaseUpdater.xaml
            </summary>
            <summary>
            ModpackToolbox
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.ModpackToolbox.DatabaseBeforeAfter">
            <summary>
            Allows the old and new versions of a SelectablePackage to be saved temporarily for comparing differences between two database structures
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.ModpackToolbox.DatabaseBeforeAfter.Before">
            <summary>
            The package reference for the database before changes
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.ModpackToolbox.DatabaseBeforeAfter.After">
            <summary>
            The package reference for the database after changes
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.ModpackToolbox.DatabaseBeforeAfter2">
            <summary>
            Allows the old and new versions of a DatabasePackage to be saved temporarily for comparing differences between two database structures
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.ModpackToolbox.DatabaseBeforeAfter2.Before">
            <summary>
            The package reference for the database before changes
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.ModpackToolbox.DatabaseBeforeAfter2.After">
            <summary>
            The package reference for the database after changes
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.ModpackToolbox.CommandLineArg">
            <summary>
            The command line argument specified at application launch to show this window
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.ModpackToolbox.LoggingFilename">
            <summary>
            The name of the logfile
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.ModpackToolbox.#ctor(RelhaxModpack.Settings.ModpackSettings,RelhaxModpack.Utilities.Enums.Logfiles)">
            <summary>
            Create an instance of the DatabaseUpdater window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.ModpackToolbox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.InstallFinished">
            <summary>
            Interaction logic for InstallFinished.xaml
            </summary>
            <summary>
            InstallFinished
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.InstallFinished.WoTDirectory">
            <summary>
            The location of the WoT installation directory parsed at installation time
            </summary>
            <remarks>The path is absolute, ending at "World_of_Tanks"</remarks>
        </member>
        <member name="M:RelhaxModpack.Windows.InstallFinished.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Create an instance of the InstallFinished window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.InstallFinished.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.SelectionListClosedDelegate">
            <summary>
            The delegate to invoke when calling back to the sender for the SelectionClosed event
            </summary>
            <param name="sender">The sender (this)</param>
            <param name="e">The event arguments to send to the installer (MainWindow)</param>
        </member>
        <member name="T:RelhaxModpack.Windows.PackageSelectionList">
            <summary>
            Interaction logic for PackageSelectionList.xaml
            </summary>
            <summary>
            PackageSelectionList
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.PackageSelectionList.ParsedCategoryList">
            <summary>
            The list of categories
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.PackageSelectionList.GlobalDependencies">
            <summary>
            The list of global dependencies
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.PackageSelectionList.Dependencies">
            <summary>
            The list of dependencies
            </summary>
        </member>
        <member name="E:RelhaxModpack.Windows.PackageSelectionList.OnSelectionListReturn">
            <summary>
            The event that a caller can subscribe to wait for when the selection window actually closes, with arguments for the installation
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.PackageSelectionList.AutoInstallMode">
            <summary>
            Flag to determine if the current installation is started from auto install mode
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.PackageSelectionList.WotClientVersion">
            <summary>
            The WoT client version.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.PackageSelectionList.DatabaseVersion">
            <summary>
            The Database version that the user is currently selecting from.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.PackageSelectionList.WoTDirectory">
            <summary>
            The WoT client path that the user is selecting packages to install to.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.PackageSelectionList.DatabaseManager">
            <summary>
            Get the database manager object to use for loading the database.
            </summary>
            <remarks>If it is null upon loading the window, it will be created automatically.</remarks>
        </member>
        <member name="P:RelhaxModpack.Windows.PackageSelectionList.LoadingUI">
            <summary>
            Flag to indicate if the window is loading application specific UI
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.PackageSelectionList.#ctor(RelhaxModpack.Settings.ModpackSettings,RelhaxModpack.Settings.CommandLineSettings)">
            <summary>
            Create an instance of the PackageSelectionList window
            </summary>
            <param name="modpackSettings">The modpack settings object</param>
            <param name="commandLineSettings">The command line settings object.</param>
        </member>
        <member name="M:RelhaxModpack.Windows.PackageSelectionList.#ctor(RelhaxModpack.Settings.ModpackSettings,RelhaxModpack.Settings.CommandLineSettings,RelhaxModpack.Database.DatabaseManager)">
            <summary>
            Create an instance of the PackageSelectionList window
            </summary>
            <param name="modpackSettings">The modpack settings object</param>
            <param name="commandLineSettings">The command line settings object.</param>
            <param name="manager">The database manager object to use for loading the database</param>
        </member>
        <member name="M:RelhaxModpack.Windows.PackageSelectionList.ClearSelections(System.Collections.Generic.List{RelhaxModpack.Database.SelectablePackage})">
            <summary>
            Clears all selections in the given lists by setting the checked properties to false
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.PackageSelectionList.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.PatchDesigner">
            <summary>
            Interaction logic for PatchDesigner.xaml
            </summary>
            <summary>
            PatchDesigner
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.PatchDesigner.CommandLineArg">
            <summary>
            The command line argument specified at application launch to show this window
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.PatchDesigner.LoggingFilename">
            <summary>
            The name of the logfile
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.PatchDesigner.#ctor(RelhaxModpack.Settings.ModpackSettings,RelhaxModpack.Utilities.Enums.Logfiles)">
            <summary>
            Create an instance of the PatchDesigner window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.PatchDesigner.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.Preview">
            <summary>
            Interaction logic for Preview.xaml
            </summary>
            <summary>
            Preview
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.Preview.Medias">
            <summary>
            Get or set the list of media preview components
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.Preview.EditorMode">
            <summary>
            Sets if the preview was launched from the editor or from the selection list
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.Preview.ComboBoxItemsInsideMode">
            <summary>
            Get or set if the package received contains media from multiple packages from a combobox
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.Preview.InvokedPackage">
            <summary>
            Get or set the package that invoked the preview window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.Preview.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Create an instance of the Preview window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.Preview.Refresh(System.Boolean)">
            <summary>
            Refresh the window to display new preview elements
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.Preview.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.ProgressIndicator">
            <summary>
            Interaction logic for ProgressIndicator.xaml
            </summary>
            <summary>
            ProgressIndicator
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.ProgressIndicator.ProgressMinimum">
            <summary>
            Gets or sets the minimum value of progress to display
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.ProgressIndicator.ProgressMaximum">
            <summary>
            Gets or sets the maximum value of progress to display
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.ProgressIndicator.Message">
            <summary>
            Gets or sets the progress message to display
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.ProgressIndicator.ProgressValue">
            <summary>
            Gets or sets the progress value to display
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.ProgressIndicator.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Creates an instance of the ProgressIndicator class
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.ProgressIndicator.UpdateProgress(System.Double)">
            <summary>
            Update the progress bar value
            </summary>
            <param name="percent">The progress report from minimum to maximum</param>
        </member>
        <member name="M:RelhaxModpack.Windows.ProgressIndicator.UpdateProgress(System.Double,System.String)">
            <summary>
            Update the progress bar and message values
            </summary>
            <param name="percent">The progress report from minimum to maximum</param>
            <param name="updatedmessage">The message to display</param>
        </member>
        <member name="M:RelhaxModpack.Windows.ProgressIndicator.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.RelhaxWindow">
            <summary>
            Defines a window with translation and custom UI color
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.RelhaxWindow.LocalizeWindow">
            <summary>
            Controls if the window should have translation applied
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.RelhaxWindow.ApplyToolTips">
            <summary>
            Controls if the window should have tool tips applied
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.RelhaxWindow.EscapeKeyClosesWindow">
            <summary>
            Controls if pressing the escape key while the window is open will close it.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.RelhaxWindow.OriginalWidth">
            <summary>
            The original Width and Height of the window before scaling
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.RelhaxWindow.OriginalHeight">
            <summary>
            The original Width and Height of the window before scaling
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.RelhaxWindow.ModpackSettings">
            <summary>
            A reference to the modpack settings window configuration class
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.RelhaxWindow.CommandLineSettings">
            <summary>
            A reference to the command line settings configuration class
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.RelhaxWindow.DefaultFontFamily">
            <summary>
            Get or set the default font to use in this window.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.RelhaxWindow.SelectedFontFamily">
            <summary>
            Get or set the selected font to use in this window.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.RelhaxWindow.FontList">
            <summary>
            Get a list of fonts installed on the system for this window to use.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.RelhaxWindow.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Creates an instance of the RelhaxWindow class
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.RelhaxWindow.OnKeyUp(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Method that occurs when they key up event is fired.
            </summary>
            <param name="sender">The object that sent the request.</param>
            <param name="e">The key event args to go with the event.</param>
        </member>
        <member name="M:RelhaxModpack.Windows.RelhaxWindow.OnWindowLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Performs custom window loading functions that should be done to all windows of this class
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>This function saves the original size that the window was designed for (scaling), applies localizations, applies color settings,
            applies custom font, and applies scaling. Each application action is controlled by a boolean.</remarks>
        </member>
        <member name="M:RelhaxModpack.Windows.RelhaxWindow.ApplyApplicationScale(System.Double)">
            <summary>
            Applies vector based application scaling to the specified window
            </summary>
            <param name="scaleValue">The amount of scaling, in a multiplication factor, to apply to the window from</param>
        </member>
        <member name="M:RelhaxModpack.Windows.RelhaxWindow.ApplyFontToWindow">
            <summary>
            Applies the given FontFamily font type to the window
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.RelhaxWindow.DarkTheme">
            <summary>
            Toggle if the application should use dark theme styles.
            </summary>
        </member>
        <member name="E:RelhaxModpack.Windows.RelhaxWindow.PropertyChanged">
            <summary>
            Occurs after a property that uses OnPropertyChanged has been set.
            </summary>
            <remarks>At the time of this writing, the only property in RelhaxWindow to use this is the DarkTheme property.</remarks>
            <seealso cref="M:RelhaxModpack.Windows.RelhaxWindow.OnPropertyChanged(System.String)"/>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            <seealso cref="P:RelhaxModpack.Windows.RelhaxWindow.DarkTheme"/>
        </member>
        <member name="M:RelhaxModpack.Windows.RelhaxWindow.OnPropertyChanged(System.String)">
            <summary>
            Called from a property in this class that wants to tell PropertyChanged listeners that it has changed.
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
            <remarks>At the time of this writing, the only property in RelhaxWindow to use this is the DarkTheme property.</remarks>
            <seealso cref="E:RelhaxModpack.Windows.RelhaxWindow.PropertyChanged"/>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            <seealso cref="P:RelhaxModpack.Windows.RelhaxWindow.DarkTheme"/>
        </member>
        <member name="T:RelhaxModpack.Windows.SelectionFileIssuesDisplay">
            <summary>
            Interaction logic for RelhaxMessageWindow.xaml
            </summary>
            <summary>
            SelectionFileIssuesDisplay
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.SelectionFileIssuesDisplay.HeaderText">
            <summary>
            Get or set the text of the window header (TextBlock)
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.SelectionFileIssuesDisplay.BodyText">
            <summary>
            Get of set the text of the window body (TextBox)
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.SelectionFileIssuesDisplay.ButtonText">
            <summary>
            Get or set the text of the window button
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.SelectionFileIssuesDisplay.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Create an instance of the RelhaxMessageWindow class
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.SelectionFileIssuesDisplay.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.ScalingConfirmation">
            <summary>
            Interaction logic for ScalingConfirmation.xaml
            </summary>
            <summary>
            ScalingConfirmation
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.ScalingConfirmation.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Create an instance of the ScalingConfirmation window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.ScalingConfirmation.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.VersionInfo">
            <summary>
            Interaction logic for VersionInfo.xaml
            </summary>
            <summary>
            VersionInfo
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.VersionInfo.ConfirmUpdate">
            <summary>
            Gets if the user selected to accept the update
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.VersionInfo.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Create an instance of the VersionInfo class
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.VersionInfo.OnKeyUp(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Method that occurs when the key up event is fired. Sets the update confirm to false and runs the base method.
            </summary>
            <param name="sender">The object that sent the request.</param>
            <param name="e">The key event args to go with the event.</param>
        </member>
        <member name="M:RelhaxModpack.Windows.VersionInfo.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Xml.XmlUnpack">
            <summary>
            Represents a set of xml instructions for extracting and copying xml files into another location. Includes xml binary decompression
            </summary>
        </member>
        <member name="F:RelhaxModpack.Xml.XmlUnpack.XmlUnpackXmlSearchPath">
            <summary>
            For xml unpack instruction files, the xpath to return a list of all xml unpack instruction xml elements.
            </summary>
            <remarks>As of the time of this writing, all instructions are now stored inside the database and are no longer separate xml files in the package zip files.</remarks>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUnpack.#ctor">
            <summary>
            Creates an instance of the XmlUnpack class.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUnpack.#ctor(RelhaxModpack.Xml.XmlUnpack)">
            <summary>
            Creates an instance of the XmlUnpack class, copying values form a given XmlUnpack object.
            </summary>
            <param name="xmlUnpackToCopy">The XmlUnpack object to copy.</param>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUnpack.Copy(RelhaxModpack.Xml.XmlUnpack)">
            <summary>
            Creates a copy of the given XmlUnpack object.
            </summary>
            <param name="xmlUnpackToCopy">The XmlUnpack object to copy.</param>
            <returns>A copy of the XmlUnpack object.</returns>
        </member>
        <member name="P:RelhaxModpack.Xml.XmlUnpack.RootObjectPath">
            <summary>
            The xpath to use to get a list of xml element objects that represent each instruction to serialize.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUnpack.PropertiesToSerialize">
            <summary>
            Defines a list of properties in the class to be serialized into xml elements.
            </summary>
            <returns>A list of string property names.</returns>
            <remarks>Xml elements may always exist, but they may have empty inner text values.</remarks>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUnpack.GetXmlDatabasePropertiesV1Dot0">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.0 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUnpack.GetXmlDatabasePropertiesV1Dot1">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.1 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUnpack.GetXmlDatabasePropertiesV1Dot2">
            <summary>
            Creates the list of xml components (attributes and elements) to use for xml serialization according to the 1.2 xml schema.
            </summary>
            <returns>The list of xml components, describing the class property name, xml node name, and xml node type</returns>
            <remarks>The order of the properties in the list is used to consider where in the xml document they should be located (it tracks order).</remarks>
            <seealso cref="T:RelhaxModpack.Database.XmlDatabaseProperty"/>
        </member>
        <member name="P:RelhaxModpack.Xml.XmlUnpack.FileName">
            <summary>
            Name of the file to extract
            </summary>
        </member>
        <member name="P:RelhaxModpack.Xml.XmlUnpack.ExtractDirectory">
            <summary>
            Path to place the extracted or copied file
            </summary>
        </member>
        <member name="P:RelhaxModpack.Xml.XmlUnpack.NewFileName">
            <summary>
            Filename with replaced macros for destination writing
            </summary>
        </member>
        <member name="P:RelhaxModpack.Xml.XmlUnpack.DumpInfoToLog">
            <summary>
            Gets a log formatted string for debugging containing key object name and values.
            </summary>
            <remarks>If debug output is enabled for the log file during an installation, then each instruction will have it's DumpInfoToLog property called.</remarks>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUnpack.ToString">
            <summary>
            A string representation of the object
            </summary>
            <returns>The FileName property name and value.</returns>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUnpack.InstructionsEqual(RelhaxModpack.Installer.Instruction)">
            <summary>
            Compares two instructions to determine if their values are equal.
            </summary>
            <param name="instructionToCompare">The instruction to compare against.</param>
            <returns>True if the compared values are equal, false otherwise.</returns>
        </member>
        <member name="T:RelhaxModpack.Xml.XmlUtils">
            <summary>
            Utility class for dealing with Xml features and functions
            </summary>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUtils.IsValidXml(System.String)">
            <summary>
            Check to make sure an Xml file is valid
            </summary>
            <param name="filePath">The path to the Xml file</param>
            <returns>True if valid Xml, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUtils.IsValidXml(System.String,System.String)">
            <summary>
            Check to make sure an Xml file is valid
            </summary>
            <param name="xmlString">The Xml text string</param>
            <param name="fileName">the name of the file, used for debugging purposes</param>
            <returns>True if valid Xml, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUtils.GetXmlStringFromXPath(System.String,System.String)">
            <summary>
            Get an Xml element attribute given an Xml path
            </summary>
            <param name="file">The path to the Xml file</param>
            <param name="xpath">The xpath search string</param>
            <returns>The value from the xpath search, otherwise null</returns>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUtils.GetXmlStringFromXPath(System.String,System.String,System.String)">
            <summary>
            Get an Xml element attribute given an Xml path
            </summary>
            <param name="xmlString">The Xml text string</param>
            <param name="xpath">The xpath search string</param>
            <param name="filename"></param>
            <returns>The value from the xpath search, otherwise null</returns>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUtils.GetXmlStringFromXPath(System.Xml.XmlDocument,System.String)">
            <summary>
            Get an Xml element attribute given an Xml path
            </summary>
            <param name="doc">The Xml document object to check</param>
            <param name="xpath">The xpath search string</param>
            <returns>The value from the xpath search, otherwise null</returns>
            <remarks>
            The following are Xml attribute examples
            element example: "//root/element"
            attribute example: "//root/element/@attribute"
            for the onlineFolder version: //modInfoAlpha.xml/@onlineFolder
            for the folder version: //modInfoAlpha.xml/@version
            </remarks>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUtils.GetXmlStringFromXPath(System.Xml.Linq.XDocument,System.String)">
            <summary>
            Get a string value of the xml element or attribute inner text
            </summary>
            <param name="doc">The XDocument to get the value from</param>
            <param name="xpath">The xpath search term</param>
            <returns>The xpath return result, null if no value or failed expression</returns>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUtils.GetXmlNodeFromXPath(System.String,System.String)">
            <summary>
            Get an Xml node value given an Xml path
            </summary>
            <param name="file">The path to the Xml file</param>
            <param name="xpath">The xpath search string</param>
            <returns>The Xml node object of the search result, or null</returns>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUtils.GetXmlNodeFromXPath(System.String,System.String,System.String)">
            <summary>
            Get an Xml node value given an Xml path
            </summary>
            <param name="xmlString">The Xml string to parse</param>
            <param name="xpath">The xpath search string</param>
            <param name="filename">The name of the file, used for logging purposes</param>
            <returns>The Xml node object of the search result, or null</returns>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUtils.GetXmlNodeFromXPath(System.Xml.XmlDocument,System.String)">
            <summary>
            Get an Xml node value given an Xml path
            </summary>
            <param name="doc">The XmlDocument object to search</param>
            <param name="xpath">The xpath string</param>
            <returns>The Xml node object of the search result, or null</returns>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUtils.GetXNodeFromXpath(System.Xml.Linq.XDocument,System.String)">
            <summary>
            Get an Xml node value given an Xml path
            </summary>
            <param name="doc">The XmlDocument object to search</param>
            <param name="xpath">The xpath string</param>
            <returns>The XPathNavigator node of the search result, or null</returns>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUtils.GetXmlNodesFromXPath(System.String,System.String)">
            <summary>
            Get a List of Xml nodes that match given an Xml path
            </summary>
            <param name="file">The path to the Xml file</param>
            <param name="xpath">The xpath string</param>
            <returns>The node list of matching results, or null</returns>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUtils.GetXmlNodesFromXPath(System.String,System.String,System.String)">
            <summary>
            Get a List of Xml nodes that match given an Xml path
            </summary>
            <param name="xmlString">The xml document in a string</param>
            <param name="filename">The name of the document for logging purposes</param>
            <param name="xpath">The xpath string</param>
            <returns>The node list of matching results, or null</returns>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUtils.GetXmlNodesFromXPath(System.Xml.XmlDocument,System.String)">
            <summary>
            Get a List of Xml nodes that match given an Xml path
            </summary>
            <param name="doc">The XmlDocument to search</param>
            <param name="xpath">The xml path string</param>
            <returns>The node list of matching results, or null</returns>
            <remarks>XmlElement and XmlAttribute inherit from XmlNode</remarks> 
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUtils.GetXNodesFromXpath(System.Xml.Linq.XDocument,System.String)">
            <summary>
            Get a List of XPathNavigators that match given an Xml path
            </summary>
            <param name="doc">The XmlDocument to search</param>
            <param name="xpath">The xml path string</param>
            <returns>The node list of matching results, or null</returns>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUtils.DocumentToXDocument(System.Xml.XmlDocument)">
            <summary>
            Convert an XmlDocument to an XDocument
            </summary>
            <param name="doc">The XmlDocument to convert</param>
            <returns>The converted XDocument</returns>
            <remarks>See https://blogs.msdn.microsoft.com/xmlteam/2009/03/31/converting-from-xmldocument-to-xdocument/ </remarks>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUtils.ElementToXElement(System.Xml.XmlElement)">
            <summary>
            Convert an XmlElement to an XElement
            </summary>
            <param name="element">The element to convert to XElement</param>
            <returns>The converted XElement</returns>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUtils.LoadXDocument(System.String,RelhaxModpack.Utilities.Enums.XmlLoadType)">
            <summary>
            Load an Xml document to an XDocument object
            </summary>
            <param name="fileOrXml">The filepath or string representation of the Xml document</param>
            <param name="type">The type to define if fileOrXml is a file path or the Xml string</param>
            <returns>A parsed XDocument of the Xml document</returns>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUtils.LoadXmlDocument(System.String,RelhaxModpack.Utilities.Enums.XmlLoadType)">
            <summary>
            Load an Xml document to an XmlDocument object
            </summary>
            <param name="fileOrXml">The filepath or string representation of the Xml document</param>
            <param name="type">The type to define if fileOrXml is a file path or the Xml string</param>
            <returns>A parsed XmlDocument of the Xml document</returns>
        </member>
        <member name="M:RelhaxModpack.Xml.XmlUtils.UnpackXmlFile(RelhaxModpack.Xml.XmlUnpack,System.Text.StringBuilder)">
            <summary>
            Copies an xml file from an archive or directory path and unpacks it from binary Xml to human-readable Xml
            </summary>
            <param name="xmlUnpack">The Xml unpack instructions object</param>
            <param name="unpackBuilder">The stringBuilder to log the generated files location for the install log</param>
        </member>
        <member name="T:RelhaxModpack.LoggingMessageWrite">
            <summary>
            Delegate for allowing method callback when the logfile writes to disk
            </summary>
            <param name="sender">The logfile instance object</param>
            <param name="e">The message and log level event argument</param>
        </member>
        <member name="T:RelhaxModpack.Logfile">
            <summary>
            Represents an instance of a log file used for writing important logging information to a log
            </summary>
        </member>
        <member name="P:RelhaxModpack.Logfile.Filepath">
            <summary>
            The path to the file the log is writing to
            </summary>
        </member>
        <member name="P:RelhaxModpack.Logfile.Filename">
            <summary>
            The name of the file that the log is writing to
            </summary>
        </member>
        <member name="P:RelhaxModpack.Logfile.Timestamp">
            <summary>
            The date and time format for writing each line in the log file
            </summary>
        </member>
        <member name="P:RelhaxModpack.Logfile.IsRedirecting">
            <summary>
            Flag for if the log file is receiving redirections from other log file
            </summary>
        </member>
        <member name="P:RelhaxModpack.Logfile.CanWrite">
            <summary>
            Returns true if the fileStream is not null and can be written to, false otherwise
            </summary>
        </member>
        <member name="P:RelhaxModpack.Logfile.VerboseLogging">
            <summary>
            Gets or sets if this log file will write lots of diagnostic messages to the log file.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logfile.fileStream">
            <summary>
            The fileStream object to write/create the log file. Requires disposal support
            </summary>
        </member>
        <member name="E:RelhaxModpack.Logfile.OnLogfileWrite">
            <summary>
            The event for when the logfile is written to
            </summary>
        </member>
        <member name="M:RelhaxModpack.Logfile.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Create an instance of the log file
            </summary>
            <param name="filePath">The path to the file to create/open</param>
            <param name="timestamp">the date and time format to write for each log line</param>
            <param name="verbose">Flag if the logfile will be outputting diagnostic info</param>
            <remarks>The verbose value will be ignored if the Application is not a beta or alpha build.</remarks>
        </member>
        <member name="M:RelhaxModpack.Logfile.Init(System.Boolean)">
            <summary>
            Initializes the log file
            </summary>
            <returns>True if successful initialization, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Logfile.Write(System.String,RelhaxModpack.Utilities.Enums.LogLevel)">
            <summary>
            Writes a line of text to the log file with the date and timestamp, and severity level of the message
            </summary>
            <param name="message">The line to write</param>
            <param name="logLevel">The level of severity of the log message</param>
        </member>
        <member name="M:RelhaxModpack.Logfile.Write(System.String)">
            <summary>
            Writes a line of text to the log file with the date and timestamp, and severity level of the message
            </summary>
            <param name="message">The message to write to the file</param>
        </member>
        <member name="M:RelhaxModpack.Logfile.Dispose(System.Boolean)">
            <summary>
            Dispose Managed and Unmanaged resources used for the log files
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:RelhaxModpack.Logfile.Dispose">
            <summary>
            Dispose Managed and Unmanaged resources used for the log files
            </summary>
        </member>
        <member name="T:RelhaxModpack.Logging">
            <summary>
            A static constant reference to common logging variables and common log references
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logging.ApplicationLogFilename">
            <summary>
            The filename of the application log file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logging.OldApplicationLogFilename">
            <summary>
            The filename of the old application log file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logging.InstallLogFilename">
            <summary>
            The name of the install log file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logging.InstallLogFilenameBackup">
            <summary>
            The name of the backup install log file. During an install process, it backups the current one to provide a history of 1.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logging.UninstallLogFilename">
            <summary>
            the name of the uninstall log file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logging.UninstallLogFilenameBackup">
            <summary>
            The name of the backup uninstall log file. During an uninstall process, it backups the current one to provide a history of 1.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logging.ApplicationTempLogFilename">
            <summary>
            The name of the custom application log file when opening the application in a custom window mode, if the main application is already open
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logging.ApplicationLogfileTimestamp">
            <summary>
            The string time format for log entries
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logging.ApplicationlogStartStop">
            <summary>
            The header and end that shows the start and stop of the application log file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logging.ApplicationLogfile">
            <summary>
            Provides a constant reference to the log file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logging.InstallLogfile">
            <summary>
            Provides a reference to an instance of an install log file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logging.UninstallLogfile">
            <summary>
            Provides a reference to an instance of an uninstall log file
            </summary>
        </member>
        <member name="M:RelhaxModpack.Logging.Init(RelhaxModpack.Utilities.Enums.Logfiles,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initialize the logging system for the application
            </summary>
            <param name="logfile">The log file to initialize</param>
            <param name="verbose">Flag if the logfile will be outputting diagnostic info (only used if beta or alpha build)</param>
            <param name="logfilePath">The custom path of where to initialize the file</param>
            <param name="logInitFail">If true, show an error message box if the log file fails to initialize.</param>
            <returns>True if successful initialization, false otherwise</returns>
            <remarks>The verbose value will be ignored if the Application is not a beta or alpha build.</remarks>
        </member>
        <member name="M:RelhaxModpack.Logging.GetLogfile(RelhaxModpack.Utilities.Enums.Logfiles)">
            <summary>
            Get the instance of the logfile type
            </summary>
            <param name="logfile">The logfile enumeration of the logfile reference to return</param>
            <returns>The instance of the log file</returns>
        </member>
        <member name="M:RelhaxModpack.Logging.RedirectLogOutput(RelhaxModpack.Utilities.Enums.Logfiles,RelhaxModpack.Utilities.Enums.Logfiles)">
            <summary>
            Re-directs log messages that are meant for one logfile, and instead get sent into another
            </summary>
            <param name="redirectFrom">The logfile whose messages are being redirected</param>
            <param name="redirectTo">The logfile that will receive the redirected messages</param>
            <returns>True if the redirection succeeds, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Logging.DisableRedirection(RelhaxModpack.Utilities.Enums.Logfiles,RelhaxModpack.Utilities.Enums.Logfiles)">
            <summary>
            Cancels a previous re-direction setup.
            </summary>
            <param name="redirectFrom">The logfile whose messages were being redirected</param>
            <param name="redirectTo">The logfile that will no longer receive the redirected messages</param>
            <returns>True if the redirection cancellation succeeds, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Logging.IsLogDisposed(RelhaxModpack.Utilities.Enums.Logfiles)">
            <summary>
            Checks if the logfile is disposed
            </summary>
            <param name="file">The logfile to check</param>
            <returns>True if the logfile object is null</returns>
        </member>
        <member name="M:RelhaxModpack.Logging.IsLogOpen(RelhaxModpack.Utilities.Enums.Logfiles)">
            <summary>
            Checks if the logfile is instanced and can be written to using the CanWrite property
            </summary>
            <param name="file">The logfile to check</param>
            <returns>True if the logfile is open and available to be written to</returns>
        </member>
        <member name="M:RelhaxModpack.Logging.DisposeLogging(RelhaxModpack.Utilities.Enums.Logfiles)">
            <summary>
            Dispose of the application logging subsystem
            </summary>
            <param name="logfile">The logfile to dispose</param>
        </member>
        <member name="M:RelhaxModpack.Logging.WriteHeader(RelhaxModpack.Utilities.Enums.Logfiles)">
            <summary>
            Writes the ApplicationlogStartStop constant to the logfile
            </summary>
            <param name="logfile">The logfile to write the header on</param>
        </member>
        <member name="M:RelhaxModpack.Logging.TryWriteToLog(System.String,RelhaxModpack.Utilities.Enums.Logfiles,RelhaxModpack.Utilities.Enums.LogLevel)">
            <summary>
            Attempts to write to a specified logfile. No error is logged if it cannot
            </summary>
            <remarks>It checks to make sure the logfile isn't disposed, and then to make sure the logfile is open in a valid instance</remarks>
            <param name="message">The message to write</param>
            <param name="logfile">The logfile to write to</param>
            <param name="logLevel">The level of severity of the message. If not Application log, this parameter is ignored</param>
        </member>
        <member name="M:RelhaxModpack.Logging.TryWriteToLog(System.String,RelhaxModpack.Utilities.Enums.Logfiles,RelhaxModpack.Utilities.Enums.LogLevel,System.Object[])">
            <summary>
            Attempts to write to a specified logfile. No error is logged if it cannot
            </summary>
            <param name="messageFormat">The formatted string to be passed into the string.Format() method</param>
            <param name="logfile">The logfile to write to</param>
            <param name="logLevel">The level of severity of the message. If not Application log, this parameter is ignored</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.WriteToLog(System.String,RelhaxModpack.Utilities.Enums.Logfiles,RelhaxModpack.Utilities.Enums.LogLevel)">
            <summary>
            Writes a message to a logfile instance, if it exists
            </summary>
            <param name="message">The message to write</param>
            <param name="logfiles">The logfile to write to</param>
            <param name="logLevel">The level of severity of the message. If not Application log, this parameter is ignored</param>
        </member>
        <member name="M:RelhaxModpack.Logging.WriteToLog(System.String,RelhaxModpack.Utilities.Enums.Logfiles,RelhaxModpack.Utilities.Enums.LogLevel,System.Object[])">
            <summary>
            Writes a message to a logfile instance, if it exists
            </summary>
            <param name="messageFormat">The formatted string to be passed into the string.Format() method</param>
            <param name="logfile">The logfile to write to</param>
            <param name="level">The severity level of the message. Will be written as part of the format</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Debug(System.String)">
            <summary>
            Writes a debug level message to the application log
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Debug(System.String,System.Object[])">
            <summary>
            Writes a debug level message to the application log
            </summary>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Debug(RelhaxModpack.Utilities.Enums.LogOptions,System.String)">
            <summary>
            Writes a debug level message to the application log
            </summary>
            <param name="options">Log append options to include class name, method name, or both</param>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Debug(RelhaxModpack.Utilities.Enums.LogOptions,System.String,System.Object[])">
            <summary>
            Writes a debug (info) level message to the application log
            </summary>
            <param name="options">Log append options to include class name, method name, or both</param>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Debug(RelhaxModpack.Utilities.Enums.Logfiles,System.String)">
            <summary>
            Writes a debug level message to a logfile instance.
            </summary>
            <param name="logfile">The logfile to write to.</param>
            <param name="message">The message to write</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Debug(RelhaxModpack.Utilities.Enums.Logfiles,System.String,System.Object[])">
            <summary>
            Writes a debug level message to a logfile instance.
            </summary>
            <param name="logfile">The logfile to write to.</param>
            <param name="message">The message to write</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Debug(RelhaxModpack.Utilities.Enums.Logfiles,RelhaxModpack.Utilities.Enums.LogOptions,System.String)">
            <summary>
            Writes a debug level message to a logfile instance.
            </summary>
            <param name="logfile">The logfile to write to.</param>
            <param name="options">The log message options to include with the message.</param>
            <param name="message">The message to write</param>
            <seealso cref="T:RelhaxModpack.Utilities.Enums.LogOptions"/>
        </member>
        <member name="M:RelhaxModpack.Logging.Debug(RelhaxModpack.Utilities.Enums.Logfiles,RelhaxModpack.Utilities.Enums.LogOptions,System.String,System.Object[])">
            <summary>
            Writes a debug level message to a logfile instance.
            </summary>
            <param name="logfile">The logfile to write to.</param>
            <param name="options">The log message options to include with the message.</param>
            <param name="message">The message to write</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
            <seealso cref="T:RelhaxModpack.Utilities.Enums.LogOptions"/>
        </member>
        <member name="M:RelhaxModpack.Logging.Info(System.String)">
            <summary>
            Writes an information (info) level message to the application log
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Info(System.String,System.Object[])">
            <summary>
            Writes an information (info) level message to the application log
            </summary>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Info(RelhaxModpack.Utilities.Enums.LogOptions,System.String)">
            <summary>
            Writes an information (info) level message to the application log
            </summary>
            <param name="options">Log append options to include class name, method name, or both</param>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Info(RelhaxModpack.Utilities.Enums.LogOptions,System.String,System.Object[])">
            <summary>
            Writes an information (info) level message to the application log
            </summary>
            <param name="options">Log append options to include class name, method name, or both</param>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Info(RelhaxModpack.Utilities.Enums.Logfiles,System.String)">
            <summary>
            Writes an information (info) level message to the application log
            </summary>
            <param name="logfile">The logfile to write to.</param>
            <param name="message">The message to write</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Info(RelhaxModpack.Utilities.Enums.Logfiles,System.String,System.Object[])">
            <summary>
            Writes an information (info) level message to the application log
            </summary>
            <param name="logfile">The logfile to write to.</param>
            <param name="message">The message to write</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Info(RelhaxModpack.Utilities.Enums.Logfiles,RelhaxModpack.Utilities.Enums.LogOptions,System.String)">
            <summary>
            Writes an information (info) level message to the application log
            </summary>
            <param name="logfile">The logfile to write to.</param>
            <param name="options">The log message options to include with the message.</param>
            <param name="message">The message to write</param>
            <seealso cref="T:RelhaxModpack.Utilities.Enums.LogOptions"/>
        </member>
        <member name="M:RelhaxModpack.Logging.Info(RelhaxModpack.Utilities.Enums.Logfiles,RelhaxModpack.Utilities.Enums.LogOptions,System.String,System.Object[])">
            <summary>
            Writes an information (info) level message to the application log
            </summary>
            <param name="logfile">The logfile to write to.</param>
            <param name="options">The log message options to include with the message.</param>
            <param name="message">The message to write</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
            <seealso cref="T:RelhaxModpack.Utilities.Enums.LogOptions"/>
        </member>
        <member name="M:RelhaxModpack.Logging.Warning(System.String)">
            <summary>
            Writes a warning level message to the application log
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Warning(System.String,System.Object[])">
            <summary>
            Writes a warning level message to the application log
            </summary>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Warning(RelhaxModpack.Utilities.Enums.LogOptions,System.String)">
            <summary>
            Writes a warning level message to the application log
            </summary>
            <param name="options">Log append options to include class name, method name, or both</param>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Warning(RelhaxModpack.Utilities.Enums.LogOptions,System.String,System.Object[])">
            <summary>
            Writes a warning level message to the application log
            </summary>
            <param name="options">Log append options to include class name, method name, or both</param>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Warning(RelhaxModpack.Utilities.Enums.Logfiles,System.String)">
            <summary>
            Writes a warning level message to the application log
            </summary>
            <param name="logfile">The logfile to write to.</param>
            <param name="message">The message to write</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Warning(RelhaxModpack.Utilities.Enums.Logfiles,System.String,System.Object[])">
            <summary>
            Writes a warning level message to the application log
            </summary>
            <param name="logfile">The logfile to write to.</param>
            <param name="message">The message to write</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Warning(RelhaxModpack.Utilities.Enums.Logfiles,RelhaxModpack.Utilities.Enums.LogOptions,System.String)">
            <summary>
            Writes a warning level message to the application log
            </summary>
            <param name="logfile">The logfile to write to.</param>
            <param name="options">The log message options to include with the message.</param>
            <param name="message">The message to write</param>
            <seealso cref="T:RelhaxModpack.Utilities.Enums.LogOptions"/>
        </member>
        <member name="M:RelhaxModpack.Logging.Warning(RelhaxModpack.Utilities.Enums.Logfiles,RelhaxModpack.Utilities.Enums.LogOptions,System.String,System.Object[])">
            <summary>
            Writes a warning level message to the application log
            </summary>
            <param name="logfile">The logfile to write to.</param>
            <param name="options">The log message options to include with the message.</param>
            <param name="message">The message to write</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
            <seealso cref="T:RelhaxModpack.Utilities.Enums.LogOptions"/>
        </member>
        <member name="M:RelhaxModpack.Logging.Error(System.String)">
            <summary>
            Writes an error level message to the application log
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Error(System.String,System.Object[])">
            <summary>
            Writes a error level message to the application log
            </summary>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Error(RelhaxModpack.Utilities.Enums.LogOptions,System.String)">
            <summary>
            Writes an error level message to the application log
            </summary>
            <param name="options">Log append options to include class name, method name, or both</param>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Error(RelhaxModpack.Utilities.Enums.LogOptions,System.String,System.Object[])">
            <summary>
            Writes an error level message to the application log
            </summary>
            <param name="options">Log append options to include class name, method name, or both</param>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Error(RelhaxModpack.Utilities.Enums.Logfiles,System.String)">
            <summary>
            Writes an error level message to the application log
            </summary>
            <param name="logfile">The logfile to write to.</param>
            <param name="message">The message to write</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Error(RelhaxModpack.Utilities.Enums.Logfiles,System.String,System.Object[])">
            <summary>
            Writes an error level message to the application log
            </summary>
            <param name="logfile">The logfile to write to.</param>
            <param name="message">The message to write</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Error(RelhaxModpack.Utilities.Enums.Logfiles,RelhaxModpack.Utilities.Enums.LogOptions,System.String)">
            <summary>
            Writes an error level message to the application log
            </summary>
            <param name="logfile">The logfile to write to.</param>
            <param name="options">The log message options to include with the message.</param>
            <param name="message">The message to write</param>
            <seealso cref="T:RelhaxModpack.Utilities.Enums.LogOptions"/>
        </member>
        <member name="M:RelhaxModpack.Logging.Error(RelhaxModpack.Utilities.Enums.Logfiles,RelhaxModpack.Utilities.Enums.LogOptions,System.String,System.Object[])">
            <summary>
            Writes an error level message to the application log
            </summary>
            <param name="logfile">The logfile to write to.</param>
            <param name="options">The log message options to include with the message.</param>
            <param name="message">The message to write</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
            <seealso cref="T:RelhaxModpack.Utilities.Enums.LogOptions"/>
        </member>
        <member name="M:RelhaxModpack.Logging.Exception(System.String)">
            <summary>
            Writes an exception level message to the application log
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Exception(System.String,System.Object[])">
            <summary>
            Writes an exception level message to the application log
            </summary>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Installer(System.String)">
            <summary>
            Writes a message to the Installer log
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Installer(System.String,System.Object[])">
            <summary>
            Writes a message to the Installer log
            </summary>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Uninstaller(System.String)">
            <summary>
            Writes a message to the Uninstaller log
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Uninstaller(System.String,System.Object[])">
            <summary>
            Writes a message to the Uninstaller log
            </summary>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Editor(System.String,RelhaxModpack.Utilities.Enums.LogLevel)">
            <summary>
            Writes a message to the Editor logfile
            </summary>
            <param name="message">The message</param>
            <param name="level">The level of severity included into the string format</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Editor(System.String,RelhaxModpack.Utilities.Enums.LogLevel,System.Object[])">
            <summary>
            Writes a message to the Editor logfile
            </summary>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="level">The level of severity included into the string format</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Updater(System.String,RelhaxModpack.Utilities.Enums.LogLevel)">
            <summary>
            Writes a message to the Updater logfile
            </summary>
            <param name="message">The message</param>
            <param name="level">The level of severity included into the string format</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Updater(System.String,RelhaxModpack.Utilities.Enums.LogLevel,System.Object[])">
            <summary>
            Writes a message to the Updater logfile
            </summary>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="level">The level of severity included into the string format</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Patcher(System.String,RelhaxModpack.Utilities.Enums.LogLevel)">
            <summary>
            Writes a message to the Patcher logfile
            </summary>
            <param name="message">The message</param>
            <param name="level">The level of severity included into the string format</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Patcher(System.String,RelhaxModpack.Utilities.Enums.LogLevel,System.Object[])">
            <summary>
            Writes a message to the Patcher logfile
            </summary>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="level">The level of severity included into the string format</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.AutomationRunner(System.String,RelhaxModpack.Utilities.Enums.LogLevel)">
            <summary>
            Writes a message to the AutomationRunner logfile
            </summary>
            <param name="message">The message</param>
            <param name="level">The level of severity included into the string format</param>
        </member>
        <member name="M:RelhaxModpack.Logging.AutomationRunner(System.String,RelhaxModpack.Utilities.Enums.LogLevel,System.Object[])">
            <summary>
            Writes a message to the AutomationRunner logfile
            </summary>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="level">The level of severity included into the string format</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.AutomationRunner(RelhaxModpack.Utilities.Enums.LogOptions,System.String,RelhaxModpack.Utilities.Enums.LogLevel,System.Object[])">
            <summary>
            Writes a message to the AutomationRunner logfile
            </summary>
            <param name="options">Log append options to include class name, method name, or both</param>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="level">The level of severity included into the string format</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.AutomationRunner(RelhaxModpack.Utilities.Enums.LogOptions,System.String,RelhaxModpack.Utilities.Enums.LogLevel)">
            <summary>
            Writes a message to the AutomationRunner logfile
            </summary>
            <param name="options">Log append options to include class name, method name, or both</param>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="level">The level of severity included into the string format</param>
        </member>
        <member name="T:RelhaxModpack.RelhaxFreeImageLibrary">
            <summary>
            A wrapper class around the TexImpNet FreeImage library class.
            </summary>
            <remarks>The class handles 32 and 64 bit library loading determination, extraction, and loading into memory.</remarks>
        </member>
        <member name="P:RelhaxModpack.RelhaxFreeImageLibrary.EmbeddedFilename">
            <summary>
            Gets the name of the embedded zip file containing the dll, 32 or 64 bit version.
            </summary>
        </member>
        <member name="P:RelhaxModpack.RelhaxFreeImageLibrary.ExtractedFilename">
            <summary>
            Gets the name of the dll file inside the embedded zip file, 32 or 64bit version.
            </summary>
        </member>
        <member name="P:RelhaxModpack.RelhaxFreeImageLibrary.Filepath">
            <summary>
            Gets the absolute path to the dll file.
            </summary>
        </member>
        <member name="P:RelhaxModpack.RelhaxFreeImageLibrary.IsExtracted">
            <summary>
            Determines if the file is extracted to the Filepath property location. Also checks if latest version is extracted.
            </summary>
        </member>
        <member name="P:RelhaxModpack.RelhaxFreeImageLibrary.IsLoaded">
            <summary>
            Determines if the library is loaded into memory.
            </summary>
        </member>
        <member name="M:RelhaxModpack.RelhaxFreeImageLibrary.Load">
            <summary>
            Attempts to load the library using the Filepath property.
            </summary>
            <returns>True if the library load was successful.</returns>
        </member>
        <member name="M:RelhaxModpack.RelhaxFreeImageLibrary.Unload">
            <summary>
            Attempts to unload the library.
            </summary>
            <returns>True if the library was unloaded, false otherwise.</returns>
        </member>
        <member name="M:RelhaxModpack.RelhaxFreeImageLibrary.Extract">
            <summary>
            Extracts the embedded compressed library to the location in the Filepath property.
            </summary>
        </member>
        <member name="T:RelhaxModpack.RelhaxNvTexLibrary">
            <summary>
            A wrapper class around the TexImpNet NvidiaTT library class.
            </summary>
            <remarks>The class handles 32 and 64 bit library loading determination, extraction, and loading into memory.</remarks>
        </member>
        <member name="P:RelhaxModpack.RelhaxNvTexLibrary.EmbeddedFilename">
            <summary>
            Gets the name of the embedded zip file containing the dll, 32 or 64 bit version.
            </summary>
        </member>
        <member name="P:RelhaxModpack.RelhaxNvTexLibrary.ExtractedFilename">
            <summary>
            Gets the name of the dll file inside the embedded zip file, 32 or 64bit version.
            </summary>
        </member>
        <member name="P:RelhaxModpack.RelhaxNvTexLibrary.Filepath">
            <summary>
            Gets the absolute path to the dll file.
            </summary>
        </member>
        <member name="P:RelhaxModpack.RelhaxNvTexLibrary.IsExtracted">
            <summary>
            Determines if the file is extracted to the Filepath property location. Also checks if latest version is extracted.
            </summary>
        </member>
        <member name="P:RelhaxModpack.RelhaxNvTexLibrary.IsLoaded">
            <summary>
            Determines if the library is loaded into memory.
            </summary>
        </member>
        <member name="M:RelhaxModpack.RelhaxNvTexLibrary.Load">
            <summary>
            Attempts to load the library using the Filepath property.
            </summary>
            <returns>True if the library load was successful.</returns>
        </member>
        <member name="M:RelhaxModpack.RelhaxNvTexLibrary.Unload">
            <summary>
            Attempts to unload the library.
            </summary>
            <returns>True if the library was unloaded, false otherwise.</returns>
        </member>
        <member name="M:RelhaxModpack.RelhaxNvTexLibrary.Extract">
            <summary>
            Extracts the embedded compressed library to the location in the Filepath property.
            </summary>
        </member>
        <member name="T:RelhaxModpack.BadMemeException">
            <summary>
            An exception used mostly for mistakes that could happen during development, 'sanity check' type verification. And also for bad memes.
            </summary>
        </member>
        <member name="M:RelhaxModpack.BadMemeException.#ctor(System.String)">
            <summary>
            Throw a bad meme exception.
            </summary>
            <param name="message">The message to tell the developer why his meme is bad.</param>
        </member>
        <member name="T:RelhaxModpack.CiInfo">
            <summary>Info about the continuous integration server build that produced this binary.</summary> 
        </member>
        <member name="F:RelhaxModpack.CiInfo.BuildTag">
            <summary>String of the build number and build date/time, and other useful info.</summary> 
        </member>
        <member name="T:RelhaxModpack.PatientWebClient">
            <summary>
            A WebClient that allows the use to set a custom timeout value
            </summary>
        </member>
        <member name="P:RelhaxModpack.PatientWebClient.Timeout">
            <summary>
            Get or set the length of time, in milliseconds, until the operation will timeout
            </summary>
        </member>
        <member name="M:RelhaxModpack.PatientWebClient.GetWebRequest(System.Uri)">
            <summary>
            Set the URL to get the request data from
            </summary>
            <param name="uri">The website URL</param>
            <returns>The WebRequest object</returns>
            <remarks>Overrides the GetWebRequest() method to expose the WebRequest object. In doing so, you can set a custom timeout.</remarks>
        </member>
        <member name="T:RelhaxModpack.Translations">
            <summary>
            Handles all localization for the application User Interface
            </summary>
        </member>
        <member name="F:RelhaxModpack.Translations.TranslationNeeded">
            <summary>
            The entry to use when a translation is needed
            </summary>
            <remarks>When designing UI, i'll add the translation entries, but for the not english languages, i'll set
            this value so the application knows to return the english phrase and log the error.</remarks>
        </member>
        <member name="F:RelhaxModpack.Translations.SupportedLanguages">
            <summary>
            An array of all currently supported languages in the modpack
            </summary>
            <remarks>A supported language means that it has translation infrastructure and
            does not imply that all translations exist</remarks>
        </member>
        <member name="P:RelhaxModpack.Translations.TranslationsLoaded">
            <summary>
            Get if the translation dictionaries have been loaded yet
            </summary>
        </member>
        <member name="F:RelhaxModpack.Translations.LanguageEnglish">
            <summary>
            English language string identifier in national language
            </summary>
        </member>
        <member name="F:RelhaxModpack.Translations.LanguagePolish">
            <summary>
            Polish language string identifier in national language
            </summary>
        </member>
        <member name="F:RelhaxModpack.Translations.LanguageGerman">
            <summary>
            German language string identifier in national language
            </summary>
        </member>
        <member name="F:RelhaxModpack.Translations.LanguageFrench">
            <summary>
            French language string identifier in national language
            </summary>
        </member>
        <member name="F:RelhaxModpack.Translations.LanguageSpanish">
            <summary>
            Spanish language string identifier in national language
            </summary>
        </member>
        <member name="F:RelhaxModpack.Translations.LanguageRussian">
            <summary>
            Russian language string identifier in national language
            </summary>
        </member>
        <member name="P:RelhaxModpack.Translations.CurrentLanguageEnum">
            <summary>
            The Currently set language of the Translations class to use for localizing windows and phrases
            </summary>
        </member>
        <member name="M:RelhaxModpack.Translations.SetLanguage(RelhaxModpack.Utilities.Enums.Languages)">
            <summary>
            Sets the language dictionary to use when returning a localized string, and set it in the modpack settings class
            </summary>
            <param name="language">The language to switch to</param>
        </member>
        <member name="M:RelhaxModpack.Translations.GetLanguageDictionaries(RelhaxModpack.Utilities.Enums.Languages)">
            <summary>
            Gets the language dictionary of the enumerated name of the language
            </summary>
            <param name="language">The english-named enumeration of the language</param>
            <returns>The key-value language dictionary</returns>
        </member>
        <member name="M:RelhaxModpack.Translations.GetLanguageNativeName">
            <summary>
            Get the native language name of the english enumerated name of the currently set language in the Translations class
            </summary>
            <returns>The name of the requested language in it's native language</returns>
        </member>
        <member name="M:RelhaxModpack.Translations.GetLanguageNativeName(RelhaxModpack.Utilities.Enums.Languages)">
            <summary>
            Get the native language name of the english enumerated name of the language
            </summary>
            <param name="language">The english-named enumeration of the language</param>
            <returns>The name of the requested language in it's native language</returns>
        </member>
        <member name="M:RelhaxModpack.Translations.UnloadTranslations">
            <summary>
            Unloads the translation hashes
            </summary>
        </member>
        <member name="M:RelhaxModpack.Translations.ReloadTranslations">
            <summary>
            Reloads the translation hashes
            </summary>
        </member>
        <member name="M:RelhaxModpack.Translations.GetTranslatedString(System.String)">
            <summary>
            Get a localized string in the currently selected language
            </summary>
            <param name="componentName">The key value of the string phrase</param>
            <returns></returns>
        </member>
        <member name="M:RelhaxModpack.Translations.ExistsInCurrentLanguage(System.String)">
            <summary>
            Determines if a key exists in the currently selected language, or in english if no language is selected
            </summary>
            <param name="componentName">The key of the component to look up</param>
            <returns>True if it exists in the currently selected language, or false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Translations.Exists(System.String,RelhaxModpack.Utilities.Enums.Languages)">
            <summary>
            Checks is a component (key value) exists in the given language (dictionary)
            </summary>
            <param name="componentName">The keyword phrase to check</param>
            <param name="languageToCheck">The language dictionary to check in</param>
            <returns>True is the entry exists, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Translations.ExistsAndValid(System.String,RelhaxModpack.Utilities.Enums.Languages)">
            <summary>
            Checks that an entry exists and that the translated entry is not a TODO
            </summary>
            <param name="componentName">The language entry (key) to see if exists</param>
            <param name="langaugeToCheck">The language of which dictionary to check</param>
            <returns>True if the component (key) exists and the entry is not TODO</returns>
        </member>
        <member name="M:RelhaxModpack.Translations.LocalizeWindow(RelhaxModpack.Windows.RelhaxWindow,System.Boolean)">
            <summary>
            Applies localized text translations for the passed in window
            See the comments in the method for more information
            </summary>
            <param name="window">The window to apply translations to</param>
            <param name="applyToolTips">Set to true to seach and apply tooltips to the components</param>
        </member>
        <member name="M:RelhaxModpack.Translations.LoadTranslations(System.Boolean)">
            <summary>
            Loads all translation dictionaries. Should only be done once (at application start)
            </summary>
        </member>
        <member name="M:RelhaxModpack.Translations.LoadTranslationsEnglish">
            <summary>
            Loads all English translation dictionaries. Should only be done once (at application start)
            </summary>
        </member>
        <member name="M:RelhaxModpack.Translations.LoadTranslationsFrench">
            <summary>
            Loads all French translation dictionaries. Should only be done once (at application start)
            </summary>
        </member>
        <member name="M:RelhaxModpack.Translations.LoadTranslationsGerman">
            <summary>
            Loads all German translation dictionaries. Should only be done once (at application start)
            </summary>
        </member>
        <member name="M:RelhaxModpack.Translations.LoadTranslationsPolish">
            <summary>
            Loads all Polish translation dictionaries. Should only be done once (at application start)
            </summary>
        </member>
        <member name="M:RelhaxModpack.Translations.LoadTranslationsRussian">
            <summary>
            Loads all Russian translation dictionaries. Should only be done once (at application start)
            </summary>
        </member>
        <member name="M:RelhaxModpack.Translations.LoadTranslationsSpanish">
            <summary>
            Loads all Spanish translation dictionaries. Should only be done once (at application start)
            </summary>
        </member>
        <member name="T:RelhaxModpack.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="F:RelhaxModpack.App.ManagerInfoZipfile">
            <summary>
            The manager info zip in a program reference. Allows for multiple instances of the application to be active at the same time. Also saves milliseconds by not having to write to disk. Parsed upon application load.
            </summary>
        </member>
        <member name="F:RelhaxModpack.App.DefaultFontFamily">
            <summary>
            Get or set the default font to the application to use.
            </summary>
        </member>
        <member name="F:RelhaxModpack.App.Fonts">
            <summary>
            Get or set a list of fonts installed on the system for the application to use.
            </summary>
        </member>
        <member name="M:RelhaxModpack.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:RelhaxModpack.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:RelhaxModpack.MainWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="F:RelhaxModpack.MainWindow.WoTDirectory">
            <summary>
            The location of the WoT installation directory parsed at installation time
            </summary>
            <remarks>The path is absolute, ending at "World_of_Tanks"</remarks>
        </member>
        <member name="F:RelhaxModpack.MainWindow.WoTClientVersion">
            <summary>
            The version information of WoT parsed at installation time
            </summary>
            <remarks>This info is gathered from the "version.xml" file from the game's root directory</remarks>
        </member>
        <member name="F:RelhaxModpack.MainWindow.WoTModpackOnlineFolderVersion">
            <summary>
            The version of the online folder name containing the zip files for this game parsed at installation time
            </summary>
            <remarks>The online folders are done by major versions only i.e. 1.4.1, 1.5.0, etc. All zip files on 1.5.0.x are stored in this folder</remarks>
        </member>
        <member name="F:RelhaxModpack.MainWindow.DatabaseVersion">
            <summary>
            The version of the database parsed upon application load
            </summary>
        </member>
        <member name="F:RelhaxModpack.MainWindow.FirstLoad">
            <summary>
            Determines if this is the first time the application is loading, parsed upon application load
            </summary>
            <remarks>Done by checking if the settings file exists. If it is set to true in the application, it will be set to false again when it closes.</remarks>
        </member>
        <member name="F:RelhaxModpack.MainWindow.FirstLoadToV2">
            <summary>
            Determines if while being the first time loading, if this is an upgrade operation to Relhax V2, parsed upon application load
            </summary>
            <remarks>Done by if FirstLoad is true and the Relhax V1 settings file exists</remarks>
        </member>
        <member name="M:RelhaxModpack.MainWindow.#ctor(RelhaxModpack.Settings.ModpackSettings)">
            <summary>
            Creates the instance of the MainWindow class
            </summary>
            <param name="modpackSettings">The modpack settings object</param>
        </member>
        <member name="M:RelhaxModpack.MainWindow.ApplyFontToWindow">
            <summary>
            Applies the given FontFamily font type to the window. If the DefaultFontFamily property is null, then the current default value is captured for use in other windows.
            </summary>
        </member>
        <member name="M:RelhaxModpack.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.discord_brand">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.donation">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.DotNetZip">
             <summary>
               Looks up a localized string similar to Software Licenses that apply to the DotNetZip library and tools
            
            As DotNetZip includes work derived from other projects, you are required to comply with the terms and conditions for each of them. These licenses include BSD, Apache, and zlib.
            
            To use the software, you must accept the licenses. If you do not accept the licenses, do not use the software.
            
            Original intellectual property in DotNetZip is provided under the Ms-PL:
                
                Copyright (c) 2006 - 2011 Dino Chiesa 
                Copyright (c) 2006, 200 [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.EMail">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.error_loading_picture">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.flag_de">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.flag_gb">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.flag_us">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.grey_area_mod">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.Home">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.HtmlAgilityPack">
             <summary>
               Looks up a localized string similar to The MIT License (MIT)
            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the &quot;Software&quot;), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:
            
            The above copyright notice and this permission n [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.Json_NET">
             <summary>
               Looks up a localized string similar to The MIT License (MIT)
            
            Copyright (c) 2007 James Newton-King
            
            Permission is hereby granted, free of charge, to any person obtaining a copy of
            this software and associated documentation files (the &quot;Software&quot;), to deal in
            the Software without restriction, including without limitation the rights to
            use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
            the Software, and to permit persons to whom the Software is furnished to do so,
            subject to the following conditions:
            
            The ab [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.modpack_icon">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.modpack_license_agrement">
             <summary>
               Looks up a localized string similar to                                  Apache License
                                       Version 2.0, January 2004
                                    http://www.apache.org/licenses/
            
               TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
            
               1. Definitions.
            
                  &quot;License&quot; shall mean the terms and conditions for use, reproduction,
                  and distribution as defined by Sections 1 through 9 of this document.
            
                  &quot;Licensor&quot; shall mean the copyright owner or entity authorized by
                  the copyright owner that is [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.NAudio">
             <summary>
               Looks up a localized string similar to Microsoft Public License (Ms-PL)
            
            This license governs use of the accompanying software. If you use the software, you accept this license. If you do not accept the license, do not use the software.
            
            1. Definitions
            
            The terms &quot;reproduce,&quot; &quot;reproduction,&quot; &quot;derivative works,&quot; and &quot;distribution&quot; have the same meaning here as under U.S. copyright law.
            
            A &quot;contribution&quot; is the original software, or any additions or changes to the software.
            
            A &quot;contributor&quot; is any person that distributes its contribution [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.obfuscated_package_icon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.play_pause">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.popular_icon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.report">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.SpriteSheetPacker">
             <summary>
               Looks up a localized string similar to Copyright (c) 2014-2015 amakaseev.
            
            Permission is hereby granted, free of charge, to any person obtaining
            a copy of this software and associated documentation files (the
            &quot;Software&quot;), to deal in the Software without restriction, including
            without limitation the rights to use, copy, modify, merge, publish,
            distribute, sublicense, and/or sell copies of the Software, and to
            permit persons to whom the Software is furnished to do so, subject to
            the following conditions:
            
            The above copyright notice and t [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.stop2">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.TeximpNet">
             <summary>
               Looks up a localized string similar to Copyright (c) 2016-2018 TeximpNet - Nicholas Woodfield
             
            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the &quot;Software&quot;), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:
            
            The above co [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.WindowsAPICodePack">
             <summary>
               Looks up a localized string similar to License: Custom License
            MICROSOFT SOFTWARE LICENSE TERMS
            MICROSOFT WINDOWS API CODE PACK FOR MICROSOFT .NET FRAMEWORK
            ___________________________________________________
            These license terms are an agreement between Microsoft Corporation (or based on where you live, one of its affiliates) and you. Please read them. They apply to the software named above, which includes the media on which you received it, if any. The terms also apply to any Microsoft
            • updates,
            • supplements,
            • Internet-based services, [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.WoT_brand_light_grey">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
